/* Generated by Cython 0.29.20 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "CYTHON_TRACE_NOGIL",
                "1"
            ],
            [
                "CYTHON_CLINE_IN_TRACEBACK",
                "0"
            ]
        ],
        "depends": [
            "libs/libxpdf/include/Annot.h",
            "libs/libxpdf/include/Array.h",
            "libs/libxpdf/include/CMap.h",
            "libs/libxpdf/include/Catalog.h",
            "libs/libxpdf/include/CharCodeToUnicode.h",
            "libs/libxpdf/include/CharTypes.h",
            "libs/libxpdf/include/Dict.h",
            "libs/libxpdf/include/Error.h",
            "libs/libxpdf/include/ErrorCodes.h",
            "libs/libxpdf/include/FoFiBase.h",
            "libs/libxpdf/include/FoFiTrueType.h",
            "libs/libxpdf/include/FoFiType1C.h",
            "libs/libxpdf/include/Form.h",
            "libs/libxpdf/include/Function.h",
            "libs/libxpdf/include/GList.h",
            "libs/libxpdf/include/GString.h",
            "libs/libxpdf/include/Gfx.h",
            "libs/libxpdf/include/GfxFont.h",
            "libs/libxpdf/include/GfxState.h",
            "libs/libxpdf/include/GlobalParams.h",
            "libs/libxpdf/include/Link.h",
            "libs/libxpdf/include/Object.h",
            "libs/libxpdf/include/OptionalContent.h",
            "libs/libxpdf/include/Outline.h",
            "libs/libxpdf/include/OutputDev.h",
            "libs/libxpdf/include/PDFCore.h",
            "libs/libxpdf/include/PDFDoc.h",
            "libs/libxpdf/include/Page.h",
            "libs/libxpdf/include/SplashBitmap.h",
            "libs/libxpdf/include/SplashOutputDev.h",
            "libs/libxpdf/include/SplashTypes.h",
            "libs/libxpdf/include/Stream.h",
            "libs/libxpdf/include/TextOutputDev.h",
            "libs/libxpdf/include/TextString.h",
            "libs/libxpdf/include/UnicodeMap.h",
            "libs/libxpdf/include/UnicodeRemapping.h",
            "libs/libxpdf/include/XRef.h",
            "libs/libxpdf/include/gfile.h",
            "libs/libxpdf/include/gtypes.h",
            "src/pyxpdf/cpp/BitmapOutputDev.h",
            "src/pyxpdf/document.pxi",
            "src/pyxpdf/globalconfig.pxi",
            "src/pyxpdf/helper.pxi",
            "src/pyxpdf/imageoutput.pxi",
            "src/pyxpdf/includes/AcroForm.pxd",
            "src/pyxpdf/includes/Annot.pxd",
            "src/pyxpdf/includes/Array.pxd",
            "src/pyxpdf/includes/BitmapOutputDev.pxd",
            "src/pyxpdf/includes/CMap.pxd",
            "src/pyxpdf/includes/Catalog.pxd",
            "src/pyxpdf/includes/CharCodeToUnicode.pxd",
            "src/pyxpdf/includes/CharTypes.pxd",
            "src/pyxpdf/includes/Decrypt.pxd",
            "src/pyxpdf/includes/Dict.pxd",
            "src/pyxpdf/includes/DisplayState.pxd",
            "src/pyxpdf/includes/FoFi.pxd",
            "src/pyxpdf/includes/Form.pxd",
            "src/pyxpdf/includes/Function.pxd",
            "src/pyxpdf/includes/Gfx.pxd",
            "src/pyxpdf/includes/GfxFont.pxd",
            "src/pyxpdf/includes/GfxState.pxd",
            "src/pyxpdf/includes/GlobalParams.pxd",
            "src/pyxpdf/includes/HTMLGen.pxd",
            "src/pyxpdf/includes/ImageOutputDev.pxd",
            "src/pyxpdf/includes/Lexer.pxd",
            "src/pyxpdf/includes/Link.pxd",
            "src/pyxpdf/includes/Object.pxd",
            "src/pyxpdf/includes/OptionalContent.pxd",
            "src/pyxpdf/includes/Outline.pxd",
            "src/pyxpdf/includes/OutputDev.pxd",
            "src/pyxpdf/includes/PDFCore.pxd",
            "src/pyxpdf/includes/PDFDoc.pxd",
            "src/pyxpdf/includes/Page.pxd",
            "src/pyxpdf/includes/SplashOutputDev.pxd",
            "src/pyxpdf/includes/Stream.pxd",
            "src/pyxpdf/includes/TextOutputDev.pxd",
            "src/pyxpdf/includes/TextString.pxd",
            "src/pyxpdf/includes/UnicodeMap.pxd",
            "src/pyxpdf/includes/UnicodeRemapping.pxd",
            "src/pyxpdf/includes/XRef.pxd",
            "src/pyxpdf/includes/__init__.pxd",
            "src/pyxpdf/includes/defs.pxd",
            "src/pyxpdf/includes/native.pxd",
            "src/pyxpdf/includes/xpdf_error.pxd",
            "src/pyxpdf/includes/xpdf_types.pxd",
            "src/pyxpdf/pdferror.pxi",
            "src/pyxpdf/pdfoutput.pxi",
            "src/pyxpdf/pdftotext.pxi",
            "src/pyxpdf/textoutput.pxi"
        ],
        "extra_compile_args": [
            "-O0"
        ],
        "include_dirs": [
            "libs/libxpdf/include",
            "src",
            "src/pyxpdf/includes",
            "src/pyxpdf/cpp"
        ],
        "language": "c++",
        "libraries": [
            "xpdf"
        ],
        "library_dirs": [
            "libs/libxpdf/lib"
        ],
        "name": "pyxpdf.xpdf",
        "sources": [
            "src/pyxpdf/xpdf.pyx",
            "src/pyxpdf/cpp/BitmapOutputDev.cc"
        ]
    },
    "module_name": "pyxpdf.xpdf"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_20"
#define CYTHON_HEX_VERSION 0x001D14F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyxpdf__xpdf
#define __PYX_HAVE_API__pyxpdf__xpdf
/* Early includes */
#include <math.h>
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <memory>
#include <vector>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include "stdarg.h"
#include "gtypes.h"
#include "gfile.h"
#include "GString.h"
#include "GList.h"
#include "CharTypes.h"
#include <stdio.h>
#include "Object.h"
#include "Stream.h"
#include "XRef.h"
#include "Array.h"
#include "Dict.h"
#include "Function.h"
#include "Link.h"
#include "TextString.h"
#include "Catalog.h"
#include "Form.h"
#include "PDFCore.h"
#include "Outline.h"
#include "OptionalContent.h"
#include "PDFDoc.h"
#include "Annot.h"
#include "CharCodeToUnicode.h"
#include "FoFiBase.h"
#include "FoFiTrueType.h"
#include "FoFiType1C.h"
#include "GfxFont.h"
#include "GfxState.h"
#include "Gfx.h"
#include "OutputDev.h"
#include "Page.h"
#include "ErrorCodes.h"
#include "Error.h"
#include "UnicodeMap.h"
#include "UnicodeRemapping.h"
#include "CMap.h"
#include "GlobalParams.h"
#include "TextOutputDev.h"
#include "SplashTypes.h"
#include "SplashBitmap.h"
#include "SplashOutputDev.h"
#include "BitmapOutputDev.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/pyxpdf/xpdf.pyx",
  "src/pyxpdf/helper.pxi",
  "src/pyxpdf/pdferror.pxi",
  "src/pyxpdf/globalconfig.pxi",
  "src/pyxpdf/pdftotext.pxi",
  "src/pyxpdf/pdfoutput.pxi",
  "src/pyxpdf/document.pxi",
  "stringsource",
  "src/pyxpdf/textoutput.pxi",
  "src/pyxpdf/imageoutput.pxi",
};

/*--- Type declarations ---*/
struct __pyx_obj_6pyxpdf_4xpdf_PDFError;
struct __pyx_obj_6pyxpdf_4xpdf_XPDFError;
struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError;
struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError;
struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError;
struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError;
struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError;
struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError;
struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig;
struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice;
struct __pyx_obj_6pyxpdf_4xpdf_TextControl;
struct __pyx_obj_6pyxpdf_4xpdf_TextOutput;
struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl;
struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput;
struct __pyx_obj_6pyxpdf_4xpdf_PDFImage;
struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput;
struct __pyx_obj_6pyxpdf_4xpdf_Document;
struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator;
struct __pyx_obj_6pyxpdf_4xpdf_Page;
struct __pyx_obj_6pyxpdf_4xpdf_page_iterator;
struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text;

/* "pyxpdf/includes/xpdf_error.pxd":38
 * 
 * # Make sure to keep it consistent with setErrorCallback
 * ctypedef void (*ErrorCallback)(void *data, ErrorCategory category, int pos, char *msg)             # <<<<<<<<<<<<<<
 */
typedef void (*__pyx_t_6pyxpdf_8includes_10xpdf_error_ErrorCallback)(void *, ErrorCategory, int, char *);

/* "pyxpdf/includes/TextOutputDev.pxd":8
 * from pyxpdf.includes.GfxState cimport GfxState
 * 
 * ctypedef void (*TextOutputFunc)(void *stream, const char *text, int len)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "TextOutputDev.h" nogil:
 */
typedef void (*__pyx_t_6pyxpdf_8includes_13TextOutputDev_TextOutputFunc)(void *, char const *, int);
struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict;
struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw;
struct __pyx_opt_args_6pyxpdf_4xpdf_10TextOutput__get_TextPage;
struct __pyx_opt_args_6pyxpdf_4xpdf_14RawImageOutput_get;
struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_display_pages;
struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text_bytes;
struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text;
struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display_slice;
struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display;
struct __pyx_opt_args_6pyxpdf_4xpdf_4Page__find_text;

/* "src/pyxpdf/helper.pxi":68
 * 
 * 
 * cdef dict Dict_to_pydict(Dict* xdict, dict pydict = {}):             # <<<<<<<<<<<<<<
 *     cdef Object obj
 *     cdef const char* key
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict {
  int __pyx_n;
  PyObject *pydict;
};

/* "src/pyxpdf/pdftotext.pxi":7
 * 
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,             # <<<<<<<<<<<<<<
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw {
  int __pyx_n;
  int start;
  int end;
  PyObject *ownerpass;
  PyObject *userpass;
  PyObject *layout;
  double fixed_pitch;
  double fixed_line_spacing;
  PyObject *discard_clipped;
  PyObject *discard_diagonal;
  PyObject *insert_bom;
  double margin_left;
  double margin_right;
  double margin_top;
  double margin_bottom;
};

/* "src/pyxpdf/textoutput.pxi":214
 *         return self._cache_texts[page_no]
 * 
 *     cdef TextPage* _get_TextPage(self, page_no=0) except NULL:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Page page = self.doc.get_page(page_no)
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_10TextOutput__get_TextPage {
  int __pyx_n;
  PyObject *page_no;
};

/* "src/pyxpdf/imageoutput.pxi":429
 * 
 * 
 *     cpdef object get(self, int page_no, crop_box=(0,0,0,0), scale_pixel_box = None):             # <<<<<<<<<<<<<<
 *         """Get the rendered :class:`~PIL.Image.Image` for `page_no` indexed page
 * 
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_14RawImageOutput_get {
  int __pyx_n;
  PyObject *crop_box;
  PyObject *scale_pixel_box;
};

/* "src/pyxpdf/document.pxi":155
 *         return self.doc.getCatalog()
 * 
 *     cdef display_pages(self, OutputDev* out, int first, int end,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_display_pages {
  int __pyx_n;
  double hDPI;
  double vDPI;
  int rotate;
  GBool use_media_box;
  GBool crop;
  GBool printing;
};

/* "src/pyxpdf/document.pxi":342
 * 
 * 
 *     cpdef text_bytes(self, int start=0, int end=-1, TextControl control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract text from given page range.
 * 
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text_bytes {
  int __pyx_n;
  int start;
  int end;
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *control;
};

/* "src/pyxpdf/document.pxi":384
 *         return deref(out)
 * 
 *     cpdef text(self, start=0, end=-1, control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract UTF-8 decoded text from given page range.
 * 
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text {
  int __pyx_n;
  PyObject *start;
  PyObject *end;
  PyObject *control;
};

/* "src/pyxpdf/document.pxi":522
 * 
 * 
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display_slice {
  int __pyx_n;
  double hDPI;
  double vDPI;
  int rotate;
  GBool use_media_box;
  GBool crop;
  GBool printing;
};

/* "src/pyxpdf/document.pxi":529
 *                                 x1, y1, hgt, wdt, printing)
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,             # <<<<<<<<<<<<<<
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display {
  int __pyx_n;
  double hDPI;
  double vDPI;
  int rotate;
  GBool use_media_box;
  GBool crop;
  GBool printing;
};

/* "src/pyxpdf/document.pxi":560
 *         return None
 * 
 *     cdef _find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,             # <<<<<<<<<<<<<<
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_4Page__find_text {
  int __pyx_n;
  PyObject *search_box;
  PyObject *start_at_top;
  PyObject *stop_at_bottom;
  PyObject *start_at_last;
  PyObject *stop_at_last;
  PyObject *case_sensitive;
  PyObject *backward;
  PyObject *wholeword;
  PyObject *rotation;
};

/* "src/pyxpdf/pdferror.pxi":38
 * 
 * 
 * cdef class PDFError(Exception):             # <<<<<<<<<<<<<<
 *     """Main exception base class for pyxpdf.  All other exceptions inherit from
 *     this one.
 */
struct __pyx_obj_6pyxpdf_4xpdf_PDFError {
  PyBaseExceptionObject __pyx_base;
};


/* "src/pyxpdf/pdferror.pxi":46
 * 
 * 
 * cdef class XPDFError(PDFError):             # <<<<<<<<<<<<<<
 *     """Base exception class for all ``xpdf`` errors.
 *     """
 */
struct __pyx_obj_6pyxpdf_4xpdf_XPDFError {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFError __pyx_base;
};


/* "src/pyxpdf/pdferror.pxi":59
 *             super().__init__(default_msg)
 * 
 * cdef class PDFSyntaxError(XPDFError):             # <<<<<<<<<<<<<<
 *     """Problem in parsing PDF file.
 *     """
 */
struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError {
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFError __pyx_base;
};


/* "src/pyxpdf/pdferror.pxi":64
 *     pass
 * 
 * cdef class XPDFConfigError(XPDFError):             # <<<<<<<<<<<<<<
 *     """Wrong or unsupported ``xpdf`` configuration setting.
 *     """
 */
struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError {
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFError __pyx_base;
};


/* "src/pyxpdf/pdferror.pxi":69
 *     pass
 * 
 * cdef class PDFIOError(XPDFError):             # <<<<<<<<<<<<<<
 *     """Error r/w file
 *     """
 */
struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError {
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFError __pyx_base;
};


/* "src/pyxpdf/pdferror.pxi":74
 *     pass
 * 
 * cdef class PDFPermissionError(XPDFError):             # <<<<<<<<<<<<<<
 *     """PDF does not have required permissions or is encrypted.
 *     """
 */
struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError {
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFError __pyx_base;
};


/* "src/pyxpdf/pdferror.pxi":79
 *     pass
 * 
 * cdef class XPDFInternalError(XPDFError):             # <<<<<<<<<<<<<<
 *     """``xpdf`` inernal errors.
 *     """
 */
struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError {
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFError __pyx_base;
};


/* "src/pyxpdf/pdferror.pxi":84
 *     pass
 * 
 * cdef class XPDFNotInplementedError(XPDFError):             # <<<<<<<<<<<<<<
 *     """NotImplemented in ``xpdf`` sources
 *     """
 */
struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError {
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFError __pyx_base;
};


/* "src/pyxpdf/globalconfig.pxi":11
 * # `_GlobalParamsConfig` class will lead to double free
 * # or corruption error.
 * cdef class _GlobalParamsConfig:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object cfg_path
 */
struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_vtab;
  PyObject *cfg_path;
  GlobalParams *_global;
  PyObject *__doc__;
};


/* "src/pyxpdf/pdfoutput.pxi":3
 * 
 * 
 * cdef class PDFOutputDevice:             # <<<<<<<<<<<<<<
 *     """Generic PDF Output Device
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice {
  PyObject_HEAD
};


/* "src/pyxpdf/textoutput.pxi":6
 * 
 * 
 * cdef class TextControl:             # <<<<<<<<<<<<<<
 *     """Parameters for Text extraction and layout analysis
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_TextControl {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextControl *__pyx_vtab;
  TextOutputControl _c_control;
};


/* "src/pyxpdf/textoutput.pxi":144
 * 
 * 
 * cdef class TextOutput(PDFOutputDevice):             # <<<<<<<<<<<<<<
 *     """Text extract/analysis PDF Output device
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_TextOutput {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice __pyx_base;
  struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextOutput *__pyx_vtab;
  std::unique_ptr<TextOutputDev>  _c_textdev;
  std::unique_ptr<std::string>  _out_str;
  struct __pyx_obj_6pyxpdf_4xpdf_Document *doc;
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *control;
  PyObject *_cache_texts;
  std::vector<std::unique_ptr<TextPage> >  _c_text_pages;
};


/* "src/pyxpdf/imageoutput.pxi":217
 * 
 * 
 * cdef class RawImageControl:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl {
  PyObject_HEAD
};


/* "src/pyxpdf/imageoutput.pxi":221
 * 
 * # adapted from poppler's pdftoppm
 * cdef class RawImageOutput(PDFOutputDevice):             # <<<<<<<<<<<<<<
 *     """Render PDF page as `Image`.
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice __pyx_base;
  struct __pyx_vtabstruct_6pyxpdf_4xpdf_RawImageOutput *__pyx_vtab;
  std::unique_ptr<SplashOutputDev>  _c_splash_dev;
  int doc_started;
  int use_cropbox;
  int scale_before_rotation;
  double resolution_y;
  double resolution_x;
  PyObject *mode;
  struct __pyx_obj_6pyxpdf_4xpdf_Document *doc;
};


/* "src/pyxpdf/imageoutput.pxi":503
 * }
 * 
 * cdef class PDFImage:             # <<<<<<<<<<<<<<
 *     cdef:
 *         readonly tuple bbox
 */
struct __pyx_obj_6pyxpdf_4xpdf_PDFImage {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImage *__pyx_vtab;
  PyObject *bbox;
  int page_index;
  int interpolate;
  int is_inline;
  double hDPI;
  double vDPI;
  PyObject *colorspace;
  PyObject *image_type;
  PyObject *compression;
  PyObject *image;
};


/* "src/pyxpdf/imageoutput.pxi":564
 * 
 * 
 * cdef class PDFImageOutput:             # <<<<<<<<<<<<<<
 *     """Extract the images from PDF Document
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImageOutput *__pyx_vtab;
  struct __pyx_obj_6pyxpdf_4xpdf_Document *doc;
};


/* "src/pyxpdf/document.pxi":17
 * 
 * 
 * cdef class Document:             # <<<<<<<<<<<<<<
 *     """This class represents a PDF Document.
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_Document {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *__pyx_vtab;
  PDFDoc *doc;
  GString *ownerpass;
  GString *userpass;
  PyObject *doc_data;
  PyObject *_pages_cache;
};


/* "src/pyxpdf/document.pxi":425
 * 
 * 
 * cdef class DocumentPageIterator:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Document doc
 */
struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator {
  PyObject_HEAD
  struct __pyx_obj_6pyxpdf_4xpdf_Document *doc;
  int index;
};


/* "src/pyxpdf/document.pxi":445
 * 
 * 
 * cdef class Page:             # <<<<<<<<<<<<<<
 *     """Represents a PDF page
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_Page {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *__pyx_vtab;
  Page *page;
  std::unique_ptr<TextPage>  textpage;
  int index;
  PyObject *label;
  struct __pyx_obj_6pyxpdf_4xpdf_Document *doc;
};


/* "src/pyxpdf/document.pxi":831
 * 
 * 
 * cdef class page_iterator:             # <<<<<<<<<<<<<<
 *     """Iterate over PDF output devices by page.
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_page_iterator {
  PyObject_HEAD
  PyObject *output;
  int index;
  PyObject *kwargs;
};


/* "src/pyxpdf/document.pxi":713
 * 
 * 
 *     def find_all_text(self, text, search_box=None, case_sensitive=False, wholeword=False,             # <<<<<<<<<<<<<<
 *                       rotation=0):
 *         """Find the `text` and get all the matches
 */
struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text {
  PyObject_HEAD
  PyObject *__pyx_v_case_sensitive;
  PyObject *__pyx_v_res;
  PyObject *__pyx_v_rotation;
  PyObject *__pyx_v_search_box;
  struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self;
  PyObject *__pyx_v_text;
  PyObject *__pyx_v_wholeword;
};



/* "src/pyxpdf/globalconfig.pxi":11
 * # `_GlobalParamsConfig` class will lead to double free
 * # or corruption error.
 * cdef class _GlobalParamsConfig:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object cfg_path
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf__GlobalParamsConfig {
  PyObject *(*_set_defaults)(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *);
  PyObject *(*_get_default_xpdfrc)(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_vtabptr_6pyxpdf_4xpdf__GlobalParamsConfig;


/* "src/pyxpdf/textoutput.pxi":6
 * 
 * 
 * cdef class TextControl:             # <<<<<<<<<<<<<<
 *     """Parameters for Text extraction and layout analysis
 * 
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextControl {
  TextOutputControl *(*get_c_control)(struct __pyx_obj_6pyxpdf_4xpdf_TextControl *);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextControl *__pyx_vtabptr_6pyxpdf_4xpdf_TextControl;


/* "src/pyxpdf/textoutput.pxi":144
 * 
 * 
 * cdef class TextOutput(PDFOutputDevice):             # <<<<<<<<<<<<<<
 *     """Text extract/analysis PDF Output device
 * 
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextOutput {
  PyObject *(*_get_bytes)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, int);
  TextPage *(*_get_TextPage)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, struct __pyx_opt_args_6pyxpdf_4xpdf_10TextOutput__get_TextPage *__pyx_optional_args);
  void (*_init_cache)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *);
  PyObject *(*get_bytes)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, int, int __pyx_skip_dispatch);
  PyObject *(*get)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, int, int __pyx_skip_dispatch);
  PyObject *(*get_all)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextOutput *__pyx_vtabptr_6pyxpdf_4xpdf_TextOutput;


/* "src/pyxpdf/imageoutput.pxi":221
 * 
 * # adapted from poppler's pdftoppm
 * cdef class RawImageOutput(PDFOutputDevice):             # <<<<<<<<<<<<<<
 *     """Render PDF page as `Image`.
 * 
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf_RawImageOutput {
  int (*_init_SplashOutputDev)(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *, PyObject *, int, SplashColorPtr, GBool, GBool);
  SplashBitmap *(*_get_SplashBitmap)(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *, int, int, int, int, int, double, double, double, double);
  SplashBitmap *(*_get_normalize_SplashBitmap)(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *, int, int, int, int, int, double, double);
  PyObject *(*get)(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_14RawImageOutput_get *__pyx_optional_args);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_RawImageOutput *__pyx_vtabptr_6pyxpdf_4xpdf_RawImageOutput;


/* "src/pyxpdf/imageoutput.pxi":503
 * }
 * 
 * cdef class PDFImage:             # <<<<<<<<<<<<<<
 *     cdef:
 *         readonly tuple bbox
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImage {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *(*from_ptr)(PDFBitmapImage *);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImage *__pyx_vtabptr_6pyxpdf_4xpdf_PDFImage;


/* "src/pyxpdf/imageoutput.pxi":564
 * 
 * 
 * cdef class PDFImageOutput:             # <<<<<<<<<<<<<<
 *     """Extract the images from PDF Document
 * 
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImageOutput {
  int (*_get_PDFBitmapImages)(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *, PyObject *, std::vector<PDFBitmapImage>  *);
  PyObject *(*_get_images)(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *, PyObject *);
  PyObject *(*get)(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImageOutput *__pyx_vtabptr_6pyxpdf_4xpdf_PDFImageOutput;


/* "src/pyxpdf/document.pxi":17
 * 
 * 
 * cdef class Document:             # <<<<<<<<<<<<<<
 *     """This class represents a PDF Document.
 * 
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document {
  Catalog *(*get_catalog)(struct __pyx_obj_6pyxpdf_4xpdf_Document *);
  PyObject *(*display_pages)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, OutputDev *, int, int, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_display_pages *__pyx_optional_args);
  PyObject *(*get_info_dict)(struct __pyx_obj_6pyxpdf_4xpdf_Document *);
  PyObject *(*get_metadata)(struct __pyx_obj_6pyxpdf_4xpdf_Document *);
  PyObject *(*_load_from_file)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, GString *);
  PyObject *(*_load_from_char_array)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, char *, int);
  PyObject *(*check)(struct __pyx_obj_6pyxpdf_4xpdf_Document *);
  int (*label_to_index)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, PyObject *);
  PyObject *(*get_page)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, int);
  PyObject *(*text_bytes)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text_bytes *__pyx_optional_args);
  PyObject *(*text)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text *__pyx_optional_args);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *__pyx_vtabptr_6pyxpdf_4xpdf_Document;


/* "src/pyxpdf/document.pxi":445
 * 
 * 
 * cdef class Page:             # <<<<<<<<<<<<<<
 *     """Represents a PDF page
 * 
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page {
  PyObject *(*display_slice)(struct __pyx_obj_6pyxpdf_4xpdf_Page *, OutputDev *, int, int, int, int, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display_slice *__pyx_optional_args);
  PyObject *(*display)(struct __pyx_obj_6pyxpdf_4xpdf_Page *, OutputDev *, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display *__pyx_optional_args);
  PyObject *(*_init_TextPage)(struct __pyx_obj_6pyxpdf_4xpdf_Page *, int);
  PyObject *(*get_label)(struct __pyx_obj_6pyxpdf_4xpdf_Page *);
  PyObject *(*_find_text)(struct __pyx_obj_6pyxpdf_4xpdf_Page *, PyObject *, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page__find_text *__pyx_optional_args);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *__pyx_vtabptr_6pyxpdf_4xpdf_Page;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObject_Unicode.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))
#else
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Unicode(obj))
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* SetItemIntByteArray.proto */
#define __Pyx_SetItemInt_ByteArray(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_ByteArray_Fast(o, (Py_ssize_t)i, v, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "bytearray index out of range"), -1))
static CYTHON_INLINE int __Pyx_SetItemInt_ByteArray_Fast(PyObject* string, Py_ssize_t i, unsigned char v,
                                                         int wraparound, int boundscheck);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   ((obj)->ob_type->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* RegisterModuleCleanup.proto */
static void __pyx_module_cleanup(PyObject *self);
#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
static int __Pyx_RegisterCleanup(void);
#else
#define __Pyx_RegisterCleanup() (0)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SplashColorMode(SplashColorMode value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_GfxColorSpaceMode(GfxColorSpaceMode value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_StreamKind(StreamKind value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Unicode(Unicode value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE Guchar __Pyx_PyInt_As_Guchar(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE SplashColorMode __Pyx_PyInt_As_SplashColorMode(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_6pyxpdf_4xpdf_19_GlobalParamsConfig__set_defaults(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_19_GlobalParamsConfig__get_default_xpdfrc(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto*/
static TextOutputControl *__pyx_f_6pyxpdf_4xpdf_11TextControl_get_c_control(struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_10TextOutput__get_bytes(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no); /* proto*/
static TextPage *__pyx_f_6pyxpdf_4xpdf_10TextOutput__get_TextPage(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, struct __pyx_opt_args_6pyxpdf_4xpdf_10TextOutput__get_TextPage *__pyx_optional_args); /* proto*/
static void __pyx_f_6pyxpdf_4xpdf_10TextOutput__init_cache(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_10TextOutput_get_bytes(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_10TextOutput_get(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_10TextOutput_get_all(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6pyxpdf_4xpdf_14RawImageOutput__init_SplashOutputDev(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_mode, int __pyx_v_row_pad, SplashColorPtr __pyx_v_paper_color, GBool __pyx_v_bitmap_topdown, GBool __pyx_v_anti_alias); /* proto*/
static SplashBitmap *__pyx_f_6pyxpdf_4xpdf_14RawImageOutput__get_SplashBitmap(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_page_h, double __pyx_v_page_w, double __pyx_v_res_x, double __pyx_v_res_y); /* proto*/
static SplashBitmap *__pyx_f_6pyxpdf_4xpdf_14RawImageOutput__get_normalize_SplashBitmap(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_v_crop_x, int __pyx_v_crop_y, int __pyx_v_crop_h, int __pyx_v_crop_w, double __pyx_v_scale_x, double __pyx_v_scale_y); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_14RawImageOutput_get(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_14RawImageOutput_get *__pyx_optional_args); /* proto*/
static struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_f_6pyxpdf_4xpdf_8PDFImage_from_ptr(PDFBitmapImage *__pyx_v_c_img); /* proto*/
static int __pyx_f_6pyxpdf_4xpdf_14PDFImageOutput__get_PDFBitmapImages(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, PyObject *__pyx_v_page_no, std::vector<PDFBitmapImage>  *__pyx_v_img_vec); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_14PDFImageOutput__get_images(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, PyObject *__pyx_v_page_no); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_14PDFImageOutput_get(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, PyObject *__pyx_v_page_no, int __pyx_skip_dispatch); /* proto*/
static Catalog *__pyx_f_6pyxpdf_4xpdf_8Document_get_catalog(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_display_pages(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, OutputDev *__pyx_v_out, int __pyx_v_first, int __pyx_v_end, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_display_pages *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_get_info_dict(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_get_metadata(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document__load_from_file(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, GString *__pyx_v_pdf); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document__load_from_char_array(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, char *__pyx_v_pdf, int __pyx_v_data_length); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_check(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto*/
static int __pyx_f_6pyxpdf_4xpdf_8Document_label_to_index(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, PyObject *__pyx_v_label); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_get_page(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, int __pyx_v_idx); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_text_bytes(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text_bytes *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_text(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page_display_slice(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, OutputDev *__pyx_v_out, int __pyx_v_x1, int __pyx_v_y1, int __pyx_v_hgt, int __pyx_v_wdt, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display_slice *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page_display(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, OutputDev *__pyx_v_out, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page__init_TextPage(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, int __pyx_v_rotation); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page_get_label(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page__find_text(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_text, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page__find_text *__pyx_optional_args); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'pyxpdf.includes.native' */

/* Module declarations from 'pyxpdf.includes.xpdf_types' */

/* Module declarations from 'pyxpdf.includes.CharTypes' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'pyxpdf.includes.Stream' */

/* Module declarations from 'pyxpdf.includes.XRef' */

/* Module declarations from 'pyxpdf.includes.Array' */

/* Module declarations from 'pyxpdf.includes.Object' */

/* Module declarations from 'pyxpdf.includes.Dict' */

/* Module declarations from 'pyxpdf.includes.Function' */

/* Module declarations from 'pyxpdf.includes.Link' */

/* Module declarations from 'pyxpdf.includes.TextString' */

/* Module declarations from 'pyxpdf.includes.Form' */

/* Module declarations from 'pyxpdf.includes.Catalog' */

/* Module declarations from 'pyxpdf.includes.PDFCore' */

/* Module declarations from 'pyxpdf.includes.Outline' */

/* Module declarations from 'pyxpdf.includes.OptionalContent' */

/* Module declarations from 'pyxpdf.includes.PDFDoc' */

/* Module declarations from 'pyxpdf.includes.Annot' */

/* Module declarations from 'pyxpdf.includes.CharCodeToUnicode' */

/* Module declarations from 'pyxpdf.includes.FoFi' */

/* Module declarations from 'pyxpdf.includes.GfxFont' */

/* Module declarations from 'pyxpdf.includes.GfxState' */

/* Module declarations from 'pyxpdf.includes.Gfx' */

/* Module declarations from 'pyxpdf.includes.OutputDev' */

/* Module declarations from 'pyxpdf.includes.Page' */

/* Module declarations from 'pyxpdf.includes.xpdf_error' */

/* Module declarations from 'pyxpdf.includes.UnicodeMap' */

/* Module declarations from 'pyxpdf.includes.UnicodeRemapping' */

/* Module declarations from 'pyxpdf.includes.CMap' */

/* Module declarations from 'pyxpdf.includes.GlobalParams' */

/* Module declarations from 'pyxpdf.includes.TextOutputDev' */

/* Module declarations from 'pyxpdf.includes.splash.SplashTypes' */

/* Module declarations from 'pyxpdf.includes.splash.SplashBitmap' */

/* Module declarations from 'pyxpdf.includes.SplashOutputDev' */

/* Module declarations from 'pyxpdf.includes.BitmapOutputDev' */

/* Module declarations from 'pyxpdf.xpdf' */
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_PDFError = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_XPDFError = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_PDFSyntaxError = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_PDFIOError = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_XPDFInternalError = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_XPDFNotInplementedError = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_TextControl = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_TextOutput = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_RawImageControl = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_RawImageOutput = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_PDFImage = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_PDFImageOutput = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_Document = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_DocumentPageIterator = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_Page = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_page_iterator = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text = 0;
static PyObject *__pyx_v_6pyxpdf_4xpdf_optional_deps = 0;
static PyObject *__pyx_v_6pyxpdf_4xpdf_available_deps = 0;
static PyObject *__pyx_v_6pyxpdf_4xpdf_IMAGE_MODES = 0;
static PyObject *__pyx_v_6pyxpdf_4xpdf_GFX_COLOR_SPACE_NAMES = 0;
static PyObject *__pyx_v_6pyxpdf_4xpdf_IMAGE_STREAM_TYPES = 0;
static int __pyx_f_6pyxpdf_4xpdf_load_deps(void); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf__chars(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf__utf32_bytes(PyObject *); /*proto*/
static CYTHON_INLINE GString *__pyx_f_6pyxpdf_4xpdf_to_GString(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_GString_to_unicode(GString *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_GBool_to_bool(GBool); /*proto*/
static CYTHON_INLINE GBool __pyx_f_6pyxpdf_4xpdf_to_GBool(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(PDFRectangle *); /*proto*/
static int __pyx_f_6pyxpdf_4xpdf_utf32_to_Unicode_vector(PyObject *, std::vector<Unicode>  &); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_Dict_to_pydict(Dict *, struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict *__pyx_optional_args); /*proto*/
static TextString *__pyx_f_6pyxpdf_4xpdf_to_TextString(PyObject *); /*proto*/
static void __pyx_f_6pyxpdf_4xpdf_append_to_cpp_string(void *, char const *, int); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_pdftotext_raw(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_1bpc_1comp(SplashBitmap *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_1comp(SplashBitmap *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_1comp_with_alpha(SplashBitmap *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_4comp(SplashBitmap *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_3comp(SplashBitmap *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_3comp_with_alpha(SplashBitmap *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_buffer(SplashBitmap *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_pillow_image_from_buffer(PyObject *, int, int, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFSyntaxError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFConfigError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFIOError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFPermissionError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFInternalError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFNotInplementedError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFOutputDevice__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_RawImageControl__set_state(struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFImage__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_DocumentPageIterator__set_state(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *, PyObject *); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_page_iterator__set_state(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "pyxpdf.xpdf"
extern int __pyx_module_is_main_pyxpdf__xpdf;
int __pyx_module_is_main_pyxpdf__xpdf = 0;

/* Implementation of 'pyxpdf.xpdf' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_StopIteration;
static const char __pyx_k_[] = ".";
static const char __pyx_k_1[] = "1";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_LA[] = "LA";
static const char __pyx_k__4[] = "";
static const char __pyx_k_BGR[] = "BGR";
static const char __pyx_k_RGB[] = "RGB";
static const char __pyx_k__44[] = "]>";
static const char __pyx_k__52[] = "'";
static const char __pyx_k__65[] = ">";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_dir[] = "dir";
static const char __pyx_k_doc[] = "doc";
static const char __pyx_k_dos[] = "dos";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_icc[] = "icc";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_jpx[] = "jpx";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_lab[] = "lab";
static const char __pyx_k_lzw[] = "lzw";
static const char __pyx_k_mac[] = "mac";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_pdf[] = "pdf";
static const char __pyx_k_raw[] = "raw";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_rgb[] = "rgb";
static const char __pyx_k_rle[] = "rle";
static const char __pyx_k_sep[] = "sep";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_top[] = "top";
static const char __pyx_k_BGRA[] = "BGRA";
static const char __pyx_k_CMYK[] = "CMYK";
static const char __pyx_k_Page[] = "Page";
static const char __pyx_k_RGBA[] = "RGBA";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_bbox[] = " bbox=";
static const char __pyx_k_cmyk[] = "cmyk";
static const char __pyx_k_devn[] = "devn";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_gray[] = "gray";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_jpeg[] = "jpeg";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_unix[] = "unix";
static const char __pyx_k_util[] = "util";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_ccitt[] = "ccitt";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_doc_2[] = "__doc__";
static const char __pyx_k_flate[] = "flate";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_found[] = " found.";
static const char __pyx_k_image[] = "image";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_jbig2[] = "jbig2";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_pages[] = "pages";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_reset[] = "reset";
static const char __pyx_k_smask[] = "smask";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_table[] = "table";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_Config[] = "Config";
static const char __pyx_k_Stream[] = "Stream";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_ignore[] = "ignore";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_layout[] = "layout";
static const char __pyx_k_loader[] = "loader";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_simple[] = "simple";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_control[] = "control";
static const char __pyx_k_get_all[] = "get_all";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_modules[] = "modules";
static const char __pyx_k_page_no[] = "page_no";
static const char __pyx_k_reading[] = "reading";
static const char __pyx_k_stencil[] = "stencil";
static const char __pyx_k_unknown[] = "unknown";
static const char __pyx_k_Document[] = "Document";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_PDFError[] = "PDFError";
static const char __pyx_k_PDFImage[] = "PDFImage";
static const char __pyx_k_cfg_path[] = "cfg_path";
static const char __pyx_k_crop_box[] = "crop_box";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_pdf_file[] = "pdf_file";
static const char __pyx_k_physical[] = "physical";
static const char __pyx_k_previous[] = "previous";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_rotation[] = "rotation";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_text_dev[] = "text_dev";
static const char __pyx_k_userpass[] = "userpass";
static const char __pyx_k_PIL_Image[] = "PIL.Image";
static const char __pyx_k_Page_text[] = "Page.text";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_XPDFError[] = "XPDFError";
static const char __pyx_k_char_name[] = "char_name";
static const char __pyx_k_clip_text[] = "clip_text";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_find_spec[] = "find_spec";
static const char __pyx_k_find_text[] = "find_text";
static const char __pyx_k_font_name[] = "font_name";
static const char __pyx_k_get_bytes[] = "get_bytes";
static const char __pyx_k_load_file[] = "load_file";
static const char __pyx_k_num_pages[] = "num_pages";
static const char __pyx_k_ownerpass[] = "ownerpass";
static const char __pyx_k_page_area[] = "page_area";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_wholeword[] = "wholeword";
static const char __pyx_k_Error_None[] = "Error None";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_PDFIOError[] = "PDFIOError";
static const char __pyx_k_Page_index[] = "<Page[{index}]>";
static const char __pyx_k_TextOutput[] = "<TextOutput[";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_anti_alias[] = "anti_alias";
static const char __pyx_k_colorspace[] = " colorspace=";
static const char __pyx_k_frombuffer[] = "frombuffer";
static const char __pyx_k_get_xpdfrc[] = "get_xpdfrc";
static const char __pyx_k_insert_bom[] = "insert_bom";
static const char __pyx_k_margin_top[] = "margin_top";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_resolution[] = "resolution";
static const char __pyx_k_search_box[] = "search_box";
static const char __pyx_k_text_bytes[] = "text_bytes";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_TextControl[] = "TextControl";
static const char __pyx_k_compression[] = " compression=";
static const char __pyx_k_enable_html[] = "enable_html";
static const char __pyx_k_exec_module[] = "exec_module";
static const char __pyx_k_fixed_pitch[] = "fixed_pitch";
static const char __pyx_k_lineprinter[] = "lineprinter";
static const char __pyx_k_margin_left[] = "margin_left";
static const char __pyx_k_paper_color[] = "paper_color";
static const char __pyx_k_pyxpdf_data[] = "pyxpdf_data";
static const char __pyx_k_pyxpdf_xpdf[] = "pyxpdf.xpdf";
static const char __pyx_k_use_cropbox[] = "use_cropbox";
static const char __pyx_k_TextOutput_2[] = "TextOutput";
static const char __pyx_k_margin_right[] = "margin_right";
static const char __pyx_k_no_composite[] = "no_composite";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_resolution_x[] = "resolution_x";
static const char __pyx_k_resolution_y[] = "resolution_y";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_text_control[] = "text_control";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_xmp_metadata[] = "xmp_metadata";
static const char __pyx_k_Document_info[] = "Document.info";
static const char __pyx_k_Document_text[] = "Document.text";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_add_font_file[] = "add_font_file";
static const char __pyx_k_find_all_text[] = "find_all_text";
static const char __pyx_k_margin_bottom[] = "margin_bottom";
static const char __pyx_k_page_iterator[] = "page_iterator";
static const char __pyx_k_pdftotext_raw[] = "pdftotext_raw";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Document_fname[] = "<Document [{fname}]>";
static const char __pyx_k_ErrorCodesDict[] = "ErrorCodesDict";
static const char __pyx_k_Error_Printing[] = "Error Printing";
static const char __pyx_k_Failed_to_load[] = "Failed to load ";
static const char __pyx_k_PDFImageOutput[] = "PDFImageOutput";
static const char __pyx_k_PDFSyntaxError[] = "PDFSyntaxError";
static const char __pyx_k_Page_find_text[] = "Page.find_text";
static const char __pyx_k_RawImageOutput[] = "RawImageOutput";
static const char __pyx_k_TextOutput_get[] = "TextOutput.get";
static const char __pyx_k_Unknown_layout[] = "Unknown layout - ";
static const char __pyx_k_case_sensitive[] = "case_sensitive";
static const char __pyx_k_importlib_util[] = "importlib.util";
static const char __pyx_k_PDFOutputDevice[] = "PDFOutputDevice";
static const char __pyx_k_Page_text_bytes[] = "Page.text_bytes";
static const char __pyx_k_RawImageControl[] = "RawImageControl";
static const char __pyx_k_XPDFConfigError[] = "XPDFConfigError";
static const char __pyx_k_discard_clipped[] = "discard_clipped";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_scale_pixel_box[] = "scale_pixel_box";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_ErrorCodeMapping[] = "ErrorCodeMapping";
static const char __pyx_k_Invalid_EOL_type[] = "Invalid EOL type - ";
static const char __pyx_k_Invalid_Key_type[] = "Invalid Key type";
static const char __pyx_k_discard_diagonal[] = "discard_diagonal";
static const char __pyx_k_is_not_supported[] = " is not supported.";
static const char __pyx_k_module_from_spec[] = "module_from_spec";
static const char __pyx_k_setup_base_fonts[] = "setup_base_fonts";
static const char __pyx_k_Error_Bad_Printer[] = "Error Bad Printer";
static const char __pyx_k_XPDFInternalError[] = "XPDFInternalError";
static const char __pyx_k_discard_invisible[] = "discard_invisible";
static const char __pyx_k_Error_Opening_file[] = "Error Opening file.";
static const char __pyx_k_GlobalParamsConfig[] = "_GlobalParamsConfig";
static const char __pyx_k_PDFImageOutput_get[] = "PDFImageOutput.get";
static const char __pyx_k_PDFPermissionError[] = "PDFPermissionError";
static const char __pyx_k_Page_find_all_text[] = "Page.find_all_text";
static const char __pyx_k_RawImageOutput_get[] = "RawImageOutput.get";
static const char __pyx_k_TextOutput_get_all[] = "TextOutput.get_all";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_fixed_line_spacing[] = "fixed_line_spacing";
static const char __pyx_k_Document_text_bytes[] = "Document.text_bytes";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_PDFOutputDevice_get[] = "PDFOutputDevice.get";
static const char __pyx_k_map_name_to_unicode[] = "map_name_to_unicode";
static const char __pyx_k_DocumentPageIterator[] = "DocumentPageIterator";
static const char __pyx_k_Document_fname_pages[] = "<Document [{fname}] [{pages}]>";
static const char __pyx_k_Error_File_Highlight[] = "Error File Highlight";
static const char __pyx_k_Error_while_r_w_File[] = "Error while r/w File";
static const char __pyx_k_Page___reduce_cython[] = "Page.__reduce_cython__";
static const char __pyx_k_TextOutput_get_bytes[] = "TextOutput.get_bytes";
static const char __pyx_k_Document_xmp_metadata[] = "Document.xmp_metadata";
static const char __pyx_k_Error_PDF_Permissions[] = "Error PDF Permissions";
static const char __pyx_k_pyx_unpickle_PDFError[] = "__pyx_unpickle_PDFError";
static const char __pyx_k_pyx_unpickle_PDFImage[] = "__pyx_unpickle_PDFImage";
static const char __pyx_k_scale_before_rotation[] = "scale_before_rotation";
static const char __pyx_k_Invalid_TexOutput_Mode[] = "Invalid TexOutput Mode";
static const char __pyx_k_Page___setstate_cython[] = "Page.__setstate_cython__";
static const char __pyx_k_Page_index_label_label[] = "<Page[{index}](label='{label}')>";
static const char __pyx_k_pyx_unpickle_XPDFError[] = "__pyx_unpickle_XPDFError";
static const char __pyx_k_XPDFNotInplementedError[] = "XPDFNotInplementedError";
static const char __pyx_k_pyx_unpickle_PDFIOError[] = "__pyx_unpickle_PDFIOError";
static const char __pyx_k_src_pyxpdf_document_pxi[] = "src/pyxpdf/document.pxi";
static const char __pyx_k_Document___reduce_cython[] = "Document.__reduce_cython__";
static const char __pyx_k_GlobalParamsConfig_reset[] = "_GlobalParamsConfig.reset";
static const char __pyx_k_PDFError___reduce_cython[] = "PDFError.__reduce_cython__";
static const char __pyx_k_PDFImage___reduce_cython[] = "PDFImage.__reduce_cython__";
static const char __pyx_k_src_pyxpdf_pdfoutput_pxi[] = "src/pyxpdf/pdfoutput.pxi";
static const char __pyx_k_src_pyxpdf_pdftotext_pxi[] = "src/pyxpdf/pdftotext.pxi";
static const char __pyx_k_Error_Bad_PDF_Page_Number[] = "Error Bad PDF Page Number";
static const char __pyx_k_Error_Parsing_PDF_Catalog[] = "Error Parsing PDF Catalog";
static const char __pyx_k_Error_decrypting_PDF_File[] = "Error decrypting PDF File";
static const char __pyx_k_XPDFError___reduce_cython[] = "XPDFError.__reduce_cython__";
static const char __pyx_k_pyxpdf_xpdf_PDFImage_type[] = "<pyxpdf.xpdf.PDFImage type=";
static const char __pyx_k_src_pyxpdf_textoutput_pxi[] = "src/pyxpdf/textoutput.pxi";
static const char __pyx_k_Document___setstate_cython[] = "Document.__setstate_cython__";
static const char __pyx_k_PDFError___setstate_cython[] = "PDFError.__setstate_cython__";
static const char __pyx_k_PDFIOError___reduce_cython[] = "PDFIOError.__reduce_cython__";
static const char __pyx_k_PDFImage___setstate_cython[] = "PDFImage.__setstate_cython__";
static const char __pyx_k_TextOutput___reduce_cython[] = "TextOutput.__reduce_cython__";
static const char __pyx_k_pyx_unpickle_page_iterator[] = "__pyx_unpickle_page_iterator";
static const char __pyx_k_src_pyxpdf_imageoutput_pxi[] = "src/pyxpdf/imageoutput.pxi";
static const char __pyx_k_TextControl___reduce_cython[] = "TextControl.__reduce_cython__";
static const char __pyx_k_XPDFError___setstate_cython[] = "XPDFError.__setstate_cython__";
static const char __pyx_k_color_mode_is_not_supported[] = "' color mode is not supported.";
static const char __pyx_k_pyx_unpickle_PDFSyntaxError[] = "__pyx_unpickle_PDFSyntaxError";
static const char __pyx_k_src_pyxpdf_globalconfig_pxi[] = "src/pyxpdf/globalconfig.pxi";
static const char __pyx_k_unexpected_value_of_imgType[] = "unexpected value of imgType";
static const char __pyx_k_GlobalParamsConfig_load_file[] = "_GlobalParamsConfig.load_file";
static const char __pyx_k_PDFIOError___setstate_cython[] = "PDFIOError.__setstate_cython__";
static const char __pyx_k_TextOutput___setstate_cython[] = "TextOutput.__setstate_cython__";
static const char __pyx_k_pyx_unpickle_PDFOutputDevice[] = "__pyx_unpickle_PDFOutputDevice";
static const char __pyx_k_pyx_unpickle_RawImageControl[] = "__pyx_unpickle_RawImageControl";
static const char __pyx_k_pyx_unpickle_XPDFConfigError[] = "__pyx_unpickle_XPDFConfigError";
static const char __pyx_k_TextControl___setstate_cython[] = "TextControl.__setstate_cython__";
static const char __pyx_k_page_iterator___reduce_cython[] = "page_iterator.__reduce_cython__";
static const char __pyx_k_GlobalParamsConfig_map_name_to[] = "_GlobalParamsConfig.map_name_to_unicode";
static const char __pyx_k_PDFImageOutput___reduce_cython[] = "PDFImageOutput.__reduce_cython__";
static const char __pyx_k_PDFSyntaxError___reduce_cython[] = "PDFSyntaxError.__reduce_cython__";
static const char __pyx_k_Pillow_is_not_installed_Please[] = "'Pillow' is not installed. Please install it.";
static const char __pyx_k_RawImageOutput___reduce_cython[] = "RawImageOutput.__reduce_cython__";
static const char __pyx_k_Uncaught_error_in_xpdf_library[] = "Uncaught error in xpdf library.";
static const char __pyx_k_paper_color_must_be_3_RGB_or_4[] = "'paper_color' must be 3 (RGB) or 4 (CMYK) value (0-255) list/tuple.";
static const char __pyx_k_pyx_unpickle_DocumentPageItera[] = "__pyx_unpickle_DocumentPageIterator";
static const char __pyx_k_pyx_unpickle_PDFPermissionErro[] = "__pyx_unpickle_PDFPermissionError";
static const char __pyx_k_pyx_unpickle_XPDFInternalError[] = "__pyx_unpickle_XPDFInternalError";
static const char __pyx_k_pyx_unpickle_XPDFNotInplemente[] = "__pyx_unpickle_XPDFNotInplementedError";
static const char __pyx_k_DocumentPageIterator___setstate[] = "DocumentPageIterator.__setstate_cython__";
static const char __pyx_k_GlobalParamsConfig___reduce_cyt[] = "_GlobalParamsConfig.__reduce_cython__";
static const char __pyx_k_GlobalParamsConfig___setstate_c[] = "_GlobalParamsConfig.__setstate_cython__";
static const char __pyx_k_GlobalParamsConfig_add_font_fil[] = "_GlobalParamsConfig.add_font_file";
static const char __pyx_k_GlobalParamsConfig_setup_base_f[] = "_GlobalParamsConfig.setup_base_fonts";
static const char __pyx_k_Global_XPDF_config_object_Metho[] = "\nGlobal XPDF config object\n\nMethods\n-------\nConfig.reset\n    Reset the global configuration to default.\n\nConfig.load_file(cfg_path)\n    load the settings from given `cfg_path` `xpdfrc`.\n\n\nAttributes\n----------\nConfig.text_encoding : str,\n    Sets the encoding to use for text output. 'UTF-8', 'Latin1', 'ASCII7',\n    'Symbol', 'ZapfDingbats', 'UCS-2' is pre defined. For more encodings\n    support install ``pyxpdf_data`` package (see :ref:`Installation`).\n    (default is `UTF-8`)\n\nConfig.text_eol : {'unix', 'dos', 'mac'}\n    Sets the end-of-line convention to use for text output. The\n    options are\n\n    unix = LF\n\n    dos  = CR+LF\n\n    mac  = CR\n\n    (default, platform dependent)\n\nConfig.text_page_breaks : bool\n    If set to `True`, text extraction will insert page breaks (form\n    feed characters) between pages.\n    (default is True)\n\nConfig.text_keep_tiny : bool\n    If set to `True`, text extraction will keep all characters. If\n    set to \"no\", text extraction will discard tiny (smaller than 3\n    point) characters after the first 50000 per page, avoiding\n    extremely slow run times for PDF files that use special fonts to\n    do shading or cross-hatching.\n    (default is `True`)\n\nConfig.enable_freetype : bool\n    Enables or disables use of FreeType (a TrueType/Type 1 font\n    rasterizer).\n    (default is `True`)\n\nConfig.anti_alias : bool\n    Enables or disables font anti-aliasing in the PDF Output Devices.\n    This option affects all font rasterizers.\n    (default is `True`)\n\nConfig.vector_anti_alias : bool\n    Enables or disables anti-aliasing of vector graphics in the PDF\n    rasterizer.\n    (default is 'True')\n\n";
static const char __pyx_k_PDFOutputDevice___reduce_cython[] = "PDFOutputDevice.__reduce_cython__";
static const char __pyx_k_RawImageControl___reduce_cython[] = "RawImageControl.__reduce_cython__";
static const char __pyx_k_XPDFConfigError___reduce_cython[] = "XPDFConfigError.__reduce_cython__";
static const char __pyx_k_page_iterator___setstate_cython[] = "page_iterator.__setstate_cython__";
static const char __pyx_k_Cannot_allocate_memory_for_TextO[] = "Cannot allocate memory for 'TextOutput' object.";
static const char __pyx_k_Cannot_allocate_memory_for_inter[] = "Cannot allocate memory for internal objects";
static const char __pyx_k_Cannot_create_GlobalParamsConfig[] = "Cannot create GlobalParamsConfig object.";
static const char __pyx_k_Copying_of_text_from_this_docume[] = "Copying of text from this document is not allowed.";
static const char __pyx_k_Could_not_convert_to_utf_32_byte[] = "Could not convert to utf-32 bytes.";
static const char __pyx_k_Could_not_find_page_with_label_k[] = "Could not find page with label '{key}'";
static const char __pyx_k_DocumentPageIterator___reduce_cy[] = "DocumentPageIterator.__reduce_cython__";
static const char __pyx_k_Error_Parsing_PDF_File_File_migh[] = "Error Parsing PDF File. File might be damaged";
static const char __pyx_k_Failed_to_create_TextOutputDev_w[] = "Failed to create TextOutputDev with given options";
static const char __pyx_k_Incompatible_checksums_s_vs_0x66[] = "Incompatible checksums (%s vs 0x66efdcb = (doc, index))";
static const char __pyx_k_Incompatible_checksums_s_vs_0x6b[] = "Incompatible checksums (%s vs 0x6bfc9fe = (index, kwargs, output))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb1[] = "Incompatible checksums (%s vs 0xb108fe2 = (bbox, colorspace, compression, hDPI, image, image_type, interpolate, is_inline, page_index, vDPI))";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_No_UnicodeMap_file_associated_wi[] = "No UnicodeMap file associated with ";
static const char __pyx_k_PDFImageOutput___setstate_cython[] = "PDFImageOutput.__setstate_cython__";
static const char __pyx_k_PDFOutputDevice___setstate_cytho[] = "PDFOutputDevice.__setstate_cython__";
static const char __pyx_k_PDFPermissionError___reduce_cyth[] = "PDFPermissionError.__reduce_cython__";
static const char __pyx_k_PDFPermissionError___setstate_cy[] = "PDFPermissionError.__setstate_cython__";
static const char __pyx_k_PDFSyntaxError___setstate_cython[] = "PDFSyntaxError.__setstate_cython__";
static const char __pyx_k_PDF_cannot_be_decrypted_please_p[] = "PDF cannot be decrypted please provide correct passwords.";
static const char __pyx_k_Page_index_must_be_positive_inte[] = "Page index must be positive integer less than total pages";
static const char __pyx_k_RawImageControl___setstate_cytho[] = "RawImageControl.__setstate_cython__";
static const char __pyx_k_RawImageOutput___setstate_cython[] = "RawImageOutput.__setstate_cython__";
static const char __pyx_k_The_index_idx_is_out_of_page_ran[] = "The index {idx} is out of page range";
static const char __pyx_k_XPDFConfigError___setstate_cytho[] = "XPDFConfigError.__setstate_cython__";
static const char __pyx_k_XPDFInternalError___reduce_cytho[] = "XPDFInternalError.__reduce_cython__";
static const char __pyx_k_XPDFInternalError___setstate_cyt[] = "XPDFInternalError.__setstate_cython__";
static const char __pyx_k_XPDFNotInplementedError___reduce[] = "XPDFNotInplementedError.__reduce_cython__";
static const char __pyx_k_XPDFNotInplementedError___setsta[] = "XPDFNotInplementedError.__setstate_cython__";
static const char __pyx_k_XPDF_objects_warpper_module_This[] = "XPDF objects warpper module\n\nThis module is the core of `pyxpdf`, it provides warppers for low-level XPDF\nobjects. It provides access to xpdf objects in a pythonic way.\n\n";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_pdf_argument_must_be_a_string_or[] = "pdf argument must be a string or a file-like object.";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_1;
static PyObject *__pyx_n_u_BGR;
static PyObject *__pyx_n_u_BGRA;
static PyObject *__pyx_n_u_CMYK;
static PyObject *__pyx_kp_u_Cannot_allocate_memory_for_TextO;
static PyObject *__pyx_kp_u_Cannot_allocate_memory_for_inter;
static PyObject *__pyx_kp_u_Cannot_create_GlobalParamsConfig;
static PyObject *__pyx_n_s_Config;
static PyObject *__pyx_n_u_Config;
static PyObject *__pyx_kp_u_Copying_of_text_from_this_docume;
static PyObject *__pyx_kp_u_Could_not_convert_to_utf_32_byte;
static PyObject *__pyx_kp_u_Could_not_find_page_with_label_k;
static PyObject *__pyx_n_s_Document;
static PyObject *__pyx_n_u_Document;
static PyObject *__pyx_n_s_DocumentPageIterator;
static PyObject *__pyx_n_s_DocumentPageIterator___reduce_cy;
static PyObject *__pyx_n_s_DocumentPageIterator___setstate;
static PyObject *__pyx_n_s_Document___reduce_cython;
static PyObject *__pyx_n_s_Document___setstate_cython;
static PyObject *__pyx_kp_u_Document_fname;
static PyObject *__pyx_kp_u_Document_fname_pages;
static PyObject *__pyx_n_s_Document_info;
static PyObject *__pyx_n_s_Document_text;
static PyObject *__pyx_n_s_Document_text_bytes;
static PyObject *__pyx_n_s_Document_xmp_metadata;
static PyObject *__pyx_n_s_ErrorCodeMapping;
static PyObject *__pyx_n_s_ErrorCodesDict;
static PyObject *__pyx_kp_u_Error_Bad_PDF_Page_Number;
static PyObject *__pyx_kp_u_Error_Bad_Printer;
static PyObject *__pyx_kp_u_Error_File_Highlight;
static PyObject *__pyx_kp_u_Error_None;
static PyObject *__pyx_kp_u_Error_Opening_file;
static PyObject *__pyx_kp_u_Error_PDF_Permissions;
static PyObject *__pyx_kp_u_Error_Parsing_PDF_Catalog;
static PyObject *__pyx_kp_u_Error_Parsing_PDF_File_File_migh;
static PyObject *__pyx_kp_u_Error_Printing;
static PyObject *__pyx_kp_u_Error_decrypting_PDF_File;
static PyObject *__pyx_kp_u_Error_while_r_w_File;
static PyObject *__pyx_kp_u_Failed_to_create_TextOutputDev_w;
static PyObject *__pyx_kp_u_Failed_to_load;
static PyObject *__pyx_n_s_GlobalParamsConfig;
static PyObject *__pyx_n_s_GlobalParamsConfig___reduce_cyt;
static PyObject *__pyx_n_s_GlobalParamsConfig___setstate_c;
static PyObject *__pyx_n_s_GlobalParamsConfig_add_font_fil;
static PyObject *__pyx_n_s_GlobalParamsConfig_load_file;
static PyObject *__pyx_n_s_GlobalParamsConfig_map_name_to;
static PyObject *__pyx_n_s_GlobalParamsConfig_reset;
static PyObject *__pyx_n_s_GlobalParamsConfig_setup_base_f;
static PyObject *__pyx_kp_u_Global_XPDF_config_object_Metho;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x66;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0x6b;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb1;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_u_Invalid_EOL_type;
static PyObject *__pyx_kp_u_Invalid_Key_type;
static PyObject *__pyx_kp_u_Invalid_TexOutput_Mode;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_u_L;
static PyObject *__pyx_n_u_LA;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_u_No_UnicodeMap_file_associated_wi;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_PDFError;
static PyObject *__pyx_n_u_PDFError;
static PyObject *__pyx_n_s_PDFError___reduce_cython;
static PyObject *__pyx_n_s_PDFError___setstate_cython;
static PyObject *__pyx_n_s_PDFIOError;
static PyObject *__pyx_n_u_PDFIOError;
static PyObject *__pyx_n_s_PDFIOError___reduce_cython;
static PyObject *__pyx_n_s_PDFIOError___setstate_cython;
static PyObject *__pyx_n_s_PDFImage;
static PyObject *__pyx_n_s_PDFImageOutput;
static PyObject *__pyx_n_u_PDFImageOutput;
static PyObject *__pyx_n_s_PDFImageOutput___reduce_cython;
static PyObject *__pyx_n_s_PDFImageOutput___setstate_cython;
static PyObject *__pyx_n_s_PDFImageOutput_get;
static PyObject *__pyx_n_s_PDFImage___reduce_cython;
static PyObject *__pyx_n_s_PDFImage___setstate_cython;
static PyObject *__pyx_n_s_PDFOutputDevice;
static PyObject *__pyx_n_u_PDFOutputDevice;
static PyObject *__pyx_n_s_PDFOutputDevice___reduce_cython;
static PyObject *__pyx_n_s_PDFOutputDevice___setstate_cytho;
static PyObject *__pyx_n_s_PDFOutputDevice_get;
static PyObject *__pyx_n_s_PDFPermissionError;
static PyObject *__pyx_n_u_PDFPermissionError;
static PyObject *__pyx_n_s_PDFPermissionError___reduce_cyth;
static PyObject *__pyx_n_s_PDFPermissionError___setstate_cy;
static PyObject *__pyx_n_s_PDFSyntaxError;
static PyObject *__pyx_n_u_PDFSyntaxError;
static PyObject *__pyx_n_s_PDFSyntaxError___reduce_cython;
static PyObject *__pyx_n_s_PDFSyntaxError___setstate_cython;
static PyObject *__pyx_kp_u_PDF_cannot_be_decrypted_please_p;
static PyObject *__pyx_kp_u_PIL_Image;
static PyObject *__pyx_n_s_Page;
static PyObject *__pyx_n_u_Page;
static PyObject *__pyx_n_s_Page___reduce_cython;
static PyObject *__pyx_n_s_Page___setstate_cython;
static PyObject *__pyx_n_s_Page_find_all_text;
static PyObject *__pyx_n_s_Page_find_text;
static PyObject *__pyx_kp_u_Page_index;
static PyObject *__pyx_kp_u_Page_index_label_label;
static PyObject *__pyx_kp_u_Page_index_must_be_positive_inte;
static PyObject *__pyx_n_s_Page_text;
static PyObject *__pyx_n_s_Page_text_bytes;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_u_Pillow_is_not_installed_Please;
static PyObject *__pyx_n_u_RGB;
static PyObject *__pyx_n_u_RGBA;
static PyObject *__pyx_n_s_RawImageControl;
static PyObject *__pyx_n_s_RawImageControl___reduce_cython;
static PyObject *__pyx_n_s_RawImageControl___setstate_cytho;
static PyObject *__pyx_n_s_RawImageOutput;
static PyObject *__pyx_n_u_RawImageOutput;
static PyObject *__pyx_n_s_RawImageOutput___reduce_cython;
static PyObject *__pyx_n_s_RawImageOutput___setstate_cython;
static PyObject *__pyx_n_s_RawImageOutput_get;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_u_Stream;
static PyObject *__pyx_n_s_TextControl;
static PyObject *__pyx_n_u_TextControl;
static PyObject *__pyx_n_s_TextControl___reduce_cython;
static PyObject *__pyx_n_s_TextControl___setstate_cython;
static PyObject *__pyx_kp_u_TextOutput;
static PyObject *__pyx_n_s_TextOutput_2;
static PyObject *__pyx_n_u_TextOutput_2;
static PyObject *__pyx_n_s_TextOutput___reduce_cython;
static PyObject *__pyx_n_s_TextOutput___setstate_cython;
static PyObject *__pyx_n_s_TextOutput_get;
static PyObject *__pyx_n_s_TextOutput_get_all;
static PyObject *__pyx_n_s_TextOutput_get_bytes;
static PyObject *__pyx_kp_u_The_index_idx_is_out_of_page_ran;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_UTF_8;
static PyObject *__pyx_kp_u_Uncaught_error_in_xpdf_library;
static PyObject *__pyx_kp_u_Unknown_layout;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_XPDFConfigError;
static PyObject *__pyx_n_u_XPDFConfigError;
static PyObject *__pyx_n_s_XPDFConfigError___reduce_cython;
static PyObject *__pyx_n_s_XPDFConfigError___setstate_cytho;
static PyObject *__pyx_n_s_XPDFError;
static PyObject *__pyx_n_u_XPDFError;
static PyObject *__pyx_n_s_XPDFError___reduce_cython;
static PyObject *__pyx_n_s_XPDFError___setstate_cython;
static PyObject *__pyx_n_s_XPDFInternalError;
static PyObject *__pyx_n_u_XPDFInternalError;
static PyObject *__pyx_n_s_XPDFInternalError___reduce_cytho;
static PyObject *__pyx_n_s_XPDFInternalError___setstate_cyt;
static PyObject *__pyx_n_s_XPDFNotInplementedError;
static PyObject *__pyx_n_u_XPDFNotInplementedError;
static PyObject *__pyx_n_s_XPDFNotInplementedError___reduce;
static PyObject *__pyx_n_s_XPDFNotInplementedError___setsta;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_kp_u__44;
static PyObject *__pyx_kp_u__52;
static PyObject *__pyx_kp_u__65;
static PyObject *__pyx_n_s_add_font_file;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_anti_alias;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_u_bbox;
static PyObject *__pyx_n_s_case_sensitive;
static PyObject *__pyx_n_u_ccitt;
static PyObject *__pyx_n_s_cfg_path;
static PyObject *__pyx_n_s_char_name;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_clip_text;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_u_cmyk;
static PyObject *__pyx_kp_u_color_mode_is_not_supported;
static PyObject *__pyx_kp_u_colorspace;
static PyObject *__pyx_kp_u_compression;
static PyObject *__pyx_n_s_control;
static PyObject *__pyx_n_s_crop_box;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_u_devn;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dict_2;
static PyObject *__pyx_n_s_dir;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_s_discard_clipped;
static PyObject *__pyx_n_s_discard_diagonal;
static PyObject *__pyx_n_s_discard_invisible;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_doc_2;
static PyObject *__pyx_n_u_dos;
static PyObject *__pyx_n_s_enable_html;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_n_s_exec_module;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_find_all_text;
static PyObject *__pyx_n_s_find_spec;
static PyObject *__pyx_n_s_find_text;
static PyObject *__pyx_n_s_fixed_line_spacing;
static PyObject *__pyx_n_s_fixed_pitch;
static PyObject *__pyx_n_u_flate;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_font_name;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_kp_u_found;
static PyObject *__pyx_n_s_frombuffer;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_all;
static PyObject *__pyx_n_s_get_bytes;
static PyObject *__pyx_n_s_get_xpdfrc;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_u_gray;
static PyObject *__pyx_n_u_icc;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_u_ignore;
static PyObject *__pyx_n_u_image;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_importlib_util;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_u_index;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_insert_bom;
static PyObject *__pyx_kp_u_is_not_supported;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_u_jbig2;
static PyObject *__pyx_n_u_jpeg;
static PyObject *__pyx_n_u_jpx;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_u_lab;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_layout;
static PyObject *__pyx_n_u_lineprinter;
static PyObject *__pyx_n_s_load_file;
static PyObject *__pyx_n_s_loader;
static PyObject *__pyx_n_u_lzw;
static PyObject *__pyx_n_u_mac;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map_name_to_unicode;
static PyObject *__pyx_n_s_margin_bottom;
static PyObject *__pyx_n_s_margin_left;
static PyObject *__pyx_n_s_margin_right;
static PyObject *__pyx_n_s_margin_top;
static PyObject *__pyx_n_u_mask;
static PyObject *__pyx_n_s_message;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_module_from_spec;
static PyObject *__pyx_n_s_modules;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_u_next;
static PyObject *__pyx_n_s_no_composite;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_num_pages;
static PyObject *__pyx_n_s_out;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_ownerpass;
static PyObject *__pyx_n_s_page_area;
static PyObject *__pyx_n_s_page_iterator;
static PyObject *__pyx_n_u_page_iterator;
static PyObject *__pyx_n_s_page_iterator___reduce_cython;
static PyObject *__pyx_n_s_page_iterator___setstate_cython;
static PyObject *__pyx_n_s_page_no;
static PyObject *__pyx_n_s_pages;
static PyObject *__pyx_n_s_paper_color;
static PyObject *__pyx_kp_u_paper_color_must_be_3_RGB_or_4;
static PyObject *__pyx_n_s_pdf;
static PyObject *__pyx_kp_u_pdf_argument_must_be_a_string_or;
static PyObject *__pyx_n_s_pdf_file;
static PyObject *__pyx_n_s_pdftotext_raw;
static PyObject *__pyx_n_u_pdftotext_raw;
static PyObject *__pyx_n_u_physical;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_u_previous;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_DocumentPageItera;
static PyObject *__pyx_n_s_pyx_unpickle_PDFError;
static PyObject *__pyx_n_s_pyx_unpickle_PDFIOError;
static PyObject *__pyx_n_s_pyx_unpickle_PDFImage;
static PyObject *__pyx_n_s_pyx_unpickle_PDFOutputDevice;
static PyObject *__pyx_n_s_pyx_unpickle_PDFPermissionErro;
static PyObject *__pyx_n_s_pyx_unpickle_PDFSyntaxError;
static PyObject *__pyx_n_s_pyx_unpickle_RawImageControl;
static PyObject *__pyx_n_s_pyx_unpickle_XPDFConfigError;
static PyObject *__pyx_n_s_pyx_unpickle_XPDFError;
static PyObject *__pyx_n_s_pyx_unpickle_XPDFInternalError;
static PyObject *__pyx_n_s_pyx_unpickle_XPDFNotInplemente;
static PyObject *__pyx_n_s_pyx_unpickle_page_iterator;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_pyxpdf_data;
static PyObject *__pyx_n_u_pyxpdf_data;
static PyObject *__pyx_n_s_pyxpdf_xpdf;
static PyObject *__pyx_kp_u_pyxpdf_xpdf_PDFImage_type;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_u_raw;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_u_read;
static PyObject *__pyx_n_u_reading;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_reset;
static PyObject *__pyx_n_s_resolution;
static PyObject *__pyx_n_s_resolution_x;
static PyObject *__pyx_n_s_resolution_y;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_u_rgb;
static PyObject *__pyx_n_u_rle;
static PyObject *__pyx_n_s_rotation;
static PyObject *__pyx_n_s_scale_before_rotation;
static PyObject *__pyx_n_s_scale_pixel_box;
static PyObject *__pyx_n_s_search_box;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_u_sep;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_setup_base_fonts;
static PyObject *__pyx_n_u_simple;
static PyObject *__pyx_n_u_smask;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_kp_s_src_pyxpdf_document_pxi;
static PyObject *__pyx_kp_s_src_pyxpdf_globalconfig_pxi;
static PyObject *__pyx_kp_s_src_pyxpdf_imageoutput_pxi;
static PyObject *__pyx_kp_s_src_pyxpdf_pdfoutput_pxi;
static PyObject *__pyx_kp_s_src_pyxpdf_pdftotext_pxi;
static PyObject *__pyx_kp_s_src_pyxpdf_textoutput_pxi;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_u_stencil;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_u_table;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_text_bytes;
static PyObject *__pyx_n_s_text_control;
static PyObject *__pyx_n_s_text_dev;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_u_top;
static PyObject *__pyx_kp_u_unexpected_value_of_imgType;
static PyObject *__pyx_n_u_unix;
static PyObject *__pyx_n_u_unknown;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_use_cropbox;
static PyObject *__pyx_n_s_use_setstate;
static PyObject *__pyx_n_s_userpass;
static PyObject *__pyx_n_s_util;
static PyObject *__pyx_n_s_wholeword;
static PyObject *__pyx_n_s_xmp_metadata;
static int __pyx_pf_6pyxpdf_4xpdf_8PDFError___init__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self, PyObject *__pyx_v_message); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFError_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFError_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_9XPDFError___init__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *__pyx_v_self, PyObject *__pyx_v_message); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_9XPDFError_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_9XPDFError_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFSyntaxError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFSyntaxError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_15XPDFConfigError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_15XPDFConfigError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10PDFIOError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10PDFIOError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18PDFPermissionError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18PDFPermissionError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_17XPDFInternalError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_17XPDFInternalError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_23XPDFNotInplementedError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_23XPDFNotInplementedError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_load_file(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_cfg_path); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_2reset(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_4__cinit__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static void __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_6__dealloc__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8setup_base_fonts(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_dir); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_10add_font_file(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_font_name, PyObject *__pyx_v_file); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_dir); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_12map_name_to_unicode(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_char_name); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, int __pyx_v_width); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, int __pyx_v_height); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_enable); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_enable); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_enable); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_encoding); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_eol); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_breaks); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_keep); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_print_cmd); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_quiet); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_21default_text_encoding___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc_____get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___4__del__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_pdftotext_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pdf_file, int __pyx_v_start, int __pyx_v_end, PyObject *__pyx_v_ownerpass, PyObject *__pyx_v_userpass, PyObject *__pyx_v_layout, double __pyx_v_fixed_pitch, double __pyx_v_fixed_line_spacing, PyObject *__pyx_v_discard_clipped, PyObject *__pyx_v_discard_diagonal, PyObject *__pyx_v_insert_bom, double __pyx_v_margin_left, double __pyx_v_margin_right, double __pyx_v_margin_top, double __pyx_v_margin_bottom); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_15PDFOutputDevice_get(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *__pyx_v_self, CYTHON_UNUSED int __pyx_v_page_no, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_15PDFOutputDevice_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_15PDFOutputDevice_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_11TextControl___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self, PyObject *__pyx_v_mode, double __pyx_v_fixed_pitch, double __pyx_v_fixed_line_spacing, PyObject *__pyx_v_enable_html, PyObject *__pyx_v_clip_text, PyObject *__pyx_v_discard_diagonal, PyObject *__pyx_v_discard_invisible, PyObject *__pyx_v_discard_clipped, PyObject *__pyx_v_insert_bom, double __pyx_v_margin_left, double __pyx_v_margin_right, double __pyx_v_margin_top, double __pyx_v_margin_bottom); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_11TextControl_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_11TextControl_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_10TextOutput___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc, struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control, PyObject *__pyx_v_kargs); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_2__repr__(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_4get_bytes(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_6get(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_8get_all(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_7control___get__(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_15RawImageControl___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_15RawImageControl_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc, PyObject *__pyx_v_mode, PyObject *__pyx_v_paper_color, double __pyx_v_resolution, double __pyx_v_resolution_x, double __pyx_v_resolution_y, PyObject *__pyx_v_anti_alias, PyObject *__pyx_v_no_composite, PyObject *__pyx_v_use_cropbox, PyObject *__pyx_v_scale_before_rotation); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_2get(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, int __pyx_v_page_no, PyObject *__pyx_v_crop_box, PyObject *__pyx_v_scale_pixel_box); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_4mode___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage___repr__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_4bbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_10page_index___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_11interpolate___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_9is_inline___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_4hDPI___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_4vDPI___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_10colorspace___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_10image_type___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_11compression___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_5image___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_2get(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, PyObject *__pyx_v_page_no); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_8Document___init__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pdf, CYTHON_UNUSED PyObject *__pyx_v_ownerpass, CYTHON_UNUSED PyObject *__pyx_v_userpass); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_8Document_2__cinit__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, PyObject *__pyx_v_pdf, PyObject *__pyx_v_ownerpass, PyObject *__pyx_v_userpass); /* proto */
static void __pyx_pf_6pyxpdf_4xpdf_8Document_4__dealloc__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_6__repr__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_8__str__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6pyxpdf_4xpdf_8Document_10__len__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_12__getitem__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_14__iter__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_8filename___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_15has_page_labels___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_9num_pages___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_11pdf_version___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_13is_linearized___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_12is_encrypted___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_11ok_to_print___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_12ok_to_change___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_10ok_to_copy___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_15ok_to_add_notes___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_16info(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_18xmp_metadata(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_20text_bytes(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, int __pyx_v_start, int __pyx_v_end, struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_22text(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyObject *__pyx_v_control); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator___init__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self, PyObject *__pyx_v_doc); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_2__iter__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_4__next__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_6__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_8__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_4Page___init__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_doc, CYTHON_UNUSED PyObject *__pyx_v_index); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_4Page_2__cinit__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_4__repr__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_8rotation___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_10is_cropped___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_12media_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_11media_width___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_11crop_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_10crop_width___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_8mediabox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_7cropbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_8bleedbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_7trimbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_6artbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_6find_text(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_text, PyObject *__pyx_v_search_box, PyObject *__pyx_v_direction, PyObject *__pyx_v_case_sensitive, PyObject *__pyx_v_wholeword, PyObject *__pyx_v_rotation); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_8find_all_text(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_text, PyObject *__pyx_v_search_box, PyObject *__pyx_v_case_sensitive, PyObject *__pyx_v_wholeword, CYTHON_UNUSED PyObject *__pyx_v_rotation); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_11text_bytes(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_page_area, struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_13text(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_page_area, PyObject *__pyx_v_control); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_5index___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_5label___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_15__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_17__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_13page_iterator___init__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self, PyObject *__pyx_v_output, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_13page_iterator_2__iter__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_13page_iterator_4__next__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_13page_iterator_6__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_13page_iterator_8__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_2__pyx_unpickle_PDFError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_4__pyx_unpickle_XPDFError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_6__pyx_unpickle_PDFSyntaxError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8__pyx_unpickle_XPDFConfigError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_10__pyx_unpickle_PDFIOError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_12__pyx_unpickle_PDFPermissionError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_14__pyx_unpickle_XPDFInternalError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_16__pyx_unpickle_XPDFNotInplementedError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18__pyx_unpickle_PDFOutputDevice(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_20__pyx_unpickle_RawImageControl(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_22__pyx_unpickle_PDFImage(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_24__pyx_unpickle_DocumentPageIterator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_26__pyx_unpickle_page_iterator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFSyntaxError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFConfigError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFIOError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFPermissionError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFInternalError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFNotInplementedError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf__GlobalParamsConfig(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFOutputDevice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_TextControl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_TextOutput(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_RawImageControl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_RawImageOutput(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFImage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFImageOutput(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_Document(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_DocumentPageIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_Page(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_page_iterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_255;
static PyObject *__pyx_int_107937227;
static PyObject *__pyx_int_113232382;
static PyObject *__pyx_int_185634786;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__5;
static GBool __pyx_k__75;
static GBool __pyx_k__76;
static GBool __pyx_k__77;
static GBool __pyx_k__91;
static GBool __pyx_k__92;
static GBool __pyx_k__93;
static GBool __pyx_k__94;
static GBool __pyx_k__95;
static GBool __pyx_k__96;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__183;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__185;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__187;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__98;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__100;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__106;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__119;
/* Late includes */

/* "pyxpdf/xpdf.pyx":49
 * cdef dict available_deps = dict()
 * 
 * cdef int load_deps() except -1:             # <<<<<<<<<<<<<<
 *     global available_deps
 *     global optional_deps
 */

static int __pyx_f_6pyxpdf_4xpdf_load_deps(void) {
  PyObject *__pyx_v_importlib = 0;
  PyObject *__pyx_v_sys = 0;
  int __pyx_v_i;
  PyObject *__pyx_v_dep = NULL;
  PyObject *__pyx_v_dep_packages = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_spec = NULL;
  PyObject *__pyx_v_module = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_deps", 0);
  __Pyx_TraceCall("load_deps", __pyx_f[0], 49, 0, __PYX_ERR(0, 49, __pyx_L1_error));

  /* "pyxpdf/xpdf.pyx":54
 * 
 *     cdef object importlib
 *     import importlib.util             # <<<<<<<<<<<<<<
 * 
 *     cdef object sys
 */
  __Pyx_TraceLine(54,0,__PYX_ERR(0, 54, __pyx_L1_error))
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_importlib_util, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_importlib = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyxpdf/xpdf.pyx":57
 * 
 *     cdef object sys
 *     import sys             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
  __Pyx_TraceLine(57,0,__PYX_ERR(0, 57, __pyx_L1_error))
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sys = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyxpdf/xpdf.pyx":61
 *     cdef:
 *         int i
 *     for dep in optional_deps:             # <<<<<<<<<<<<<<
 *         if dep in sys.modules:
 *             available_deps[dep] = sys.modules[dep]
 */
  __Pyx_TraceLine(61,0,__PYX_ERR(0, 61, __pyx_L1_error))
  if (unlikely(__pyx_v_6pyxpdf_4xpdf_optional_deps == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 61, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_6pyxpdf_4xpdf_optional_deps; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 61, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_dep, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyxpdf/xpdf.pyx":62
 *         int i
 *     for dep in optional_deps:
 *         if dep in sys.modules:             # <<<<<<<<<<<<<<
 *             available_deps[dep] = sys.modules[dep]
 *         else:
 */
    __Pyx_TraceLine(62,0,__PYX_ERR(0, 62, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sys, __pyx_n_s_modules); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_dep, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "pyxpdf/xpdf.pyx":63
 *     for dep in optional_deps:
 *         if dep in sys.modules:
 *             available_deps[dep] = sys.modules[dep]             # <<<<<<<<<<<<<<
 *         else:
 *             # load deps starting from parent package
 */
      __Pyx_TraceLine(63,0,__PYX_ERR(0, 63, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sys, __pyx_n_s_modules); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_dep); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(__pyx_v_6pyxpdf_4xpdf_available_deps == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 63, __pyx_L1_error)
      }
      if (unlikely(PyDict_SetItem(__pyx_v_6pyxpdf_4xpdf_available_deps, __pyx_v_dep, __pyx_t_6) < 0)) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pyxpdf/xpdf.pyx":62
 *         int i
 *     for dep in optional_deps:
 *         if dep in sys.modules:             # <<<<<<<<<<<<<<
 *             available_deps[dep] = sys.modules[dep]
 *         else:
 */
      goto __pyx_L5;
    }

    /* "pyxpdf/xpdf.pyx":67
 *             # load deps starting from parent package
 *             # to child.
 *             dep_packages = dep.split('.')             # <<<<<<<<<<<<<<
 *             for i in range(len(dep_packages)):
 *                 d = '.'.join(dep_packages[:i+1])
 */
    __Pyx_TraceLine(67,0,__PYX_ERR(0, 67, __pyx_L1_error))
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dep, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 67, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_kp_u_) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 67, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_dep_packages, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "pyxpdf/xpdf.pyx":68
 *             # to child.
 *             dep_packages = dep.split('.')
 *             for i in range(len(dep_packages)):             # <<<<<<<<<<<<<<
 *                 d = '.'.join(dep_packages[:i+1])
 *                 spec = importlib.util.find_spec(d)
 */
      __Pyx_TraceLine(68,0,__PYX_ERR(0, 68, __pyx_L1_error))
      __pyx_t_8 = PyObject_Length(__pyx_v_dep_packages); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 68, __pyx_L1_error)
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "pyxpdf/xpdf.pyx":69
 *             dep_packages = dep.split('.')
 *             for i in range(len(dep_packages)):
 *                 d = '.'.join(dep_packages[:i+1])             # <<<<<<<<<<<<<<
 *                 spec = importlib.util.find_spec(d)
 *                 if spec is not None:
 */
        __Pyx_TraceLine(69,0,__PYX_ERR(0, 69, __pyx_L1_error))
        __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_dep_packages, 0, (__pyx_v_i + 1), NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_3 = PyUnicode_Join(__pyx_kp_u_, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_v_d, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "pyxpdf/xpdf.pyx":70
 *             for i in range(len(dep_packages)):
 *                 d = '.'.join(dep_packages[:i+1])
 *                 spec = importlib.util.find_spec(d)             # <<<<<<<<<<<<<<
 *                 if spec is not None:
 *                     # import it
 */
        __Pyx_TraceLine(70,0,__PYX_ERR(0, 70, __pyx_L1_error))
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_importlib, __pyx_n_s_util); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 70, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_find_spec); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 70, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
          }
        }
        __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_d) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_d);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_spec, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "pyxpdf/xpdf.pyx":71
 *                 d = '.'.join(dep_packages[:i+1])
 *                 spec = importlib.util.find_spec(d)
 *                 if spec is not None:             # <<<<<<<<<<<<<<
 *                     # import it
 *                     module = importlib.util.module_from_spec(spec)
 */
        __Pyx_TraceLine(71,0,__PYX_ERR(0, 71, __pyx_L1_error))
        __pyx_t_5 = (__pyx_v_spec != Py_None);
        __pyx_t_4 = (__pyx_t_5 != 0);
        if (__pyx_t_4) {

          /* "pyxpdf/xpdf.pyx":73
 *                 if spec is not None:
 *                     # import it
 *                     module = importlib.util.module_from_spec(spec)             # <<<<<<<<<<<<<<
 *                     sys.modules[d] = module
 *                     spec.loader.exec_module(module)
 */
          __Pyx_TraceLine(73,0,__PYX_ERR(0, 73, __pyx_L1_error))
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_importlib, __pyx_n_s_util); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 73, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_module_from_spec); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 73, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_spec) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_spec);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF_SET(__pyx_v_module, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "pyxpdf/xpdf.pyx":74
 *                     # import it
 *                     module = importlib.util.module_from_spec(spec)
 *                     sys.modules[d] = module             # <<<<<<<<<<<<<<
 *                     spec.loader.exec_module(module)
 *                     available_deps[d] = module
 */
          __Pyx_TraceLine(74,0,__PYX_ERR(0, 74, __pyx_L1_error))
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sys, __pyx_n_s_modules); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(PyObject_SetItem(__pyx_t_3, __pyx_v_d, __pyx_v_module) < 0)) __PYX_ERR(0, 74, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "pyxpdf/xpdf.pyx":75
 *                     module = importlib.util.module_from_spec(spec)
 *                     sys.modules[d] = module
 *                     spec.loader.exec_module(module)             # <<<<<<<<<<<<<<
 *                     available_deps[d] = module
 *                 else:
 */
          __Pyx_TraceLine(75,0,__PYX_ERR(0, 75, __pyx_L1_error))
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_spec, __pyx_n_s_loader); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_exec_module); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 75, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_module) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_module);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "pyxpdf/xpdf.pyx":76
 *                     sys.modules[d] = module
 *                     spec.loader.exec_module(module)
 *                     available_deps[d] = module             # <<<<<<<<<<<<<<
 *                 else:
 *                     break
 */
          __Pyx_TraceLine(76,0,__PYX_ERR(0, 76, __pyx_L1_error))
          if (unlikely(__pyx_v_6pyxpdf_4xpdf_available_deps == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 76, __pyx_L1_error)
          }
          if (unlikely(PyDict_SetItem(__pyx_v_6pyxpdf_4xpdf_available_deps, __pyx_v_d, __pyx_v_module) < 0)) __PYX_ERR(0, 76, __pyx_L1_error)

          /* "pyxpdf/xpdf.pyx":71
 *                 d = '.'.join(dep_packages[:i+1])
 *                 spec = importlib.util.find_spec(d)
 *                 if spec is not None:             # <<<<<<<<<<<<<<
 *                     # import it
 *                     module = importlib.util.module_from_spec(spec)
 */
          goto __pyx_L8;
        }

        /* "pyxpdf/xpdf.pyx":78
 *                     available_deps[d] = module
 *                 else:
 *                     break             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
        __Pyx_TraceLine(78,0,__PYX_ERR(0, 78, __pyx_L1_error))
        /*else*/ {
          goto __pyx_L7_break;
        }
        __pyx_L8:;
      }
      __pyx_L7_break:;
    }
    __pyx_L5:;

    /* "pyxpdf/xpdf.pyx":61
 *     cdef:
 *         int i
 *     for dep in optional_deps:             # <<<<<<<<<<<<<<
 *         if dep in sys.modules:
 *             available_deps[dep] = sys.modules[dep]
 */
    __Pyx_TraceLine(61,0,__PYX_ERR(0, 61, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyxpdf/xpdf.pyx":79
 *                 else:
 *                     break
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * load_deps()
 */
  __Pyx_TraceLine(79,0,__PYX_ERR(0, 79, __pyx_L1_error))
  __pyx_r = 0;
  goto __pyx_L0;

  /* "pyxpdf/xpdf.pyx":49
 * cdef dict available_deps = dict()
 * 
 * cdef int load_deps() except -1:             # <<<<<<<<<<<<<<
 *     global available_deps
 *     global optional_deps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyxpdf.xpdf.load_deps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_importlib);
  __Pyx_XDECREF(__pyx_v_sys);
  __Pyx_XDECREF(__pyx_v_dep);
  __Pyx_XDECREF(__pyx_v_dep_packages);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_spec);
  __Pyx_XDECREF(__pyx_v_module);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":6
 * from pyxpdf.includes.TextString cimport TextString
 * 
 * cdef inline bytes _chars(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf__chars(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_chars", 0);
  __Pyx_TraceCall("_chars", __pyx_f[1], 6, 0, __PYX_ERR(1, 6, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_s);

  /* "src/pyxpdf/helper.pxi":7
 * 
 * cdef inline bytes _chars(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(1, 7, __pyx_L1_error))
  __pyx_t_1 = PyUnicode_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/helper.pxi":9
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(1, 9, __pyx_L1_error))
    if (unlikely(__pyx_v_s == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 9, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_s)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/pyxpdf/helper.pxi":7
 * 
 * cdef inline bytes _chars(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 */
  }

  /* "src/pyxpdf/helper.pxi":10
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef inline bytes _utf8_bytes(object s):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(1, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyBytes_CheckExact(__pyx_v_s))||((__pyx_v_s) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_s)->tp_name), 0))) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = ((PyObject*)__pyx_v_s);
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":6
 * from pyxpdf.includes.TextString cimport TextString
 * 
 * cdef inline bytes _chars(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf._chars", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":12
 *     return s
 * 
 * cdef inline bytes _utf8_bytes(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf__utf8_bytes(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_utf8_bytes", 0);
  __Pyx_TraceCall("_utf8_bytes", __pyx_f[1], 12, 0, __PYX_ERR(1, 12, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_s);

  /* "src/pyxpdf/helper.pxi":13
 * 
 * cdef inline bytes _utf8_bytes(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(1, 13, __pyx_L1_error))
  __pyx_t_1 = PyUnicode_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/helper.pxi":15
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __Pyx_TraceLine(15,0,__PYX_ERR(1, 15, __pyx_L1_error))
    if (unlikely(__pyx_v_s == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 15, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_s)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/pyxpdf/helper.pxi":13
 * 
 * cdef inline bytes _utf8_bytes(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 */
  }

  /* "src/pyxpdf/helper.pxi":16
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef inline bytes _utf32_bytes(object s):
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(1, 16, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyBytes_CheckExact(__pyx_v_s))||((__pyx_v_s) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_s)->tp_name), 0))) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = ((PyObject*)__pyx_v_s);
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":12
 *     return s
 * 
 * cdef inline bytes _utf8_bytes(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf._utf8_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":18
 *     return s
 * 
 * cdef inline bytes _utf32_bytes(object s):             # <<<<<<<<<<<<<<
 *     if type(s) is unicode:
 *         # encode to the specific encoding used inside of the module
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf__utf32_bytes(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_utf32_bytes", 0);
  __Pyx_TraceCall("_utf32_bytes", __pyx_f[1], 18, 0, __PYX_ERR(1, 18, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_s);

  /* "src/pyxpdf/helper.pxi":19
 * 
 * cdef inline bytes _utf32_bytes(object s):
 *     if type(s) is unicode:             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-32')
 */
  __Pyx_TraceLine(19,0,__PYX_ERR(1, 19, __pyx_L1_error))
  __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_v_s)) == ((PyObject *)(&PyUnicode_Type)));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/helper.pxi":21
 *     if type(s) is unicode:
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-32')             # <<<<<<<<<<<<<<
 *     elif isinstance(s, unicode):
 *         # We know from the above that 's' can only be a subtype here.
 */
    __Pyx_TraceLine(21,0,__PYX_ERR(1, 21, __pyx_L1_error))
    if (unlikely(__pyx_v_s == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 21, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsEncodedString(((PyObject*)__pyx_v_s), ((char const *)"UTF-32"), NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/pyxpdf/helper.pxi":19
 * 
 * cdef inline bytes _utf32_bytes(object s):
 *     if type(s) is unicode:             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-32')
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/helper.pxi":22
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-32')
 *     elif isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # We know from the above that 's' can only be a subtype here.
 *         s = unicode(s).encode('UTF-32')
 */
  __Pyx_TraceLine(22,0,__PYX_ERR(1, 22, __pyx_L1_error))
  __pyx_t_2 = PyUnicode_Check(__pyx_v_s); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "src/pyxpdf/helper.pxi":24
 *     elif isinstance(s, unicode):
 *         # We know from the above that 's' can only be a subtype here.
 *         s = unicode(s).encode('UTF-32')             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Could not convert to utf-32 bytes.")
 */
    __Pyx_TraceLine(24,0,__PYX_ERR(1, 24, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Unicode(__pyx_v_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 24, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyUnicode_AsEncodedString(((PyObject*)__pyx_t_3), ((char const *)"UTF-32"), NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 24, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "src/pyxpdf/helper.pxi":22
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-32')
 *     elif isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # We know from the above that 's' can only be a subtype here.
 *         s = unicode(s).encode('UTF-32')
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/helper.pxi":26
 *         s = unicode(s).encode('UTF-32')
 *     else:
 *         raise TypeError("Could not convert to utf-32 bytes.")             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
  __Pyx_TraceLine(26,0,__PYX_ERR(1, 26, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 26, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 26, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "src/pyxpdf/helper.pxi":27
 *     else:
 *         raise TypeError("Could not convert to utf-32 bytes.")
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef inline GString* to_GString(object s):
 */
  __Pyx_TraceLine(27,0,__PYX_ERR(1, 27, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyBytes_CheckExact(__pyx_v_s))||((__pyx_v_s) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_s)->tp_name), 0))) __PYX_ERR(1, 27, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = ((PyObject*)__pyx_v_s);
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":18
 *     return s
 * 
 * cdef inline bytes _utf32_bytes(object s):             # <<<<<<<<<<<<<<
 *     if type(s) is unicode:
 *         # encode to the specific encoding used inside of the module
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf._utf32_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":29
 *     return s
 * 
 * cdef inline GString* to_GString(object s):             # <<<<<<<<<<<<<<
 *     return new GString(_chars(s))
 * 
 */

static CYTHON_INLINE GString *__pyx_f_6pyxpdf_4xpdf_to_GString(PyObject *__pyx_v_s) {
  GString *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_GString", 0);
  __Pyx_TraceCall("to_GString", __pyx_f[1], 29, 0, __PYX_ERR(1, 29, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":30
 * 
 * cdef inline GString* to_GString(object s):
 *     return new GString(_chars(s))             # <<<<<<<<<<<<<<
 * 
 * cdef inline object GString_to_unicode(GString *gstr):
 */
  __Pyx_TraceLine(30,0,__PYX_ERR(1, 30, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 30, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 30, __pyx_L1_error)
  __pyx_r = new GString(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":29
 *     return s
 * 
 * cdef inline GString* to_GString(object s):             # <<<<<<<<<<<<<<
 *     return new GString(_chars(s))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("pyxpdf.xpdf.to_GString", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":32
 *     return new GString(_chars(s))
 * 
 * cdef inline object GString_to_unicode(GString *gstr):             # <<<<<<<<<<<<<<
 *     if gstr is not NULL:
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8", errors='ignore')
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_GString_to_unicode(GString *__pyx_v_gstr) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GString_to_unicode", 0);
  __Pyx_TraceCall("GString_to_unicode", __pyx_f[1], 32, 0, __PYX_ERR(1, 32, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":33
 * 
 * cdef inline object GString_to_unicode(GString *gstr):
 *     if gstr is not NULL:             # <<<<<<<<<<<<<<
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8", errors='ignore')
 *     else:
 */
  __Pyx_TraceLine(33,0,__PYX_ERR(1, 33, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_gstr != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/helper.pxi":34
 * cdef inline object GString_to_unicode(GString *gstr):
 *     if gstr is not NULL:
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8", errors='ignore')             # <<<<<<<<<<<<<<
 *     else:
 *         return ""
 */
    __Pyx_TraceLine(34,0,__PYX_ERR(1, 34, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_gstr->getCString() + 0, __pyx_v_gstr->getLength() - 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_errors, __pyx_n_u_ignore) < 0) __PYX_ERR(1, 34, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/helper.pxi":33
 * 
 * cdef inline object GString_to_unicode(GString *gstr):
 *     if gstr is not NULL:             # <<<<<<<<<<<<<<
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8", errors='ignore')
 *     else:
 */
  }

  /* "src/pyxpdf/helper.pxi":36
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8", errors='ignore')
 *     else:
 *         return ""             # <<<<<<<<<<<<<<
 * 
 * cdef inline GBool_to_bool(GBool b):
 */
  __Pyx_TraceLine(36,0,__PYX_ERR(1, 36, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_r = __pyx_kp_u__4;
    goto __pyx_L0;
  }

  /* "src/pyxpdf/helper.pxi":32
 *     return new GString(_chars(s))
 * 
 * cdef inline object GString_to_unicode(GString *gstr):             # <<<<<<<<<<<<<<
 *     if gstr is not NULL:
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8", errors='ignore')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.GString_to_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":38
 *         return ""
 * 
 * cdef inline GBool_to_bool(GBool b):             # <<<<<<<<<<<<<<
 *     return True if b == gTrue else False
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_GBool_to_bool(GBool __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GBool_to_bool", 0);
  __Pyx_TraceCall("GBool_to_bool", __pyx_f[1], 38, 0, __PYX_ERR(1, 38, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":39
 * 
 * cdef inline GBool_to_bool(GBool b):
 *     return True if b == gTrue else False             # <<<<<<<<<<<<<<
 * 
 * cdef inline GBool to_GBool(pyb):
 */
  __Pyx_TraceLine(39,0,__PYX_ERR(1, 39, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (((__pyx_v_b == gTrue) != 0)) {
    __Pyx_INCREF(Py_True);
    __pyx_t_1 = Py_True;
  } else {
    __Pyx_INCREF(Py_False);
    __pyx_t_1 = Py_False;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":38
 *         return ""
 * 
 * cdef inline GBool_to_bool(GBool b):             # <<<<<<<<<<<<<<
 *     return True if b == gTrue else False
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GBool_to_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":41
 *     return True if b == gTrue else False
 * 
 * cdef inline GBool to_GBool(pyb):             # <<<<<<<<<<<<<<
 *     return gTrue if pyb else gFalse
 * 
 */

static CYTHON_INLINE GBool __pyx_f_6pyxpdf_4xpdf_to_GBool(PyObject *__pyx_v_pyb) {
  GBool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_GBool", 0);
  __Pyx_TraceCall("to_GBool", __pyx_f[1], 41, 0, __PYX_ERR(1, 41, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":42
 * 
 * cdef inline GBool to_GBool(pyb):
 *     return gTrue if pyb else gFalse             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(42,0,__PYX_ERR(1, 42, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pyb); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 42, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_1 = gTrue;
  } else {
    __pyx_t_1 = gFalse;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":41
 *     return True if b == gTrue else False
 * 
 * cdef inline GBool to_GBool(pyb):             # <<<<<<<<<<<<<<
 *     return gTrue if pyb else gFalse
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.to_GBool", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":45
 * 
 * 
 * cdef inline PDFRectangle_to_tuple(PDFRectangle *rect):             # <<<<<<<<<<<<<<
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(PDFRectangle *__pyx_v_rect) {
  PyObject *__pyx_v_rect_tp = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PDFRectangle_to_tuple", 0);
  __Pyx_TraceCall("PDFRectangle_to_tuple", __pyx_f[1], 45, 0, __PYX_ERR(1, 45, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":47
 * cdef inline PDFRectangle_to_tuple(PDFRectangle *rect):
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)             # <<<<<<<<<<<<<<
 *     return rect_tp
 * 
 */
  __Pyx_TraceLine(47,0,__PYX_ERR(1, 47, __pyx_L1_error))
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_rect->x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_rect->y1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_rect->x2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_rect->y2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_rect_tp = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "src/pyxpdf/helper.pxi":48
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)
 *     return rect_tp             # <<<<<<<<<<<<<<
 * 
 * cdef int utf32_to_Unicode_vector(text, vector[Unicode]& vec) except -1:
 */
  __Pyx_TraceLine(48,0,__PYX_ERR(1, 48, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_rect_tp);
  __pyx_r = __pyx_v_rect_tp;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":45
 * 
 * 
 * cdef inline PDFRectangle_to_tuple(PDFRectangle *rect):             # <<<<<<<<<<<<<<
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFRectangle_to_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rect_tp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":50
 *     return rect_tp
 * 
 * cdef int utf32_to_Unicode_vector(text, vector[Unicode]& vec) except -1:             # <<<<<<<<<<<<<<
 *     cdef bytes by = _utf32_bytes(text)
 *     cdef char* ch = by
 */

static int __pyx_f_6pyxpdf_4xpdf_utf32_to_Unicode_vector(PyObject *__pyx_v_text, std::vector<Unicode>  &__pyx_v_vec) {
  PyObject *__pyx_v_by = 0;
  char *__pyx_v_ch;
  size_t __pyx_v_l_bytes;
  size_t __pyx_v_l_utf32;
  size_t __pyx_v_i;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("utf32_to_Unicode_vector", 0);
  __Pyx_TraceCall("utf32_to_Unicode_vector", __pyx_f[1], 50, 0, __PYX_ERR(1, 50, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":51
 * 
 * cdef int utf32_to_Unicode_vector(text, vector[Unicode]& vec) except -1:
 *     cdef bytes by = _utf32_bytes(text)             # <<<<<<<<<<<<<<
 *     cdef char* ch = by
 * 
 */
  __Pyx_TraceLine(51,0,__PYX_ERR(1, 51, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf__utf32_bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_by = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/helper.pxi":52
 * cdef int utf32_to_Unicode_vector(text, vector[Unicode]& vec) except -1:
 *     cdef bytes by = _utf32_bytes(text)
 *     cdef char* ch = by             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t l_bytes = len(by)
 */
  __Pyx_TraceLine(52,0,__PYX_ERR(1, 52, __pyx_L1_error))
  if (unlikely(__pyx_v_by == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 52, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_v_by); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
  __pyx_v_ch = __pyx_t_2;

  /* "src/pyxpdf/helper.pxi":54
 *     cdef char* ch = by
 * 
 *     cdef size_t l_bytes = len(by)             # <<<<<<<<<<<<<<
 *     cdef size_t l_utf32 = (l_bytes//4) - 1
 * 
 */
  __Pyx_TraceLine(54,0,__PYX_ERR(1, 54, __pyx_L1_error))
  if (unlikely(__pyx_v_by == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 54, __pyx_L1_error)
  }
  __pyx_t_3 = PyBytes_GET_SIZE(__pyx_v_by); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 54, __pyx_L1_error)
  __pyx_v_l_bytes = __pyx_t_3;

  /* "src/pyxpdf/helper.pxi":55
 * 
 *     cdef size_t l_bytes = len(by)
 *     cdef size_t l_utf32 = (l_bytes//4) - 1             # <<<<<<<<<<<<<<
 * 
 *     vec.resize(l_utf32)  # Not including BOM
 */
  __Pyx_TraceLine(55,0,__PYX_ERR(1, 55, __pyx_L1_error))
  __pyx_v_l_utf32 = ((__pyx_v_l_bytes / 4) - 1);

  /* "src/pyxpdf/helper.pxi":57
 *     cdef size_t l_utf32 = (l_bytes//4) - 1
 * 
 *     vec.resize(l_utf32)  # Not including BOM             # <<<<<<<<<<<<<<
 * 
 *     # print(f"{l_bytes}")
 */
  __Pyx_TraceLine(57,0,__PYX_ERR(1, 57, __pyx_L1_error))
  try {
    __pyx_v_vec.resize(__pyx_v_l_utf32);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 57, __pyx_L1_error)
  }

  /* "src/pyxpdf/helper.pxi":62
 *     # print(f"Loop - {list(range(4, l_bytes, 4))}")
 *     cdef size_t i
 *     for i in range(4, l_bytes, 4):             # <<<<<<<<<<<<<<
 *         vec[(i//4) - 1] = deref(<Unicode*>(&ch[i]))
 *         #print(f"{(i/4) - 1} - {vec[(i/4) - 1]}")
 */
  __Pyx_TraceLine(62,0,__PYX_ERR(1, 62, __pyx_L1_error))
  __pyx_t_4 = __pyx_v_l_bytes;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 4; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=4) {
    __pyx_v_i = __pyx_t_6;

    /* "src/pyxpdf/helper.pxi":63
 *     cdef size_t i
 *     for i in range(4, l_bytes, 4):
 *         vec[(i//4) - 1] = deref(<Unicode*>(&ch[i]))             # <<<<<<<<<<<<<<
 *         #print(f"{(i/4) - 1} - {vec[(i/4) - 1]}")
 *     return 0
 */
    __Pyx_TraceLine(63,0,__PYX_ERR(1, 63, __pyx_L1_error))
    (__pyx_v_vec[((__pyx_v_i / 4) - 1)]) = (*((Unicode *)(&(__pyx_v_ch[__pyx_v_i]))));
  }

  /* "src/pyxpdf/helper.pxi":65
 *         vec[(i//4) - 1] = deref(<Unicode*>(&ch[i]))
 *         #print(f"{(i/4) - 1} - {vec[(i/4) - 1]}")
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(65,0,__PYX_ERR(1, 65, __pyx_L1_error))
  __pyx_r = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":50
 *     return rect_tp
 * 
 * cdef int utf32_to_Unicode_vector(text, vector[Unicode]& vec) except -1:             # <<<<<<<<<<<<<<
 *     cdef bytes by = _utf32_bytes(text)
 *     cdef char* ch = by
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.utf32_to_Unicode_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_by);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":68
 * 
 * 
 * cdef dict Dict_to_pydict(Dict* xdict, dict pydict = {}):             # <<<<<<<<<<<<<<
 *     cdef Object obj
 *     cdef const char* key
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_Dict_to_pydict(Dict *__pyx_v_xdict, struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict *__pyx_optional_args) {
  PyObject *__pyx_v_pydict = __pyx_k__5;
  Object __pyx_v_obj;
  char const *__pyx_v_key;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Dict_to_pydict", 0);
  __Pyx_TraceCall("Dict_to_pydict", __pyx_f[1], 68, 0, __PYX_ERR(1, 68, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_pydict = __pyx_optional_args->pydict;
    }
  }

  /* "src/pyxpdf/helper.pxi":71
 *     cdef Object obj
 *     cdef const char* key
 *     if xdict != NULL:             # <<<<<<<<<<<<<<
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)
 */
  __Pyx_TraceLine(71,0,__PYX_ERR(1, 71, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_xdict != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/helper.pxi":72
 *     cdef const char* key
 *     if xdict != NULL:
 *         for i in range(xdict.getLength()):             # <<<<<<<<<<<<<<
 *             key = xdict.getKey(i)
 *             if xdict.lookup(key, &obj, 0).isString() == gTrue:
 */
    __Pyx_TraceLine(72,0,__PYX_ERR(1, 72, __pyx_L1_error))
    __pyx_t_2 = __pyx_v_xdict->getLength();
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "src/pyxpdf/helper.pxi":73
 *     if xdict != NULL:
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)             # <<<<<<<<<<<<<<
 *             if xdict.lookup(key, &obj, 0).isString() == gTrue:
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 */
      __Pyx_TraceLine(73,0,__PYX_ERR(1, 73, __pyx_L1_error))
      __pyx_v_key = __pyx_v_xdict->getKey(__pyx_v_i);

      /* "src/pyxpdf/helper.pxi":74
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)
 *             if xdict.lookup(key, &obj, 0).isString() == gTrue:             # <<<<<<<<<<<<<<
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj, 0).isNum() == gTrue:
 */
      __Pyx_TraceLine(74,0,__PYX_ERR(1, 74, __pyx_L1_error))
      __pyx_t_1 = ((__pyx_v_xdict->lookup(__pyx_v_key, (&__pyx_v_obj), 0)->isString() == gTrue) != 0);
      if (__pyx_t_1) {

        /* "src/pyxpdf/helper.pxi":75
 *             key = xdict.getKey(i)
 *             if xdict.lookup(key, &obj, 0).isString() == gTrue:
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())             # <<<<<<<<<<<<<<
 *             elif xdict.lookup(key, &obj, 0).isNum() == gTrue:
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 */
        __Pyx_TraceLine(75,0,__PYX_ERR(1, 75, __pyx_L1_error))
        __pyx_t_5 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_obj.getString()); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__pyx_v_pydict == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(1, 75, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_decode_c_string(__pyx_v_key, 0, strlen(__pyx_v_key), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(PyDict_SetItem(__pyx_v_pydict, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(1, 75, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/pyxpdf/helper.pxi":74
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)
 *             if xdict.lookup(key, &obj, 0).isString() == gTrue:             # <<<<<<<<<<<<<<
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj, 0).isNum() == gTrue:
 */
        goto __pyx_L6;
      }

      /* "src/pyxpdf/helper.pxi":76
 *             if xdict.lookup(key, &obj, 0).isString() == gTrue:
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj, 0).isNum() == gTrue:             # <<<<<<<<<<<<<<
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 *             obj.free()
 */
      __Pyx_TraceLine(76,0,__PYX_ERR(1, 76, __pyx_L1_error))
      __pyx_t_1 = ((__pyx_v_xdict->lookup(__pyx_v_key, (&__pyx_v_obj), 0)->isNum() == gTrue) != 0);
      if (__pyx_t_1) {

        /* "src/pyxpdf/helper.pxi":77
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj, 0).isNum() == gTrue:
 *                 pydict[key.decode('UTF-8')] = obj.getNum()             # <<<<<<<<<<<<<<
 *             obj.free()
 *     return pydict
 */
        __Pyx_TraceLine(77,0,__PYX_ERR(1, 77, __pyx_L1_error))
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_obj.getNum()); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__pyx_v_pydict == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(1, 77, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_decode_c_string(__pyx_v_key, 0, strlen(__pyx_v_key), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(PyDict_SetItem(__pyx_v_pydict, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(1, 77, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/pyxpdf/helper.pxi":76
 *             if xdict.lookup(key, &obj, 0).isString() == gTrue:
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj, 0).isNum() == gTrue:             # <<<<<<<<<<<<<<
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 *             obj.free()
 */
      }
      __pyx_L6:;

      /* "src/pyxpdf/helper.pxi":78
 *             elif xdict.lookup(key, &obj, 0).isNum() == gTrue:
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 *             obj.free()             # <<<<<<<<<<<<<<
 *     return pydict
 * 
 */
      __Pyx_TraceLine(78,0,__PYX_ERR(1, 78, __pyx_L1_error))
      __pyx_v_obj.free();
    }

    /* "src/pyxpdf/helper.pxi":71
 *     cdef Object obj
 *     cdef const char* key
 *     if xdict != NULL:             # <<<<<<<<<<<<<<
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)
 */
  }

  /* "src/pyxpdf/helper.pxi":79
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 *             obj.free()
 *     return pydict             # <<<<<<<<<<<<<<
 * 
 * # cdef object TextString_to_unicode(TextString* text_str):
 */
  __Pyx_TraceLine(79,0,__PYX_ERR(1, 79, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pydict);
  __pyx_r = __pyx_v_pydict;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":68
 * 
 * 
 * cdef dict Dict_to_pydict(Dict* xdict, dict pydict = {}):             # <<<<<<<<<<<<<<
 *     cdef Object obj
 *     cdef const char* key
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf.Dict_to_pydict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":84
 * #    return GString_to_unicode(text_str.toPDFTextString())
 * 
 * cdef TextString* to_TextString(tstr):             # <<<<<<<<<<<<<<
 *     cdef:
 *         unique_ptr[GString] gstr
 */

static TextString *__pyx_f_6pyxpdf_4xpdf_to_TextString(PyObject *__pyx_v_tstr) {
  std::unique_ptr<GString>  __pyx_v_gstr;
  TextString *__pyx_v_text_string;
  TextString *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_TextString", 0);
  __Pyx_TraceCall("to_TextString", __pyx_f[1], 84, 0, __PYX_ERR(1, 84, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":88
 *         unique_ptr[GString] gstr
 *         TextString* text_string
 *     gstr.reset(to_GString(tstr))             # <<<<<<<<<<<<<<
 *     text_string = new TextString(gstr.get())
 *     return text_string
 */
  __Pyx_TraceLine(88,0,__PYX_ERR(1, 88, __pyx_L1_error))
  __pyx_v_gstr.reset(__pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_tstr));

  /* "src/pyxpdf/helper.pxi":89
 *         TextString* text_string
 *     gstr.reset(to_GString(tstr))
 *     text_string = new TextString(gstr.get())             # <<<<<<<<<<<<<<
 *     return text_string
 * 
 */
  __Pyx_TraceLine(89,0,__PYX_ERR(1, 89, __pyx_L1_error))
  __pyx_v_text_string = new TextString(__pyx_v_gstr.get());

  /* "src/pyxpdf/helper.pxi":90
 *     gstr.reset(to_GString(tstr))
 *     text_string = new TextString(gstr.get())
 *     return text_string             # <<<<<<<<<<<<<<
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):
 */
  __Pyx_TraceLine(90,0,__PYX_ERR(1, 90, __pyx_L1_error))
  __pyx_r = __pyx_v_text_string;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":84
 * #    return GString_to_unicode(text_str.toPDFTextString())
 * 
 * cdef TextString* to_TextString(tstr):             # <<<<<<<<<<<<<<
 *     cdef:
 *         unique_ptr[GString] gstr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.to_TextString", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":92
 *     return text_string
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):             # <<<<<<<<<<<<<<
 *     (<string*>stream)[0] += string(text, length)
 */

static void __pyx_f_6pyxpdf_4xpdf_append_to_cpp_string(void *__pyx_v_stream, char const *__pyx_v_text, int __pyx_v_length) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_to_cpp_string", 0);
  __Pyx_TraceCall("append_to_cpp_string", __pyx_f[1], 92, 0, __PYX_ERR(1, 92, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":93
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):
 *     (<string*>stream)[0] += string(text, length)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(93,0,__PYX_ERR(1, 93, __pyx_L1_error))
  try {
    __pyx_t_1 = std::string(__pyx_v_text, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 93, __pyx_L1_error)
  }
  (((std::string *)__pyx_v_stream)[0]) += __pyx_t_1;

  /* "src/pyxpdf/helper.pxi":92
 *     return text_string
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):             # <<<<<<<<<<<<<<
 *     (<string*>stream)[0] += string(text, length)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.append_to_cpp_string", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "src/pyxpdf/pdferror.pxi":42
 *     this one.
 *     """
 *     def __init__(self, message):             # <<<<<<<<<<<<<<
 *         super().__init__(message)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_8PDFError_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_8PDFError_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_message)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 42, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_message = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 42, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFError___init__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFError *)__pyx_v_self), __pyx_v_message);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_8PDFError___init__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self, PyObject *__pyx_v_message) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[2], 42, 0, __PYX_ERR(2, 42, __pyx_L1_error));

  /* "src/pyxpdf/pdferror.pxi":43
 *     """
 *     def __init__(self, message):
 *         super().__init__(message)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(43,0,__PYX_ERR(2, 43, __pyx_L1_error))
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_message) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_message);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/pdferror.pxi":42
 *     this one.
 *     """
 *     def __init__(self, message):             # <<<<<<<<<<<<<<
 *         super().__init__(message)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8PDFError_2__reduce_cython__[] = "PDFError.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8PDFError_2__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFError_2__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFError *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFError_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__6)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PDFError); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PDFError); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFError.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8PDFError_4__setstate_cython__[] = "PDFError.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_8PDFError_4__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFError_4__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFError *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFError_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__7)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFError__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFError.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/pdferror.pxi":49
 *     """Base exception class for all ``xpdf`` errors.
 *     """
 *     def __init__(self, message = None):             # <<<<<<<<<<<<<<
 *         if message:
 *             super().__init__(message)
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_9XPDFError_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_9XPDFError_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_message);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 49, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_message = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 49, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_9XPDFError___init__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *)__pyx_v_self), __pyx_v_message);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_9XPDFError___init__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *__pyx_v_self, PyObject *__pyx_v_message) {
  PyObject *__pyx_v_default_msg = NULL;
  PyObject *__pyx_v_code = NULL;
  PyObject *__pyx_v_err = NULL;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[2], 49, 0, __PYX_ERR(2, 49, __pyx_L1_error));

  /* "src/pyxpdf/pdferror.pxi":50
 *     """
 *     def __init__(self, message = None):
 *         if message:             # <<<<<<<<<<<<<<
 *             super().__init__(message)
 *         else:
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(2, 50, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_message); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 50, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdferror.pxi":51
 *     def __init__(self, message = None):
 *         if message:
 *             super().__init__(message)             # <<<<<<<<<<<<<<
 *         else:
 *             default_msg = "Uncaught error in xpdf library."
 */
    __Pyx_TraceLine(51,0,__PYX_ERR(2, 51, __pyx_L1_error))
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError));
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self));
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_message) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_message);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/pdferror.pxi":50
 *     """
 *     def __init__(self, message = None):
 *         if message:             # <<<<<<<<<<<<<<
 *             super().__init__(message)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/pdferror.pxi":53
 *             super().__init__(message)
 *         else:
 *             default_msg = "Uncaught error in xpdf library."             # <<<<<<<<<<<<<<
 *             for code, err in ErrorCodeMapping.items():
 *                 if err == type(self):
 */
  __Pyx_TraceLine(53,0,__PYX_ERR(2, 53, __pyx_L1_error))
  /*else*/ {
    __Pyx_INCREF(__pyx_kp_u_Uncaught_error_in_xpdf_library);
    __pyx_v_default_msg = __pyx_kp_u_Uncaught_error_in_xpdf_library;

    /* "src/pyxpdf/pdferror.pxi":54
 *         else:
 *             default_msg = "Uncaught error in xpdf library."
 *             for code, err in ErrorCodeMapping.items():             # <<<<<<<<<<<<<<
 *                 if err == type(self):
 *                     default_msg = ErrorCodesDict[code]
 */
    __Pyx_TraceLine(54,0,__PYX_ERR(2, 54, __pyx_L1_error))
    __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ErrorCodeMapping); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(2, 54, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_dict_iterator(__pyx_t_3, 0, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_4;
    __pyx_t_4 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_6, &__pyx_t_5, &__pyx_t_4, &__pyx_t_3, NULL, __pyx_t_7);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(2, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_code, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_err, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "src/pyxpdf/pdferror.pxi":55
 *             default_msg = "Uncaught error in xpdf library."
 *             for code, err in ErrorCodeMapping.items():
 *                 if err == type(self):             # <<<<<<<<<<<<<<
 *                     default_msg = ErrorCodesDict[code]
 *             super().__init__(default_msg)
 */
      __Pyx_TraceLine(55,0,__PYX_ERR(2, 55, __pyx_L1_error))
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_err, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 55, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 55, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_1) {

        /* "src/pyxpdf/pdferror.pxi":56
 *             for code, err in ErrorCodeMapping.items():
 *                 if err == type(self):
 *                     default_msg = ErrorCodesDict[code]             # <<<<<<<<<<<<<<
 *             super().__init__(default_msg)
 * 
 */
        __Pyx_TraceLine(56,0,__PYX_ERR(2, 56, __pyx_L1_error))
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ErrorCodesDict); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_v_code); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF_SET(__pyx_v_default_msg, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "src/pyxpdf/pdferror.pxi":55
 *             default_msg = "Uncaught error in xpdf library."
 *             for code, err in ErrorCodeMapping.items():
 *                 if err == type(self):             # <<<<<<<<<<<<<<
 *                     default_msg = ErrorCodesDict[code]
 *             super().__init__(default_msg)
 */
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/pdferror.pxi":57
 *                 if err == type(self):
 *                     default_msg = ErrorCodesDict[code]
 *             super().__init__(default_msg)             # <<<<<<<<<<<<<<
 * 
 * cdef class PDFSyntaxError(XPDFError):
 */
    __Pyx_TraceLine(57,0,__PYX_ERR(2, 57, __pyx_L1_error))
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError));
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_self));
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_default_msg) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_default_msg);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "src/pyxpdf/pdferror.pxi":49
 *     """Base exception class for all ``xpdf`` errors.
 *     """
 *     def __init__(self, message = None):             # <<<<<<<<<<<<<<
 *         if message:
 *             super().__init__(message)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_default_msg);
  __Pyx_XDECREF(__pyx_v_code);
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_9XPDFError_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_9XPDFError_2__reduce_cython__[] = "XPDFError.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_9XPDFError_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_9XPDFError_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_9XPDFError_2__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_9XPDFError_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_9XPDFError_2__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_9XPDFError_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__8)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_XPDFError); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_XPDFError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_XPDFError); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFError.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFError__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_9XPDFError_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_9XPDFError_4__setstate_cython__[] = "XPDFError.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_9XPDFError_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_9XPDFError_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_9XPDFError_4__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_9XPDFError_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_9XPDFError_4__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_9XPDFError_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__9)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_XPDFError__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFError__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFError__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFError.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFSyntaxError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_14PDFSyntaxError___reduce_cython__[] = "PDFSyntaxError.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_14PDFSyntaxError_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14PDFSyntaxError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_14PDFSyntaxError___reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFSyntaxError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14PDFSyntaxError___reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFSyntaxError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__10)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PDFSyntaxError); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFSyntaxError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PDFSyntaxError); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFSyntaxError.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFSyntaxError__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFSyntaxError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_14PDFSyntaxError_2__setstate_cython__[] = "PDFSyntaxError.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_14PDFSyntaxError_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14PDFSyntaxError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_14PDFSyntaxError_2__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFSyntaxError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14PDFSyntaxError_2__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFSyntaxError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__11)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFSyntaxError__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFSyntaxError__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFSyntaxError__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFSyntaxError.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15XPDFConfigError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_15XPDFConfigError___reduce_cython__[] = "XPDFConfigError.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_15XPDFConfigError_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15XPDFConfigError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_15XPDFConfigError___reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15XPDFConfigError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_15XPDFConfigError___reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_15XPDFConfigError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__12)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_XPDFConfigError); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_XPDFConfigError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_XPDFConfigError); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFConfigError.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFConfigError__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15XPDFConfigError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_15XPDFConfigError_2__setstate_cython__[] = "XPDFConfigError.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_15XPDFConfigError_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15XPDFConfigError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_15XPDFConfigError_2__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15XPDFConfigError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_15XPDFConfigError_2__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_15XPDFConfigError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__13)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_XPDFConfigError__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFConfigError__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFConfigError__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFConfigError.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10PDFIOError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_10PDFIOError___reduce_cython__[] = "PDFIOError.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_10PDFIOError_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10PDFIOError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_10PDFIOError___reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10PDFIOError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10PDFIOError___reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10PDFIOError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__14)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PDFIOError); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFIOError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PDFIOError); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFIOError.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFIOError__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10PDFIOError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_10PDFIOError_2__setstate_cython__[] = "PDFIOError.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_10PDFIOError_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10PDFIOError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_10PDFIOError_2__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10PDFIOError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10PDFIOError_2__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10PDFIOError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__15)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFIOError__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFIOError__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFIOError__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFIOError.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18PDFPermissionError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_18PDFPermissionError___reduce_cython__[] = "PDFPermissionError.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_18PDFPermissionError_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18PDFPermissionError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_18PDFPermissionError___reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18PDFPermissionError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18PDFPermissionError___reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18PDFPermissionError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__16)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PDFPermissionErro); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFPermissionError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PDFPermissionErro); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFPermissionError.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFPermissionError__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18PDFPermissionError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_18PDFPermissionError_2__setstate_cython__[] = "PDFPermissionError.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_18PDFPermissionError_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18PDFPermissionError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_18PDFPermissionError_2__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18PDFPermissionError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18PDFPermissionError_2__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18PDFPermissionError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__17)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFPermissionError__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFPermissionError__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFPermissionError__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFPermissionError.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_17XPDFInternalError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_17XPDFInternalError___reduce_cython__[] = "XPDFInternalError.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_17XPDFInternalError_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_17XPDFInternalError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_17XPDFInternalError___reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_17XPDFInternalError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_17XPDFInternalError___reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_17XPDFInternalError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__18)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_XPDFInternalError); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_XPDFInternalError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_XPDFInternalError); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFInternalError.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFInternalError__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_17XPDFInternalError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_17XPDFInternalError_2__setstate_cython__[] = "XPDFInternalError.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_17XPDFInternalError_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_17XPDFInternalError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_17XPDFInternalError_2__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_17XPDFInternalError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_17XPDFInternalError_2__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_17XPDFInternalError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__19)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_XPDFInternalError__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFInternalError__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFInternalError__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFInternalError.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_23XPDFNotInplementedError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_23XPDFNotInplementedError___reduce_cython__[] = "XPDFNotInplementedError.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_23XPDFNotInplementedError_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_23XPDFNotInplementedError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_23XPDFNotInplementedError___reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_23XPDFNotInplementedError_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_23XPDFNotInplementedError___reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_23XPDFNotInplementedError___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__20)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_XPDFNotInplemente); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_XPDFNotInplementedError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_XPDFNotInplemente); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFNotInplementedError.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFNotInplementedError__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_23XPDFNotInplementedError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_23XPDFNotInplementedError_2__setstate_cython__[] = "XPDFNotInplementedError.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_23XPDFNotInplementedError_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_23XPDFNotInplementedError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_23XPDFNotInplementedError_2__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_23XPDFNotInplementedError_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_23XPDFNotInplementedError_2__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_23XPDFNotInplementedError_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__21)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_XPDFNotInplementedError__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFNotInplementedError__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFNotInplementedError__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFNotInplementedError.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":17
 *         public object __doc__
 * 
 *     cdef _set_defaults(self):             # <<<<<<<<<<<<<<
 *         # only call after initialising self._global
 *         # default text encoding
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_19_GlobalParamsConfig__set_defaults(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_defaults", 0);
  __Pyx_TraceCall("_set_defaults", __pyx_f[3], 17, 0, __PYX_ERR(3, 17, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":20
 *         # only call after initialising self._global
 *         # default text encoding
 *         self._global.setTextEncoding("UTF-8")             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_default_xpdfrc(self):
 */
  __Pyx_TraceLine(20,0,__PYX_ERR(3, 20, __pyx_L1_error))
  __pyx_v_self->_global->setTextEncoding(((char const *)"UTF-8"));

  /* "src/pyxpdf/globalconfig.pxi":17
 *         public object __doc__
 * 
 *     cdef _set_defaults(self):             # <<<<<<<<<<<<<<
 *         # only call after initialising self._global
 *         # default text encoding
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig._set_defaults", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":22
 *         self._global.setTextEncoding("UTF-8")
 * 
 *     cdef _get_default_xpdfrc(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object pyxpdf_data
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_19_GlobalParamsConfig__get_default_xpdfrc(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_v_pyxpdf_data = 0;
  PyObject *__pyx_v_cfg = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_default_xpdfrc", 0);
  __Pyx_TraceCall("_get_default_xpdfrc", __pyx_f[3], 22, 0, __PYX_ERR(3, 22, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":25
 *         cdef:
 *             object pyxpdf_data
 *             object cfg = None             # <<<<<<<<<<<<<<
 *         try:
 *             import pyxpdf_data
 */
  __Pyx_TraceLine(25,0,__PYX_ERR(3, 25, __pyx_L1_error))
  __Pyx_INCREF(Py_None);
  __pyx_v_cfg = Py_None;

  /* "src/pyxpdf/globalconfig.pxi":26
 *             object pyxpdf_data
 *             object cfg = None
 *         try:             # <<<<<<<<<<<<<<
 *             import pyxpdf_data
 *             cfg = pyxpdf_data.get_xpdfrc()
 */
  __Pyx_TraceLine(26,0,__PYX_ERR(3, 26, __pyx_L1_error))
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "src/pyxpdf/globalconfig.pxi":27
 *             object cfg = None
 *         try:
 *             import pyxpdf_data             # <<<<<<<<<<<<<<
 *             cfg = pyxpdf_data.get_xpdfrc()
 *         except ImportError:
 */
      __Pyx_TraceLine(27,0,__PYX_ERR(3, 27, __pyx_L3_error))
      __pyx_t_4 = __Pyx_Import(__pyx_n_s_pyxpdf_data, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 27, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_pyxpdf_data = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "src/pyxpdf/globalconfig.pxi":28
 *         try:
 *             import pyxpdf_data
 *             cfg = pyxpdf_data.get_xpdfrc()             # <<<<<<<<<<<<<<
 *         except ImportError:
 *             pass
 */
      __Pyx_TraceLine(28,0,__PYX_ERR(3, 28, __pyx_L3_error))
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyxpdf_data, __pyx_n_s_get_xpdfrc); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 28, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 28, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_cfg, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "src/pyxpdf/globalconfig.pxi":26
 *             object pyxpdf_data
 *             object cfg = None
 *         try:             # <<<<<<<<<<<<<<
 *             import pyxpdf_data
 *             cfg = pyxpdf_data.get_xpdfrc()
 */
    }

    /* "src/pyxpdf/globalconfig.pxi":32
 *             pass
 *         else:
 *             del pyxpdf_data             # <<<<<<<<<<<<<<
 *         return cfg
 * 
 */
    __Pyx_TraceLine(32,0,__PYX_ERR(3, 32, __pyx_L5_except_error))
    /*else:*/ {
      __Pyx_DECREF(__pyx_v_pyxpdf_data);
      __pyx_v_pyxpdf_data = NULL;
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "src/pyxpdf/globalconfig.pxi":29
 *             import pyxpdf_data
 *             cfg = pyxpdf_data.get_xpdfrc()
 *         except ImportError:             # <<<<<<<<<<<<<<
 *             pass
 *         else:
 */
    __Pyx_TraceLine(29,0,__PYX_ERR(3, 29, __pyx_L5_except_error))
    __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_7) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "src/pyxpdf/globalconfig.pxi":26
 *             object pyxpdf_data
 *             object cfg = None
 *         try:             # <<<<<<<<<<<<<<
 *             import pyxpdf_data
 *             cfg = pyxpdf_data.get_xpdfrc()
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "src/pyxpdf/globalconfig.pxi":33
 *         else:
 *             del pyxpdf_data
 *         return cfg             # <<<<<<<<<<<<<<
 * 
 *     def load_file(self, cfg_path=None):
 */
  __Pyx_TraceLine(33,0,__PYX_ERR(3, 33, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_cfg);
  __pyx_r = __pyx_v_cfg;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":22
 *         self._global.setTextEncoding("UTF-8")
 * 
 *     cdef _get_default_xpdfrc(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object pyxpdf_data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig._get_default_xpdfrc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyxpdf_data);
  __Pyx_XDECREF(__pyx_v_cfg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":35
 *         return cfg
 * 
 *     def load_file(self, cfg_path=None):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         if globalParams != NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_1load_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_load_file[] = "_GlobalParamsConfig.load_file(self, cfg_path=None)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_1load_file = {"load_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_1load_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_load_file};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_1load_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cfg_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cfg_path,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cfg_path);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load_file") < 0)) __PYX_ERR(3, 35, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cfg_path = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_file", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 35, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.load_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_load_file(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), __pyx_v_cfg_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_load_file(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_cfg_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  GlobalParams *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__22)
  __Pyx_RefNannySetupContext("load_file", 0);
  __Pyx_TraceCall("load_file", __pyx_f[3], 35, 0, __PYX_ERR(3, 35, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":37
 *     def load_file(self, cfg_path=None):
 *         global globalParams
 *         if globalParams != NULL:             # <<<<<<<<<<<<<<
 *             del globalParams
 * 
 */
  __Pyx_TraceLine(37,0,__PYX_ERR(3, 37, __pyx_L1_error))
  __pyx_t_1 = ((globalParams != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/globalconfig.pxi":38
 *         global globalParams
 *         if globalParams != NULL:
 *             del globalParams             # <<<<<<<<<<<<<<
 * 
 *         if cfg_path == None:
 */
    __Pyx_TraceLine(38,0,__PYX_ERR(3, 38, __pyx_L1_error))
    delete globalParams;

    /* "src/pyxpdf/globalconfig.pxi":37
 *     def load_file(self, cfg_path=None):
 *         global globalParams
 *         if globalParams != NULL:             # <<<<<<<<<<<<<<
 *             del globalParams
 * 
 */
  }

  /* "src/pyxpdf/globalconfig.pxi":40
 *             del globalParams
 * 
 *         if cfg_path == None:             # <<<<<<<<<<<<<<
 *             self._global = new GlobalParams(<const char*>NULL)
 *         else:
 */
  __Pyx_TraceLine(40,0,__PYX_ERR(3, 40, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_cfg_path, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 40, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "src/pyxpdf/globalconfig.pxi":41
 * 
 *         if cfg_path == None:
 *             self._global = new GlobalParams(<const char*>NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             self._global = new GlobalParams(_chars(cfg_path))
 */
    __Pyx_TraceLine(41,0,__PYX_ERR(3, 41, __pyx_L1_error))
    __pyx_v_self->_global = new GlobalParams(((char const *)NULL));

    /* "src/pyxpdf/globalconfig.pxi":40
 *             del globalParams
 * 
 *         if cfg_path == None:             # <<<<<<<<<<<<<<
 *             self._global = new GlobalParams(<const char*>NULL)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "src/pyxpdf/globalconfig.pxi":43
 *             self._global = new GlobalParams(<const char*>NULL)
 *         else:
 *             self._global = new GlobalParams(_chars(cfg_path))             # <<<<<<<<<<<<<<
 * 
 *         if self._global == NULL:
 */
  __Pyx_TraceLine(43,0,__PYX_ERR(3, 43, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_cfg_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(3, 43, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(3, 43, __pyx_L1_error)
    __pyx_v_self->_global = new GlobalParams(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "src/pyxpdf/globalconfig.pxi":45
 *             self._global = new GlobalParams(_chars(cfg_path))
 * 
 *         if self._global == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")
 *         self._set_defaults()
 */
  __Pyx_TraceLine(45,0,__PYX_ERR(3, 45, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_self->_global == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/globalconfig.pxi":46
 * 
 *         if self._global == NULL:
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")             # <<<<<<<<<<<<<<
 *         self._set_defaults()
 * 
 */
    __Pyx_TraceLine(46,0,__PYX_ERR(3, 46, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 46, __pyx_L1_error)

    /* "src/pyxpdf/globalconfig.pxi":45
 *             self._global = new GlobalParams(_chars(cfg_path))
 * 
 *         if self._global == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")
 *         self._set_defaults()
 */
  }

  /* "src/pyxpdf/globalconfig.pxi":47
 *         if self._global == NULL:
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")
 *         self._set_defaults()             # <<<<<<<<<<<<<<
 * 
 *         globalParams = self._global
 */
  __Pyx_TraceLine(47,0,__PYX_ERR(3, 47, __pyx_L1_error))
  __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self->__pyx_vtab)->_set_defaults(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/globalconfig.pxi":49
 *         self._set_defaults()
 * 
 *         globalParams = self._global             # <<<<<<<<<<<<<<
 * 
 *     def reset(self):
 */
  __Pyx_TraceLine(49,0,__PYX_ERR(3, 49, __pyx_L1_error))
  __pyx_t_4 = __pyx_v_self->_global;
  globalParams = __pyx_t_4;

  /* "src/pyxpdf/globalconfig.pxi":35
 *         return cfg
 * 
 *     def load_file(self, cfg_path=None):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         if globalParams != NULL:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.load_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":51
 *         globalParams = self._global
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         self.load_file(self.cfg_path)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_3reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_2reset[] = "_GlobalParamsConfig.reset(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_3reset = {"reset", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_3reset, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_2reset};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_3reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_2reset(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_2reset(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__24)
  __Pyx_RefNannySetupContext("reset", 0);
  __Pyx_TraceCall("reset", __pyx_f[3], 51, 0, __PYX_ERR(3, 51, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":52
 * 
 *     def reset(self):
 *         self.load_file(self.cfg_path)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __Pyx_TraceLine(52,0,__PYX_ERR(3, 52, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_load_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_self->cfg_path) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_self->cfg_path);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/globalconfig.pxi":51
 *         globalParams = self._global
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         self.load_file(self.cfg_path)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":54
 *         self.load_file(self.cfg_path)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._global = NULL
 *         self.cfg_path = self._get_default_xpdfrc()
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_4__cinit__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_4__cinit__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[3], 54, 0, __PYX_ERR(3, 54, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":55
 * 
 *     def __cinit__(self):
 *         self._global = NULL             # <<<<<<<<<<<<<<
 *         self.cfg_path = self._get_default_xpdfrc()
 *         self.load_file(self.cfg_path)
 */
  __Pyx_TraceLine(55,0,__PYX_ERR(3, 55, __pyx_L1_error))
  __pyx_v_self->_global = NULL;

  /* "src/pyxpdf/globalconfig.pxi":56
 *     def __cinit__(self):
 *         self._global = NULL
 *         self.cfg_path = self._get_default_xpdfrc()             # <<<<<<<<<<<<<<
 *         self.load_file(self.cfg_path)
 * 
 */
  __Pyx_TraceLine(56,0,__PYX_ERR(3, 56, __pyx_L1_error))
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self->__pyx_vtab)->_get_default_xpdfrc(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->cfg_path);
  __Pyx_DECREF(__pyx_v_self->cfg_path);
  __pyx_v_self->cfg_path = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pyxpdf/globalconfig.pxi":57
 *         self._global = NULL
 *         self.cfg_path = self._get_default_xpdfrc()
 *         self.load_file(self.cfg_path)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_TraceLine(57,0,__PYX_ERR(3, 57, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_load_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_self->cfg_path) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_self->cfg_path);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/globalconfig.pxi":54
 *         self.load_file(self.cfg_path)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._global = NULL
 *         self.cfg_path = self._get_default_xpdfrc()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":59
 *         self.load_file(self.cfg_path)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         globalParams = NULL
 */

/* Python wrapper */
static void __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_6__dealloc__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_6__dealloc__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[3], 59, 0, __PYX_ERR(3, 59, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":61
 *     def __dealloc__(self):
 *         global globalParams
 *         globalParams = NULL             # <<<<<<<<<<<<<<
 *         del self._global
 * 
 */
  __Pyx_TraceLine(61,0,__PYX_ERR(3, 61, __pyx_L1_error))
  globalParams = NULL;

  /* "src/pyxpdf/globalconfig.pxi":62
 *         global globalParams
 *         globalParams = NULL
 *         del self._global             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(62,0,__PYX_ERR(3, 62, __pyx_L1_error))
  delete __pyx_v_self->_global;

  /* "src/pyxpdf/globalconfig.pxi":59
 *         self.load_file(self.cfg_path)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         globalParams = NULL
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf._GlobalParamsConfig.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "src/pyxpdf/globalconfig.pxi":65
 * 
 * 
 *     def setup_base_fonts(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_9setup_base_fonts(PyObject *__pyx_v_self, PyObject *__pyx_v_dir); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_8setup_base_fonts[] = "_GlobalParamsConfig.setup_base_fonts(self, dir)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_9setup_base_fonts = {"setup_base_fonts", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_9setup_base_fonts, METH_O, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_8setup_base_fonts};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_9setup_base_fonts(PyObject *__pyx_v_self, PyObject *__pyx_v_dir) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_base_fonts (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8setup_base_fonts(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_dir));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8setup_base_fonts(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_dir) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__25)
  __Pyx_RefNannySetupContext("setup_base_fonts", 0);
  __Pyx_TraceCall("setup_base_fonts", __pyx_f[3], 65, 0, __PYX_ERR(3, 65, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":66
 * 
 *     def setup_base_fonts(self, dir):
 *         self._global.setupBaseFonts(_chars(dir))             # <<<<<<<<<<<<<<
 * 
 *     def add_font_file(self, font_name, file):
 */
  __Pyx_TraceLine(66,0,__PYX_ERR(3, 66, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(3, 66, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(3, 66, __pyx_L1_error)
  __pyx_v_self->_global->setupBaseFonts(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/globalconfig.pxi":65
 * 
 * 
 *     def setup_base_fonts(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.setup_base_fonts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":68
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 *     def add_font_file(self, font_name, file):             # <<<<<<<<<<<<<<
 *         #cdef:
 *         #    unique_ptr[GString] _fname, _fpath
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11add_font_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_10add_font_file[] = "_GlobalParamsConfig.add_font_file(self, font_name, file)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_11add_font_file = {"add_font_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11add_font_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_10add_font_file};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11add_font_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_font_name = 0;
  PyObject *__pyx_v_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_font_file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_font_name,&__pyx_n_s_file,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_font_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_font_file", 1, 2, 2, 1); __PYX_ERR(3, 68, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_font_file") < 0)) __PYX_ERR(3, 68, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_font_name = values[0];
    __pyx_v_file = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_font_file", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.add_font_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_10add_font_file(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), __pyx_v_font_name, __pyx_v_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_10add_font_file(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_font_name, PyObject *__pyx_v_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__26)
  __Pyx_RefNannySetupContext("add_font_file", 0);
  __Pyx_TraceCall("add_font_file", __pyx_f[3], 68, 0, __PYX_ERR(3, 68, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":75
 * 
 *         # GlobalParams free these GStrings in its destructor
 *         self._global.addFontFile(to_GString(font_name), to_GString(file))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(75,0,__PYX_ERR(3, 75, __pyx_L1_error))
  __pyx_v_self->_global->addFontFile(__pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_font_name), __pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_file));

  /* "src/pyxpdf/globalconfig.pxi":68
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 *     def add_font_file(self, font_name, file):             # <<<<<<<<<<<<<<
 *         #cdef:
 *         #    unique_ptr[GString] _fname, _fpath
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.add_font_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":79
 * 
 *     @property
 *     def base_dir(self):             # <<<<<<<<<<<<<<
 *         return GString_to_unicode(self._global.getBaseDir())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 79, 0, __PYX_ERR(3, 79, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":80
 *     @property
 *     def base_dir(self):
 *         return GString_to_unicode(self._global.getBaseDir())             # <<<<<<<<<<<<<<
 * 
 *     @base_dir.setter
 */
  __Pyx_TraceLine(80,0,__PYX_ERR(3, 80, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_self->_global->getBaseDir()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":79
 * 
 *     @property
 *     def base_dir(self):             # <<<<<<<<<<<<<<
 *         return GString_to_unicode(self._global.getBaseDir())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.base_dir.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":83
 * 
 *     @base_dir.setter
 *     def base_dir(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setBaseDir(_chars(dir))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_dir); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_dir) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_dir));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_dir) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 83, 0, __PYX_ERR(3, 83, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":84
 *     @base_dir.setter
 *     def base_dir(self, dir):
 *         self._global.setBaseDir(_chars(dir))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(84,0,__PYX_ERR(3, 84, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_dir); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(3, 84, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(3, 84, __pyx_L1_error)
  __pyx_v_self->_global->setBaseDir(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/globalconfig.pxi":83
 * 
 *     @base_dir.setter
 *     def base_dir(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setBaseDir(_chars(dir))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.base_dir.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":87
 * 
 * 
 *     def map_name_to_unicode(self, char_name):             # <<<<<<<<<<<<<<
 *         return self._global.mapNameToUnicode(_chars(char_name))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13map_name_to_unicode(PyObject *__pyx_v_self, PyObject *__pyx_v_char_name); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_12map_name_to_unicode[] = "_GlobalParamsConfig.map_name_to_unicode(self, char_name)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_13map_name_to_unicode = {"map_name_to_unicode", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13map_name_to_unicode, METH_O, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_12map_name_to_unicode};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13map_name_to_unicode(PyObject *__pyx_v_self, PyObject *__pyx_v_char_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("map_name_to_unicode (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_12map_name_to_unicode(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_char_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_12map_name_to_unicode(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_char_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__27)
  __Pyx_RefNannySetupContext("map_name_to_unicode", 0);
  __Pyx_TraceCall("map_name_to_unicode", __pyx_f[3], 87, 0, __PYX_ERR(3, 87, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":88
 * 
 *     def map_name_to_unicode(self, char_name):
 *         return self._global.mapNameToUnicode(_chars(char_name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(88,0,__PYX_ERR(3, 88, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_char_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(3, 88, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(3, 88, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_From_Unicode(__pyx_v_self->_global->mapNameToUnicode(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":87
 * 
 * 
 *     def map_name_to_unicode(self, char_name):             # <<<<<<<<<<<<<<
 *         return self._global.mapNameToUnicode(_chars(char_name))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.map_name_to_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":92
 * 
 *     @property
 *     def ps_paper_width(self):             # <<<<<<<<<<<<<<
 *         return self._global.getPSPaperWidth()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 92, 0, __PYX_ERR(3, 92, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":93
 *     @property
 *     def ps_paper_width(self):
 *         return self._global.getPSPaperWidth()             # <<<<<<<<<<<<<<
 * 
 *     @ps_paper_width.setter
 */
  __Pyx_TraceLine(93,0,__PYX_ERR(3, 93, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_global->getPSPaperWidth()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":92
 * 
 *     @property
 *     def ps_paper_width(self):             # <<<<<<<<<<<<<<
 *         return self._global.getPSPaperWidth()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.ps_paper_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":96
 * 
 *     @ps_paper_width.setter
 *     def ps_paper_width(self, int width):             # <<<<<<<<<<<<<<
 *         self._global.setPSPaperWidth(width)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_width); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_width) {
  int __pyx_v_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_width); {
    __pyx_v_width = __Pyx_PyInt_As_int(__pyx_arg_width); if (unlikely((__pyx_v_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 96, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.ps_paper_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((int)__pyx_v_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, int __pyx_v_width) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 96, 0, __PYX_ERR(3, 96, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":97
 *     @ps_paper_width.setter
 *     def ps_paper_width(self, int width):
 *         self._global.setPSPaperWidth(width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(97,0,__PYX_ERR(3, 97, __pyx_L1_error))
  __pyx_v_self->_global->setPSPaperWidth(__pyx_v_width);

  /* "src/pyxpdf/globalconfig.pxi":96
 * 
 *     @ps_paper_width.setter
 *     def ps_paper_width(self, int width):             # <<<<<<<<<<<<<<
 *         self._global.setPSPaperWidth(width)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.ps_paper_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":101
 * 
 *     @property
 *     def ps_paper_height(self):             # <<<<<<<<<<<<<<
 *         return self._global.getPSPaperHeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 101, 0, __PYX_ERR(3, 101, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":102
 *     @property
 *     def ps_paper_height(self):
 *         return self._global.getPSPaperHeight()             # <<<<<<<<<<<<<<
 * 
 *     @ps_paper_height.setter
 */
  __Pyx_TraceLine(102,0,__PYX_ERR(3, 102, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_global->getPSPaperHeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":101
 * 
 *     @property
 *     def ps_paper_height(self):             # <<<<<<<<<<<<<<
 *         return self._global.getPSPaperHeight()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.ps_paper_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":105
 * 
 *     @ps_paper_height.setter
 *     def ps_paper_height(self, int height):             # <<<<<<<<<<<<<<
 *         self._global.setPSPaperHeight(height)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_height); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_height) {
  int __pyx_v_height;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_height); {
    __pyx_v_height = __Pyx_PyInt_As_int(__pyx_arg_height); if (unlikely((__pyx_v_height == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 105, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.ps_paper_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((int)__pyx_v_height));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, int __pyx_v_height) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 105, 0, __PYX_ERR(3, 105, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":106
 *     @ps_paper_height.setter
 *     def ps_paper_height(self, int height):
 *         self._global.setPSPaperHeight(height)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(106,0,__PYX_ERR(3, 106, __pyx_L1_error))
  __pyx_v_self->_global->setPSPaperHeight(__pyx_v_height);

  /* "src/pyxpdf/globalconfig.pxi":105
 * 
 *     @ps_paper_height.setter
 *     def ps_paper_height(self, int height):             # <<<<<<<<<<<<<<
 *         self._global.setPSPaperHeight(height)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.ps_paper_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":110
 * 
 *     @property
 *     def enable_freetype(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getEnableFreeType())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 110, 0, __PYX_ERR(3, 110, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":111
 *     @property
 *     def enable_freetype(self):
 *         return GBool_to_bool(self._global.getEnableFreeType())             # <<<<<<<<<<<<<<
 * 
 *     @enable_freetype.setter
 */
  __Pyx_TraceLine(111,0,__PYX_ERR(3, 111, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getEnableFreeType()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":110
 * 
 *     @property
 *     def enable_freetype(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getEnableFreeType())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.enable_freetype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":114
 * 
 *     @enable_freetype.setter
 *     def enable_freetype(self, enable):             # <<<<<<<<<<<<<<
 *         self._global.setEnableFreeType('yes' if enable == True else 'no')
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_enable); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_enable) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_enable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_enable) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 114, 0, __PYX_ERR(3, 114, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":115
 *     @enable_freetype.setter
 *     def enable_freetype(self, enable):
 *         self._global.setEnableFreeType('yes' if enable == True else 'no')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(115,0,__PYX_ERR(3, 115, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_enable, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 115, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(3, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = ((char *)"yes");
  } else {
    __pyx_t_1 = ((char *)"no");
  }
  (void)(__pyx_v_self->_global->setEnableFreeType(__pyx_t_1));

  /* "src/pyxpdf/globalconfig.pxi":114
 * 
 *     @enable_freetype.setter
 *     def enable_freetype(self, enable):             # <<<<<<<<<<<<<<
 *         self._global.setEnableFreeType('yes' if enable == True else 'no')
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.enable_freetype.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":119
 * 
 *     @property
 *     def anti_alias(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getAntialias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 119, 0, __PYX_ERR(3, 119, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":120
 *     @property
 *     def anti_alias(self):
 *         return GBool_to_bool(self._global.getAntialias())             # <<<<<<<<<<<<<<
 * 
 *     @anti_alias.setter
 */
  __Pyx_TraceLine(120,0,__PYX_ERR(3, 120, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getAntialias()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":119
 * 
 *     @property
 *     def anti_alias(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getAntialias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.anti_alias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":123
 * 
 *     @anti_alias.setter
 *     def anti_alias(self, enable):             # <<<<<<<<<<<<<<
 *         self._global.setAntialias('yes' if enable == True else 'no')
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_enable); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_enable) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_enable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_enable) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 123, 0, __PYX_ERR(3, 123, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":124
 *     @anti_alias.setter
 *     def anti_alias(self, enable):
 *         self._global.setAntialias('yes' if enable == True else 'no')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(124,0,__PYX_ERR(3, 124, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_enable, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 124, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(3, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = ((char *)"yes");
  } else {
    __pyx_t_1 = ((char *)"no");
  }
  (void)(__pyx_v_self->_global->setAntialias(__pyx_t_1));

  /* "src/pyxpdf/globalconfig.pxi":123
 * 
 *     @anti_alias.setter
 *     def anti_alias(self, enable):             # <<<<<<<<<<<<<<
 *         self._global.setAntialias('yes' if enable == True else 'no')
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.anti_alias.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":128
 * 
 *     @property
 *     def vector_anti_alias(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getVectorAntialias())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 128, 0, __PYX_ERR(3, 128, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":129
 *     @property
 *     def vector_anti_alias(self):
 *         return GBool_to_bool(self._global.getVectorAntialias())             # <<<<<<<<<<<<<<
 * 
 *     @vector_anti_alias.setter
 */
  __Pyx_TraceLine(129,0,__PYX_ERR(3, 129, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getVectorAntialias()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":128
 * 
 *     @property
 *     def vector_anti_alias(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getVectorAntialias())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.vector_anti_alias.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":132
 * 
 *     @vector_anti_alias.setter
 *     def vector_anti_alias(self, enable):             # <<<<<<<<<<<<<<
 *         self._global.setVectorAntialias('yes' if enable == True else 'no')
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_enable); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_enable) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_enable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_enable) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 132, 0, __PYX_ERR(3, 132, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":133
 *     @vector_anti_alias.setter
 *     def vector_anti_alias(self, enable):
 *         self._global.setVectorAntialias('yes' if enable == True else 'no')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(133,0,__PYX_ERR(3, 133, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_enable, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 133, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(3, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = ((char *)"yes");
  } else {
    __pyx_t_1 = ((char *)"no");
  }
  (void)(__pyx_v_self->_global->setVectorAntialias(__pyx_t_1));

  /* "src/pyxpdf/globalconfig.pxi":132
 * 
 *     @vector_anti_alias.setter
 *     def vector_anti_alias(self, enable):             # <<<<<<<<<<<<<<
 *         self._global.setVectorAntialias('yes' if enable == True else 'no')
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.vector_anti_alias.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":137
 * 
 *     @property
 *     def text_encoding(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[GString] gstr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  std::unique_ptr<GString>  __pyx_v_gstr;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 137, 0, __PYX_ERR(3, 137, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":140
 *         cdef:
 *             unique_ptr[GString] gstr
 *         gstr.reset(self._global.getTextEncodingName())             # <<<<<<<<<<<<<<
 *         return GString_to_unicode(gstr.get())
 * 
 */
  __Pyx_TraceLine(140,0,__PYX_ERR(3, 140, __pyx_L1_error))
  __pyx_v_gstr.reset(__pyx_v_self->_global->getTextEncodingName());

  /* "src/pyxpdf/globalconfig.pxi":141
 *             unique_ptr[GString] gstr
 *         gstr.reset(self._global.getTextEncodingName())
 *         return GString_to_unicode(gstr.get())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(141,0,__PYX_ERR(3, 141, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_gstr.get()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":137
 * 
 *     @property
 *     def text_encoding(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[GString] gstr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.text_encoding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":145
 * 
 *     @text_encoding.setter
 *     def text_encoding(self, encoding):             # <<<<<<<<<<<<<<
 *         cdef UnicodeMap* umap
 *         self._global.setTextEncoding(_chars(encoding))
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_encoding); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_encoding) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_encoding));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_encoding) {
  UnicodeMap *__pyx_v_umap;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 145, 0, __PYX_ERR(3, 145, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":147
 *     def text_encoding(self, encoding):
 *         cdef UnicodeMap* umap
 *         self._global.setTextEncoding(_chars(encoding))             # <<<<<<<<<<<<<<
 *         umap = self._global.getTextEncoding()
 *         if umap == NULL:
 */
  __Pyx_TraceLine(147,0,__PYX_ERR(3, 147, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_encoding); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(3, 147, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_v_self->_global->setTextEncoding(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/globalconfig.pxi":148
 *         cdef UnicodeMap* umap
 *         self._global.setTextEncoding(_chars(encoding))
 *         umap = self._global.getTextEncoding()             # <<<<<<<<<<<<<<
 *         if umap == NULL:
 *             raise XPDFConfigError(f"No UnicodeMap file associated with {encoding} found.")
 */
  __Pyx_TraceLine(148,0,__PYX_ERR(3, 148, __pyx_L1_error))
  __pyx_v_umap = __pyx_v_self->_global->getTextEncoding();

  /* "src/pyxpdf/globalconfig.pxi":149
 *         self._global.setTextEncoding(_chars(encoding))
 *         umap = self._global.getTextEncoding()
 *         if umap == NULL:             # <<<<<<<<<<<<<<
 *             raise XPDFConfigError(f"No UnicodeMap file associated with {encoding} found.")
 *         else:
 */
  __Pyx_TraceLine(149,0,__PYX_ERR(3, 149, __pyx_L1_error))
  __pyx_t_3 = ((__pyx_v_umap == NULL) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "src/pyxpdf/globalconfig.pxi":150
 *         umap = self._global.getTextEncoding()
 *         if umap == NULL:
 *             raise XPDFConfigError(f"No UnicodeMap file associated with {encoding} found.")             # <<<<<<<<<<<<<<
 *         else:
 *             umap.decRefCnt()
 */
    __Pyx_TraceLine(150,0,__PYX_ERR(3, 150, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_No_UnicodeMap_file_associated_wi);
    __pyx_t_4 += 35;
    __Pyx_GIVEREF(__pyx_kp_u_No_UnicodeMap_file_associated_wi);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_No_UnicodeMap_file_associated_wi);
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_encoding, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_found);
    __pyx_t_4 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_found);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_found);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError), __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(3, 150, __pyx_L1_error)

    /* "src/pyxpdf/globalconfig.pxi":149
 *         self._global.setTextEncoding(_chars(encoding))
 *         umap = self._global.getTextEncoding()
 *         if umap == NULL:             # <<<<<<<<<<<<<<
 *             raise XPDFConfigError(f"No UnicodeMap file associated with {encoding} found.")
 *         else:
 */
  }

  /* "src/pyxpdf/globalconfig.pxi":152
 *             raise XPDFConfigError(f"No UnicodeMap file associated with {encoding} found.")
 *         else:
 *             umap.decRefCnt()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(152,0,__PYX_ERR(3, 152, __pyx_L1_error))
  /*else*/ {
    __pyx_v_umap->decRefCnt();
  }

  /* "src/pyxpdf/globalconfig.pxi":145
 * 
 *     @text_encoding.setter
 *     def text_encoding(self, encoding):             # <<<<<<<<<<<<<<
 *         cdef UnicodeMap* umap
 *         self._global.setTextEncoding(_chars(encoding))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.text_encoding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":156
 * 
 *     @property
 *     def text_eol(self):             # <<<<<<<<<<<<<<
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  EndOfLineKind __pyx_v_eol;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 156, 0, __PYX_ERR(3, 156, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":157
 *     @property
 *     def text_eol(self):
 *         cdef EndOfLineKind eol = self._global.getTextEOL()             # <<<<<<<<<<<<<<
 *         if eol == EndOfLineKind.eolUnix:
 *             return "unix"
 */
  __Pyx_TraceLine(157,0,__PYX_ERR(3, 157, __pyx_L1_error))
  __pyx_v_eol = __pyx_v_self->_global->getTextEOL();

  /* "src/pyxpdf/globalconfig.pxi":158
 *     def text_eol(self):
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:             # <<<<<<<<<<<<<<
 *             return "unix"
 *         elif eol == EndOfLineKind.eolDOS:
 */
  __Pyx_TraceLine(158,0,__PYX_ERR(3, 158, __pyx_L1_error))
  switch (__pyx_v_eol) {
    case eolUnix:

    /* "src/pyxpdf/globalconfig.pxi":159
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:
 *             return "unix"             # <<<<<<<<<<<<<<
 *         elif eol == EndOfLineKind.eolDOS:
 *             return "dos"
 */
    __Pyx_TraceLine(159,0,__PYX_ERR(3, 159, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_unix);
    __pyx_r = __pyx_n_u_unix;
    goto __pyx_L0;

    /* "src/pyxpdf/globalconfig.pxi":158
 *     def text_eol(self):
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:             # <<<<<<<<<<<<<<
 *             return "unix"
 *         elif eol == EndOfLineKind.eolDOS:
 */
    break;
    case eolDOS:

    /* "src/pyxpdf/globalconfig.pxi":161
 *             return "unix"
 *         elif eol == EndOfLineKind.eolDOS:
 *             return "dos"             # <<<<<<<<<<<<<<
 *         else:
 *             return "mac"
 */
    __Pyx_TraceLine(161,0,__PYX_ERR(3, 161, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_dos);
    __pyx_r = __pyx_n_u_dos;
    goto __pyx_L0;

    /* "src/pyxpdf/globalconfig.pxi":160
 *         if eol == EndOfLineKind.eolUnix:
 *             return "unix"
 *         elif eol == EndOfLineKind.eolDOS:             # <<<<<<<<<<<<<<
 *             return "dos"
 *         else:
 */
    break;
    default:

    /* "src/pyxpdf/globalconfig.pxi":163
 *             return "dos"
 *         else:
 *             return "mac"             # <<<<<<<<<<<<<<
 * 
 *     @text_eol.setter
 */
    __Pyx_TraceLine(163,0,__PYX_ERR(3, 163, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_mac);
    __pyx_r = __pyx_n_u_mac;
    goto __pyx_L0;
    break;
  }

  /* "src/pyxpdf/globalconfig.pxi":156
 * 
 *     @property
 *     def text_eol(self):             # <<<<<<<<<<<<<<
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.text_eol.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":166
 * 
 *     @text_eol.setter
 *     def text_eol(self, eol):             # <<<<<<<<<<<<<<
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_eol); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_eol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_eol));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_eol) {
  CYTHON_UNUSED EndOfLineKind __pyx_v_c_eol;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 166, 0, __PYX_ERR(3, 166, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":168
 *     def text_eol(self, eol):
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":
 */
  __Pyx_TraceLine(168,0,__PYX_ERR(3, 168, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_eol, __pyx_n_u_unix, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 168, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/globalconfig.pxi":169
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":
 *             c_eol = EndOfLineKind.eolUnix             # <<<<<<<<<<<<<<
 *         elif eol == "dos":
 *             c_eol = EndOfLineKind.eolDOS
 */
    __Pyx_TraceLine(169,0,__PYX_ERR(3, 169, __pyx_L1_error))
    __pyx_v_c_eol = eolUnix;

    /* "src/pyxpdf/globalconfig.pxi":168
 *     def text_eol(self, eol):
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/globalconfig.pxi":170
 *         if eol == "unix":
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(3, 170, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_eol, __pyx_n_u_dos, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 170, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/globalconfig.pxi":171
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":
 *             c_eol = EndOfLineKind.eolDOS             # <<<<<<<<<<<<<<
 *         elif eol == 'mac':
 *             c_eol = EndOfLineKind.eolMac
 */
    __Pyx_TraceLine(171,0,__PYX_ERR(3, 171, __pyx_L1_error))
    __pyx_v_c_eol = eolDOS;

    /* "src/pyxpdf/globalconfig.pxi":170
 *         if eol == "unix":
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/globalconfig.pxi":172
 *         elif eol == "dos":
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolMac
 *         else:
 */
  __Pyx_TraceLine(172,0,__PYX_ERR(3, 172, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_eol, __pyx_n_u_mac, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 172, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "src/pyxpdf/globalconfig.pxi":173
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':
 *             c_eol = EndOfLineKind.eolMac             # <<<<<<<<<<<<<<
 *         else:
 *             raise XPDFConfigError(f"Invalid EOL type - {eol}.")
 */
    __Pyx_TraceLine(173,0,__PYX_ERR(3, 173, __pyx_L1_error))
    __pyx_v_c_eol = eolMac;

    /* "src/pyxpdf/globalconfig.pxi":172
 *         elif eol == "dos":
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolMac
 *         else:
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/globalconfig.pxi":175
 *             c_eol = EndOfLineKind.eolMac
 *         else:
 *             raise XPDFConfigError(f"Invalid EOL type - {eol}.")             # <<<<<<<<<<<<<<
 *         self._global.setTextEOL(_chars(eol))
 * 
 */
  __Pyx_TraceLine(175,0,__PYX_ERR(3, 175, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_EOL_type);
    __pyx_t_3 += 19;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_EOL_type);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Invalid_EOL_type);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_eol, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_);
    __pyx_t_3 += 1;
    __Pyx_GIVEREF(__pyx_kp_u_);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError), __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 175, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "src/pyxpdf/globalconfig.pxi":176
 *         else:
 *             raise XPDFConfigError(f"Invalid EOL type - {eol}.")
 *         self._global.setTextEOL(_chars(eol))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(176,0,__PYX_ERR(3, 176, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_eol); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(3, 176, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyBytes_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(3, 176, __pyx_L1_error)
  (void)(__pyx_v_self->_global->setTextEOL(__pyx_t_6));
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/globalconfig.pxi":166
 * 
 *     @text_eol.setter
 *     def text_eol(self, eol):             # <<<<<<<<<<<<<<
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.text_eol.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":180
 * 
 *     @property
 *     def text_page_breaks(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getTextPageBreaks())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 180, 0, __PYX_ERR(3, 180, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":181
 *     @property
 *     def text_page_breaks(self):
 *         return GBool_to_bool(self._global.getTextPageBreaks())             # <<<<<<<<<<<<<<
 * 
 *     @text_page_breaks.setter
 */
  __Pyx_TraceLine(181,0,__PYX_ERR(3, 181, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getTextPageBreaks()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":180
 * 
 *     @property
 *     def text_page_breaks(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getTextPageBreaks())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.text_page_breaks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":184
 * 
 *     @text_page_breaks.setter
 *     def text_page_breaks(self, breaks):             # <<<<<<<<<<<<<<
 *         self._global.setTextPageBreaks(to_GBool(breaks))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_breaks); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_breaks) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_breaks));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_breaks) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 184, 0, __PYX_ERR(3, 184, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":185
 *     @text_page_breaks.setter
 *     def text_page_breaks(self, breaks):
 *         self._global.setTextPageBreaks(to_GBool(breaks))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(185,0,__PYX_ERR(3, 185, __pyx_L1_error))
  __pyx_v_self->_global->setTextPageBreaks(__pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_breaks));

  /* "src/pyxpdf/globalconfig.pxi":184
 * 
 *     @text_page_breaks.setter
 *     def text_page_breaks(self, breaks):             # <<<<<<<<<<<<<<
 *         self._global.setTextPageBreaks(to_GBool(breaks))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.text_page_breaks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":189
 * 
 *     @property
 *     def text_keep_tiny(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getTextKeepTinyChars())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 189, 0, __PYX_ERR(3, 189, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":190
 *     @property
 *     def text_keep_tiny(self):
 *         return GBool_to_bool(self._global.getTextKeepTinyChars())             # <<<<<<<<<<<<<<
 * 
 *     @text_keep_tiny.setter
 */
  __Pyx_TraceLine(190,0,__PYX_ERR(3, 190, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getTextKeepTinyChars()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":189
 * 
 *     @property
 *     def text_keep_tiny(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getTextKeepTinyChars())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.text_keep_tiny.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":193
 * 
 *     @text_keep_tiny.setter
 *     def text_keep_tiny(self, keep):             # <<<<<<<<<<<<<<
 *         self._global.setTextKeepTinyChars(to_GBool(keep))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_keep); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_keep) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_keep));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_keep) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 193, 0, __PYX_ERR(3, 193, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":194
 *     @text_keep_tiny.setter
 *     def text_keep_tiny(self, keep):
 *         self._global.setTextKeepTinyChars(to_GBool(keep))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(194,0,__PYX_ERR(3, 194, __pyx_L1_error))
  __pyx_v_self->_global->setTextKeepTinyChars(__pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_keep));

  /* "src/pyxpdf/globalconfig.pxi":193
 * 
 *     @text_keep_tiny.setter
 *     def text_keep_tiny(self, keep):             # <<<<<<<<<<<<<<
 *         self._global.setTextKeepTinyChars(to_GBool(keep))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.text_keep_tiny.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":198
 * 
 *     @property
 *     def print_commands(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getPrintCommands())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 198, 0, __PYX_ERR(3, 198, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":199
 *     @property
 *     def print_commands(self):
 *         return GBool_to_bool(self._global.getPrintCommands())             # <<<<<<<<<<<<<<
 * 
 *     @print_commands.setter
 */
  __Pyx_TraceLine(199,0,__PYX_ERR(3, 199, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getPrintCommands()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":198
 * 
 *     @property
 *     def print_commands(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getPrintCommands())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.print_commands.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":202
 * 
 *     @print_commands.setter
 *     def print_commands(self, print_cmd):             # <<<<<<<<<<<<<<
 *         self._global.setPrintCommands(to_GBool(print_cmd))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_print_cmd); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_print_cmd) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_print_cmd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_print_cmd) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 202, 0, __PYX_ERR(3, 202, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":203
 *     @print_commands.setter
 *     def print_commands(self, print_cmd):
 *         self._global.setPrintCommands(to_GBool(print_cmd))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(203,0,__PYX_ERR(3, 203, __pyx_L1_error))
  __pyx_v_self->_global->setPrintCommands(__pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_print_cmd));

  /* "src/pyxpdf/globalconfig.pxi":202
 * 
 *     @print_commands.setter
 *     def print_commands(self, print_cmd):             # <<<<<<<<<<<<<<
 *         self._global.setPrintCommands(to_GBool(print_cmd))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.print_commands.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":207
 * 
 *     @property
 *     def error_quiet(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getErrQuiet())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 207, 0, __PYX_ERR(3, 207, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":208
 *     @property
 *     def error_quiet(self):
 *         return GBool_to_bool(self._global.getErrQuiet())             # <<<<<<<<<<<<<<
 * 
 *     @error_quiet.setter
 */
  __Pyx_TraceLine(208,0,__PYX_ERR(3, 208, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getErrQuiet()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":207
 * 
 *     @property
 *     def error_quiet(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getErrQuiet())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.error_quiet.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":211
 * 
 *     @error_quiet.setter
 *     def error_quiet(self, quiet):             # <<<<<<<<<<<<<<
 *         self._global.setErrQuiet(to_GBool(quiet))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_quiet); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_quiet) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_quiet));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet_2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_quiet) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 211, 0, __PYX_ERR(3, 211, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":212
 *     @error_quiet.setter
 *     def error_quiet(self, quiet):
 *         self._global.setErrQuiet(to_GBool(quiet))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(212,0,__PYX_ERR(3, 212, __pyx_L1_error))
  __pyx_v_self->_global->setErrQuiet(__pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_quiet));

  /* "src/pyxpdf/globalconfig.pxi":211
 * 
 *     @error_quiet.setter
 *     def error_quiet(self, quiet):             # <<<<<<<<<<<<<<
 *         self._global.setErrQuiet(to_GBool(quiet))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.error_quiet.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":216
 * 
 *     @property
 *     def default_text_encoding(self):             # <<<<<<<<<<<<<<
 *         return self._global.defaultTextEncoding.decode('UTF-8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_21default_text_encoding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_21default_text_encoding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_21default_text_encoding___get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_21default_text_encoding___get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 216, 0, __PYX_ERR(3, 216, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":217
 *     @property
 *     def default_text_encoding(self):
 *         return self._global.defaultTextEncoding.decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(217,0,__PYX_ERR(3, 217, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->_global->defaultTextEncoding;
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":216
 * 
 *     @property
 *     def default_text_encoding(self):             # <<<<<<<<<<<<<<
 *         return self._global.defaultTextEncoding.decode('UTF-8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.default_text_encoding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":15
 *         object cfg_path
 *         GlobalParams* _global
 *         public object __doc__             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_defaults(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc_____get__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc_____get__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 15, 0, __PYX_ERR(3, 15, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->__doc__);
  __pyx_r = __pyx_v_self->__doc__;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.__doc__.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___2__set__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___2__set__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 15, 0, __PYX_ERR(3, 15, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->__doc__);
  __Pyx_DECREF(__pyx_v_self->__doc__);
  __pyx_v_self->__doc__ = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.__doc__.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___4__del__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___4__del__(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_TraceCall("__del__", __pyx_f[3], 15, 0, __PYX_ERR(3, 15, __pyx_L1_error));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->__doc__);
  __Pyx_DECREF(__pyx_v_self->__doc__);
  __pyx_v_self->__doc__ = Py_None;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.__doc__.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_14__reduce_cython__[] = "_GlobalParamsConfig.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_15__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_14__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__28)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(7, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_16__setstate_cython__[] = "_GlobalParamsConfig.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_17__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_16__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_16__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_19_GlobalParamsConfig_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__30)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 3, 0, __PYX_ERR(7, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf._GlobalParamsConfig.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/pdftotext.pxi":7
 * 
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,             # <<<<<<<<<<<<<<
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_1pdftotext_raw(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_pdftotext_raw(PyObject *__pyx_v_pdf_file, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw *__pyx_optional_args) {
  int __pyx_v_start = ((int)0);
  int __pyx_v_end = ((int)0);
  PyObject *__pyx_v_ownerpass = ((PyObject *)Py_None);

  /* "src/pyxpdf/pdftotext.pxi":8
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,
 *                     userpass=None, layout = "reading", double fixed_pitch=0,             # <<<<<<<<<<<<<<
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 *                     insert_bom=False, double margin_left=0, double margin_right=0,
 */
  PyObject *__pyx_v_userpass = ((PyObject *)Py_None);
  PyObject *__pyx_v_layout = ((PyObject *)__pyx_n_u_reading);
  double __pyx_v_fixed_pitch = ((double)0.0);
  double __pyx_v_fixed_line_spacing = ((double)0.0);

  /* "src/pyxpdf/pdftotext.pxi":9
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,             # <<<<<<<<<<<<<<
 *                     insert_bom=False, double margin_left=0, double margin_right=0,
 *                     double margin_top=0, double margin_bottom=0):
 */
  PyObject *__pyx_v_discard_clipped = ((PyObject *)Py_False);
  PyObject *__pyx_v_discard_diagonal = ((PyObject *)Py_False);

  /* "src/pyxpdf/pdftotext.pxi":10
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 *                     insert_bom=False, double margin_left=0, double margin_right=0,             # <<<<<<<<<<<<<<
 *                     double margin_top=0, double margin_bottom=0):
 *     cdef string ext_text
 */
  PyObject *__pyx_v_insert_bom = ((PyObject *)Py_False);
  double __pyx_v_margin_left = ((double)0.0);
  double __pyx_v_margin_right = ((double)0.0);
  double __pyx_v_margin_top = ((double)0.0);
  double __pyx_v_margin_bottom = ((double)0.0);
  std::string __pyx_v_ext_text;
  int __pyx_v_err_code;
  std::unique_ptr<GString>  __pyx_v_ownerpassG;
  std::unique_ptr<GString>  __pyx_v_userpassG;
  std::unique_ptr<PDFDoc>  __pyx_v_doc;
  std::unique_ptr<TextOutputDev>  __pyx_v_text_dev;
  std::unique_ptr<TextOutputControl>  __pyx_v_control;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__32)
  __Pyx_RefNannySetupContext("pdftotext_raw", 0);
  __Pyx_TraceCall("pdftotext_raw", __pyx_f[4], 7, 0, __PYX_ERR(4, 7, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_end = __pyx_optional_args->end;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_ownerpass = __pyx_optional_args->ownerpass;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_userpass = __pyx_optional_args->userpass;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_layout = __pyx_optional_args->layout;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_fixed_pitch = __pyx_optional_args->fixed_pitch;
                if (__pyx_optional_args->__pyx_n > 6) {
                  __pyx_v_fixed_line_spacing = __pyx_optional_args->fixed_line_spacing;
                  if (__pyx_optional_args->__pyx_n > 7) {
                    __pyx_v_discard_clipped = __pyx_optional_args->discard_clipped;
                    if (__pyx_optional_args->__pyx_n > 8) {
                      __pyx_v_discard_diagonal = __pyx_optional_args->discard_diagonal;
                      if (__pyx_optional_args->__pyx_n > 9) {
                        __pyx_v_insert_bom = __pyx_optional_args->insert_bom;
                        if (__pyx_optional_args->__pyx_n > 10) {
                          __pyx_v_margin_left = __pyx_optional_args->margin_left;
                          if (__pyx_optional_args->__pyx_n > 11) {
                            __pyx_v_margin_right = __pyx_optional_args->margin_right;
                            if (__pyx_optional_args->__pyx_n > 12) {
                              __pyx_v_margin_top = __pyx_optional_args->margin_top;
                              if (__pyx_optional_args->__pyx_n > 13) {
                                __pyx_v_margin_bottom = __pyx_optional_args->margin_bottom;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  /* "src/pyxpdf/pdftotext.pxi":20
 *     cdef unique_ptr[TextOutputControl] control
 * 
 *     if ownerpass:             # <<<<<<<<<<<<<<
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:
 */
  __Pyx_TraceLine(20,0,__PYX_ERR(4, 20, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ownerpass); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 20, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdftotext.pxi":21
 * 
 *     if ownerpass:
 *         ownerpassG = make_unique[GString](_chars(ownerpass))             # <<<<<<<<<<<<<<
 *     if userpass:
 *         userpassG = make_unique[GString](_chars(userpass))
 */
    __Pyx_TraceLine(21,0,__PYX_ERR(4, 21, __pyx_L1_error))
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_ownerpass); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(4, 21, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyBytes_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(4, 21, __pyx_L1_error)
    __pyx_v_ownerpassG = std::make_unique<GString>(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/pdftotext.pxi":20
 *     cdef unique_ptr[TextOutputControl] control
 * 
 *     if ownerpass:             # <<<<<<<<<<<<<<
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:
 */
  }

  /* "src/pyxpdf/pdftotext.pxi":22
 *     if ownerpass:
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:             # <<<<<<<<<<<<<<
 *         userpassG = make_unique[GString](_chars(userpass))
 * 
 */
  __Pyx_TraceLine(22,0,__PYX_ERR(4, 22, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_userpass); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 22, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdftotext.pxi":23
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:
 *         userpassG = make_unique[GString](_chars(userpass))             # <<<<<<<<<<<<<<
 * 
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())
 */
    __Pyx_TraceLine(23,0,__PYX_ERR(4, 23, __pyx_L1_error))
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_userpass); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(4, 23, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyBytes_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(4, 23, __pyx_L1_error)
    __pyx_v_userpassG = std::make_unique<GString>(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/pdftotext.pxi":22
 *     if ownerpass:
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:             # <<<<<<<<<<<<<<
 *         userpassG = make_unique[GString](_chars(userpass))
 * 
 */
  }

  /* "src/pyxpdf/pdftotext.pxi":25
 *         userpassG = make_unique[GString](_chars(userpass))
 * 
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())             # <<<<<<<<<<<<<<
 *     if deref(doc).isOk() == gFalse:
 *         err_code = deref(doc).getErrorCode()
 */
  __Pyx_TraceLine(25,0,__PYX_ERR(4, 25, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_pdf_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(4, 25, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyBytes_AsWritableString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(4, 25, __pyx_L1_error)
  __pyx_v_doc = std::make_unique<PDFDoc>(__pyx_t_3, __pyx_v_ownerpassG.get(), __pyx_v_userpassG.get());
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/pdftotext.pxi":26
 * 
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())
 *     if deref(doc).isOk() == gFalse:             # <<<<<<<<<<<<<<
 *         err_code = deref(doc).getErrorCode()
 *         raise ErrorCodeMapping[err_code]
 */
  __Pyx_TraceLine(26,0,__PYX_ERR(4, 26, __pyx_L1_error))
  __pyx_t_1 = (((*__pyx_v_doc).isOk() == gFalse) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/pdftotext.pxi":27
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())
 *     if deref(doc).isOk() == gFalse:
 *         err_code = deref(doc).getErrorCode()             # <<<<<<<<<<<<<<
 *         raise ErrorCodeMapping[err_code]
 * 
 */
    __Pyx_TraceLine(27,0,__PYX_ERR(4, 27, __pyx_L1_error))
    __pyx_v_err_code = (*__pyx_v_doc).getErrorCode();

    /* "src/pyxpdf/pdftotext.pxi":28
 *     if deref(doc).isOk() == gFalse:
 *         err_code = deref(doc).getErrorCode()
 *         raise ErrorCodeMapping[err_code]             # <<<<<<<<<<<<<<
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:
 */
    __Pyx_TraceLine(28,0,__PYX_ERR(4, 28, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ErrorCodeMapping); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_err_code, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(4, 28, __pyx_L1_error)

    /* "src/pyxpdf/pdftotext.pxi":26
 * 
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())
 *     if deref(doc).isOk() == gFalse:             # <<<<<<<<<<<<<<
 *         err_code = deref(doc).getErrorCode()
 *         raise ErrorCodeMapping[err_code]
 */
  }

  /* "src/pyxpdf/pdftotext.pxi":30
 *         raise ErrorCodeMapping[err_code]
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:             # <<<<<<<<<<<<<<
 *         raise PDFPermissionError("Copying of text from this document is not allowed.")
 * 
 */
  __Pyx_TraceLine(30,0,__PYX_ERR(4, 30, __pyx_L1_error))
  __pyx_t_1 = (((*__pyx_v_doc).okToCopy(gFalse) == gFalse) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/pdftotext.pxi":31
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:
 *         raise PDFPermissionError("Copying of text from this document is not allowed.")             # <<<<<<<<<<<<<<
 * 
 *     if start < 1:
 */
    __Pyx_TraceLine(31,0,__PYX_ERR(4, 31, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError), __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(4, 31, __pyx_L1_error)

    /* "src/pyxpdf/pdftotext.pxi":30
 *         raise ErrorCodeMapping[err_code]
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:             # <<<<<<<<<<<<<<
 *         raise PDFPermissionError("Copying of text from this document is not allowed.")
 * 
 */
  }

  /* "src/pyxpdf/pdftotext.pxi":33
 *         raise PDFPermissionError("Copying of text from this document is not allowed.")
 * 
 *     if start < 1:             # <<<<<<<<<<<<<<
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():
 */
  __Pyx_TraceLine(33,0,__PYX_ERR(4, 33, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_start < 1) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdftotext.pxi":34
 * 
 *     if start < 1:
 *         start = 1             # <<<<<<<<<<<<<<
 *     if end < 1 or end > deref(doc).getNumPages():
 *         end = deref(doc).getNumPages()
 */
    __Pyx_TraceLine(34,0,__PYX_ERR(4, 34, __pyx_L1_error))
    __pyx_v_start = 1;

    /* "src/pyxpdf/pdftotext.pxi":33
 *         raise PDFPermissionError("Copying of text from this document is not allowed.")
 * 
 *     if start < 1:             # <<<<<<<<<<<<<<
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():
 */
  }

  /* "src/pyxpdf/pdftotext.pxi":35
 *     if start < 1:
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():             # <<<<<<<<<<<<<<
 *         end = deref(doc).getNumPages()
 * 
 */
  __Pyx_TraceLine(35,0,__PYX_ERR(4, 35, __pyx_L1_error))
  __pyx_t_5 = ((__pyx_v_end < 1) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_5 = ((__pyx_v_end > (*__pyx_v_doc).getNumPages()) != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdftotext.pxi":36
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():
 *         end = deref(doc).getNumPages()             # <<<<<<<<<<<<<<
 * 
 *     control = make_unique[TextOutputControl]()
 */
    __Pyx_TraceLine(36,0,__PYX_ERR(4, 36, __pyx_L1_error))
    __pyx_v_end = (*__pyx_v_doc).getNumPages();

    /* "src/pyxpdf/pdftotext.pxi":35
 *     if start < 1:
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():             # <<<<<<<<<<<<<<
 *         end = deref(doc).getNumPages()
 * 
 */
  }

  /* "src/pyxpdf/pdftotext.pxi":38
 *         end = deref(doc).getNumPages()
 * 
 *     control = make_unique[TextOutputControl]()             # <<<<<<<<<<<<<<
 * 
 *     deref(control).fixedPitch = fixed_pitch
 */
  __Pyx_TraceLine(38,0,__PYX_ERR(4, 38, __pyx_L1_error))
  __pyx_v_control = std::make_unique<TextOutputControl>();

  /* "src/pyxpdf/pdftotext.pxi":40
 *     control = make_unique[TextOutputControl]()
 * 
 *     deref(control).fixedPitch = fixed_pitch             # <<<<<<<<<<<<<<
 *     deref(control).fixedLineSpacing = fixed_line_spacing
 * 
 */
  __Pyx_TraceLine(40,0,__PYX_ERR(4, 40, __pyx_L1_error))
  (*__pyx_v_control).fixedPitch = __pyx_v_fixed_pitch;

  /* "src/pyxpdf/pdftotext.pxi":41
 * 
 *     deref(control).fixedPitch = fixed_pitch
 *     deref(control).fixedLineSpacing = fixed_line_spacing             # <<<<<<<<<<<<<<
 * 
 *     deref(control).discardClippedText = to_GBool(discard_clipped)
 */
  __Pyx_TraceLine(41,0,__PYX_ERR(4, 41, __pyx_L1_error))
  (*__pyx_v_control).fixedLineSpacing = __pyx_v_fixed_line_spacing;

  /* "src/pyxpdf/pdftotext.pxi":43
 *     deref(control).fixedLineSpacing = fixed_line_spacing
 * 
 *     deref(control).discardClippedText = to_GBool(discard_clipped)             # <<<<<<<<<<<<<<
 *     deref(control).discardDiagonalText = to_GBool(discard_diagonal)
 *     deref(control).insertBOM = to_GBool(insert_bom)
 */
  __Pyx_TraceLine(43,0,__PYX_ERR(4, 43, __pyx_L1_error))
  (*__pyx_v_control).discardClippedText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_discard_clipped);

  /* "src/pyxpdf/pdftotext.pxi":44
 * 
 *     deref(control).discardClippedText = to_GBool(discard_clipped)
 *     deref(control).discardDiagonalText = to_GBool(discard_diagonal)             # <<<<<<<<<<<<<<
 *     deref(control).insertBOM = to_GBool(insert_bom)
 * 
 */
  __Pyx_TraceLine(44,0,__PYX_ERR(4, 44, __pyx_L1_error))
  (*__pyx_v_control).discardDiagonalText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_discard_diagonal);

  /* "src/pyxpdf/pdftotext.pxi":45
 *     deref(control).discardClippedText = to_GBool(discard_clipped)
 *     deref(control).discardDiagonalText = to_GBool(discard_diagonal)
 *     deref(control).insertBOM = to_GBool(insert_bom)             # <<<<<<<<<<<<<<
 * 
 *     deref(control).marginRight = margin_right
 */
  __Pyx_TraceLine(45,0,__PYX_ERR(4, 45, __pyx_L1_error))
  (*__pyx_v_control).insertBOM = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_insert_bom);

  /* "src/pyxpdf/pdftotext.pxi":47
 *     deref(control).insertBOM = to_GBool(insert_bom)
 * 
 *     deref(control).marginRight = margin_right             # <<<<<<<<<<<<<<
 *     deref(control).marginLeft = margin_left
 *     deref(control).marginTop = margin_top
 */
  __Pyx_TraceLine(47,0,__PYX_ERR(4, 47, __pyx_L1_error))
  (*__pyx_v_control).marginRight = __pyx_v_margin_right;

  /* "src/pyxpdf/pdftotext.pxi":48
 * 
 *     deref(control).marginRight = margin_right
 *     deref(control).marginLeft = margin_left             # <<<<<<<<<<<<<<
 *     deref(control).marginTop = margin_top
 *     deref(control).marginBottom = margin_bottom
 */
  __Pyx_TraceLine(48,0,__PYX_ERR(4, 48, __pyx_L1_error))
  (*__pyx_v_control).marginLeft = __pyx_v_margin_left;

  /* "src/pyxpdf/pdftotext.pxi":49
 *     deref(control).marginRight = margin_right
 *     deref(control).marginLeft = margin_left
 *     deref(control).marginTop = margin_top             # <<<<<<<<<<<<<<
 *     deref(control).marginBottom = margin_bottom
 * 
 */
  __Pyx_TraceLine(49,0,__PYX_ERR(4, 49, __pyx_L1_error))
  (*__pyx_v_control).marginTop = __pyx_v_margin_top;

  /* "src/pyxpdf/pdftotext.pxi":50
 *     deref(control).marginLeft = margin_left
 *     deref(control).marginTop = margin_top
 *     deref(control).marginBottom = margin_bottom             # <<<<<<<<<<<<<<
 * 
 *     if layout == "table":
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(4, 50, __pyx_L1_error))
  (*__pyx_v_control).marginBottom = __pyx_v_margin_bottom;

  /* "src/pyxpdf/pdftotext.pxi":52
 *     deref(control).marginBottom = margin_bottom
 * 
 *     if layout == "table":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":
 */
  __Pyx_TraceLine(52,0,__PYX_ERR(4, 52, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_layout, __pyx_n_u_table, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 52, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdftotext.pxi":53
 * 
 *     if layout == "table":
 *         deref(control).mode = TextOutputMode.textOutTableLayout             # <<<<<<<<<<<<<<
 *     elif layout == "physical":
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 */
    __Pyx_TraceLine(53,0,__PYX_ERR(4, 53, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutTableLayout;

    /* "src/pyxpdf/pdftotext.pxi":52
 *     deref(control).marginBottom = margin_bottom
 * 
 *     if layout == "table":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":
 */
    goto __pyx_L11;
  }

  /* "src/pyxpdf/pdftotext.pxi":54
 *     if layout == "table":
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":
 */
  __Pyx_TraceLine(54,0,__PYX_ERR(4, 54, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_layout, __pyx_n_u_physical, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 54, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdftotext.pxi":55
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":
 *         deref(control).mode = TextOutputMode.textOutPhysLayout             # <<<<<<<<<<<<<<
 *     elif layout == "simple":
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 */
    __Pyx_TraceLine(55,0,__PYX_ERR(4, 55, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutPhysLayout;

    /* "src/pyxpdf/pdftotext.pxi":54
 *     if layout == "table":
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":
 */
    goto __pyx_L11;
  }

  /* "src/pyxpdf/pdftotext.pxi":56
 *     elif layout == "physical":
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":
 */
  __Pyx_TraceLine(56,0,__PYX_ERR(4, 56, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_layout, __pyx_n_u_simple, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 56, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdftotext.pxi":57
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout             # <<<<<<<<<<<<<<
 *     elif layout == "lineprinter":
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 */
    __Pyx_TraceLine(57,0,__PYX_ERR(4, 57, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutSimpleLayout;

    /* "src/pyxpdf/pdftotext.pxi":56
 *     elif layout == "physical":
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":
 */
    goto __pyx_L11;
  }

  /* "src/pyxpdf/pdftotext.pxi":58
 *     elif layout == "simple":
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":
 */
  __Pyx_TraceLine(58,0,__PYX_ERR(4, 58, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_layout, __pyx_n_u_lineprinter, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 58, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdftotext.pxi":59
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":
 *         deref(control).mode = TextOutputMode.textOutLinePrinter             # <<<<<<<<<<<<<<
 *     elif layout == "raw":
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 */
    __Pyx_TraceLine(59,0,__PYX_ERR(4, 59, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutLinePrinter;

    /* "src/pyxpdf/pdftotext.pxi":58
 *     elif layout == "simple":
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":
 */
    goto __pyx_L11;
  }

  /* "src/pyxpdf/pdftotext.pxi":60
 *     elif layout == "lineprinter":
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":
 */
  __Pyx_TraceLine(60,0,__PYX_ERR(4, 60, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_layout, __pyx_n_u_raw, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 60, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/pdftotext.pxi":61
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":
 *         deref(control).mode = TextOutputMode.textOutRawOrder             # <<<<<<<<<<<<<<
 *     elif layout == "reading":
 *         deref(control).mode = TextOutputMode.textOutReadingOrder
 */
    __Pyx_TraceLine(61,0,__PYX_ERR(4, 61, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutRawOrder;

    /* "src/pyxpdf/pdftotext.pxi":60
 *     elif layout == "lineprinter":
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":
 */
    goto __pyx_L11;
  }

  /* "src/pyxpdf/pdftotext.pxi":62
 *     elif layout == "raw":
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutReadingOrder
 *     else:
 */
  __Pyx_TraceLine(62,0,__PYX_ERR(4, 62, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_layout, __pyx_n_u_reading, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 62, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "src/pyxpdf/pdftotext.pxi":63
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":
 *         deref(control).mode = TextOutputMode.textOutReadingOrder             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError(f"Unknown layout - {layout}.")
 */
    __Pyx_TraceLine(63,0,__PYX_ERR(4, 63, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutReadingOrder;

    /* "src/pyxpdf/pdftotext.pxi":62
 *     elif layout == "raw":
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutReadingOrder
 *     else:
 */
    goto __pyx_L11;
  }

  /* "src/pyxpdf/pdftotext.pxi":65
 *         deref(control).mode = TextOutputMode.textOutReadingOrder
 *     else:
 *         raise ValueError(f"Unknown layout - {layout}.")             # <<<<<<<<<<<<<<
 * 
 *     text_dev = make_unique[TextOutputDev](&append_to_cpp_string, &ext_text, control.get())
 */
  __Pyx_TraceLine(65,0,__PYX_ERR(4, 65, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Unknown_layout);
    __pyx_t_6 += 17;
    __Pyx_GIVEREF(__pyx_kp_u_Unknown_layout);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Unknown_layout);
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_layout, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u_);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u_);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_);
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(4, 65, __pyx_L1_error)
  }
  __pyx_L11:;

  /* "src/pyxpdf/pdftotext.pxi":67
 *         raise ValueError(f"Unknown layout - {layout}.")
 * 
 *     text_dev = make_unique[TextOutputDev](&append_to_cpp_string, &ext_text, control.get())             # <<<<<<<<<<<<<<
 *     if deref(text_dev).isOk() == gFalse:
 *         raise XPDFConfigError("Failed to create TextOutputDev with given options")
 */
  __Pyx_TraceLine(67,0,__PYX_ERR(4, 67, __pyx_L1_error))
  __pyx_v_text_dev = std::make_unique<TextOutputDev>((&__pyx_f_6pyxpdf_4xpdf_append_to_cpp_string), (&__pyx_v_ext_text), __pyx_v_control.get());

  /* "src/pyxpdf/pdftotext.pxi":68
 * 
 *     text_dev = make_unique[TextOutputDev](&append_to_cpp_string, &ext_text, control.get())
 *     if deref(text_dev).isOk() == gFalse:             # <<<<<<<<<<<<<<
 *         raise XPDFConfigError("Failed to create TextOutputDev with given options")
 * 
 */
  __Pyx_TraceLine(68,0,__PYX_ERR(4, 68, __pyx_L1_error))
  __pyx_t_1 = (((*__pyx_v_text_dev).isOk() == gFalse) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/pdftotext.pxi":69
 *     text_dev = make_unique[TextOutputDev](&append_to_cpp_string, &ext_text, control.get())
 *     if deref(text_dev).isOk() == gFalse:
 *         raise XPDFConfigError("Failed to create TextOutputDev with given options")             # <<<<<<<<<<<<<<
 * 
 *     deref(doc).displayPages(text_dev.get(), start, end, 72, 72, 0, gFalse, gTrue, gFalse)
 */
    __Pyx_TraceLine(69,0,__PYX_ERR(4, 69, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError), __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(4, 69, __pyx_L1_error)

    /* "src/pyxpdf/pdftotext.pxi":68
 * 
 *     text_dev = make_unique[TextOutputDev](&append_to_cpp_string, &ext_text, control.get())
 *     if deref(text_dev).isOk() == gFalse:             # <<<<<<<<<<<<<<
 *         raise XPDFConfigError("Failed to create TextOutputDev with given options")
 * 
 */
  }

  /* "src/pyxpdf/pdftotext.pxi":71
 *         raise XPDFConfigError("Failed to create TextOutputDev with given options")
 * 
 *     deref(doc).displayPages(text_dev.get(), start, end, 72, 72, 0, gFalse, gTrue, gFalse)             # <<<<<<<<<<<<<<
 *     return ext_text
 */
  __Pyx_TraceLine(71,0,__PYX_ERR(4, 71, __pyx_L1_error))
  (*__pyx_v_doc).displayPages(__pyx_v_text_dev.get(), __pyx_v_start, __pyx_v_end, 72.0, 72.0, 0, gFalse, gTrue, gFalse, NULL);

  /* "src/pyxpdf/pdftotext.pxi":72
 * 
 *     deref(doc).displayPages(text_dev.get(), start, end, 72, 72, 0, gFalse, gTrue, gFalse)
 *     return ext_text             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(72,0,__PYX_ERR(4, 72, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_ext_text); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/pdftotext.pxi":7
 * 
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,             # <<<<<<<<<<<<<<
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.pdftotext_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_1pdftotext_raw(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_pdftotext_raw[] = "pdftotext_raw(pdf_file, int start=0, int end=0, ownerpass=None, userpass=None, layout=u'reading', double fixed_pitch=0, double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False, insert_bom=False, double margin_left=0, double margin_right=0, double margin_top=0, double margin_bottom=0)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_1pdftotext_raw = {"pdftotext_raw", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_1pdftotext_raw, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_pdftotext_raw};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_1pdftotext_raw(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pdf_file = 0;
  int __pyx_v_start;
  int __pyx_v_end;
  PyObject *__pyx_v_ownerpass = 0;
  PyObject *__pyx_v_userpass = 0;
  PyObject *__pyx_v_layout = 0;
  double __pyx_v_fixed_pitch;
  double __pyx_v_fixed_line_spacing;
  PyObject *__pyx_v_discard_clipped = 0;
  PyObject *__pyx_v_discard_diagonal = 0;
  PyObject *__pyx_v_insert_bom = 0;
  double __pyx_v_margin_left;
  double __pyx_v_margin_right;
  double __pyx_v_margin_top;
  double __pyx_v_margin_bottom;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdftotext_raw (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pdf_file,&__pyx_n_s_start,&__pyx_n_s_end,&__pyx_n_s_ownerpass,&__pyx_n_s_userpass,&__pyx_n_s_layout,&__pyx_n_s_fixed_pitch,&__pyx_n_s_fixed_line_spacing,&__pyx_n_s_discard_clipped,&__pyx_n_s_discard_diagonal,&__pyx_n_s_insert_bom,&__pyx_n_s_margin_left,&__pyx_n_s_margin_right,&__pyx_n_s_margin_top,&__pyx_n_s_margin_bottom,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);

    /* "src/pyxpdf/pdftotext.pxi":8
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,
 *                     userpass=None, layout = "reading", double fixed_pitch=0,             # <<<<<<<<<<<<<<
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 *                     insert_bom=False, double margin_left=0, double margin_right=0,
 */
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)__pyx_n_u_reading);

    /* "src/pyxpdf/pdftotext.pxi":9
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,             # <<<<<<<<<<<<<<
 *                     insert_bom=False, double margin_left=0, double margin_right=0,
 *                     double margin_top=0, double margin_bottom=0):
 */
    values[8] = ((PyObject *)Py_False);
    values[9] = ((PyObject *)Py_False);

    /* "src/pyxpdf/pdftotext.pxi":10
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 *                     insert_bom=False, double margin_left=0, double margin_right=0,             # <<<<<<<<<<<<<<
 *                     double margin_top=0, double margin_bottom=0):
 *     cdef string ext_text
 */
    values[10] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdf_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ownerpass);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_userpass);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_layout);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fixed_pitch);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fixed_line_spacing);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_discard_clipped);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_discard_diagonal);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_insert_bom);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_left);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_right);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_top);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_bottom);
          if (value) { values[14] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdftotext_raw") < 0)) __PYX_ERR(4, 7, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pdf_file = values[0];
    if (values[1]) {
      __pyx_v_start = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 7, __pyx_L3_error)
    } else {
      __pyx_v_start = ((int)0);
    }
    if (values[2]) {
      __pyx_v_end = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_end == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 7, __pyx_L3_error)
    } else {
      __pyx_v_end = ((int)0);
    }
    __pyx_v_ownerpass = values[3];
    __pyx_v_userpass = values[4];
    __pyx_v_layout = values[5];
    if (values[6]) {
      __pyx_v_fixed_pitch = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_fixed_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 8, __pyx_L3_error)
    } else {
      __pyx_v_fixed_pitch = ((double)0.0);
    }
    if (values[7]) {
      __pyx_v_fixed_line_spacing = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_fixed_line_spacing == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 9, __pyx_L3_error)
    } else {
      __pyx_v_fixed_line_spacing = ((double)0.0);
    }
    __pyx_v_discard_clipped = values[8];
    __pyx_v_discard_diagonal = values[9];
    __pyx_v_insert_bom = values[10];
    if (values[11]) {
      __pyx_v_margin_left = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_margin_left == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 10, __pyx_L3_error)
    } else {
      __pyx_v_margin_left = ((double)0.0);
    }
    if (values[12]) {
      __pyx_v_margin_right = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_margin_right == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 10, __pyx_L3_error)
    } else {
      __pyx_v_margin_right = ((double)0.0);
    }
    if (values[13]) {
      __pyx_v_margin_top = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_margin_top == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 11, __pyx_L3_error)
    } else {
      __pyx_v_margin_top = ((double)0.0);
    }
    if (values[14]) {
      __pyx_v_margin_bottom = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_margin_bottom == (double)-1) && PyErr_Occurred())) __PYX_ERR(4, 11, __pyx_L3_error)
    } else {
      __pyx_v_margin_bottom = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdftotext_raw", 0, 1, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 7, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.pdftotext_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_pdftotext_raw(__pyx_self, __pyx_v_pdf_file, __pyx_v_start, __pyx_v_end, __pyx_v_ownerpass, __pyx_v_userpass, __pyx_v_layout, __pyx_v_fixed_pitch, __pyx_v_fixed_line_spacing, __pyx_v_discard_clipped, __pyx_v_discard_diagonal, __pyx_v_insert_bom, __pyx_v_margin_left, __pyx_v_margin_right, __pyx_v_margin_top, __pyx_v_margin_bottom);

  /* "src/pyxpdf/pdftotext.pxi":7
 * 
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,             # <<<<<<<<<<<<<<
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_pdftotext_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pdf_file, int __pyx_v_start, int __pyx_v_end, PyObject *__pyx_v_ownerpass, PyObject *__pyx_v_userpass, PyObject *__pyx_v_layout, double __pyx_v_fixed_pitch, double __pyx_v_fixed_line_spacing, PyObject *__pyx_v_discard_clipped, PyObject *__pyx_v_discard_diagonal, PyObject *__pyx_v_insert_bom, double __pyx_v_margin_left, double __pyx_v_margin_right, double __pyx_v_margin_top, double __pyx_v_margin_bottom) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__32)
  __Pyx_RefNannySetupContext("pdftotext_raw", 0);
  __Pyx_TraceCall("pdftotext_raw (wrapper)", __pyx_f[4], 7, 0, __PYX_ERR(4, 7, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 14;
  __pyx_t_2.start = __pyx_v_start;
  __pyx_t_2.end = __pyx_v_end;
  __pyx_t_2.ownerpass = __pyx_v_ownerpass;
  __pyx_t_2.userpass = __pyx_v_userpass;
  __pyx_t_2.layout = __pyx_v_layout;
  __pyx_t_2.fixed_pitch = __pyx_v_fixed_pitch;
  __pyx_t_2.fixed_line_spacing = __pyx_v_fixed_line_spacing;
  __pyx_t_2.discard_clipped = __pyx_v_discard_clipped;
  __pyx_t_2.discard_diagonal = __pyx_v_discard_diagonal;
  __pyx_t_2.insert_bom = __pyx_v_insert_bom;
  __pyx_t_2.margin_left = __pyx_v_margin_left;
  __pyx_t_2.margin_right = __pyx_v_margin_right;
  __pyx_t_2.margin_top = __pyx_v_margin_top;
  __pyx_t_2.margin_bottom = __pyx_v_margin_bottom;
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_pdftotext_raw(__pyx_v_pdf_file, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.pdftotext_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/pdfoutput.pxi":8
 *     All PDF Output Device inherit from this.
 *     """
 *     def get(self, int page_no, **kwargs):             # <<<<<<<<<<<<<<
 *         """Get the output of `page_no` indexed page
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_1get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_15PDFOutputDevice_get[] = "PDFOutputDevice.get(self, int page_no, **kwargs)\nGet the output of `page_no` indexed page\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_15PDFOutputDevice_1get = {"get", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_1get, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_15PDFOutputDevice_get};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_1get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED int __pyx_v_page_no;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_page_no,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_page_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "get") < 0)) __PYX_ERR(5, 8, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_page_no = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_page_no == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 8, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 8, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFOutputDevice.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_15PDFOutputDevice_get(((struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *)__pyx_v_self), __pyx_v_page_no, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_15PDFOutputDevice_get(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *__pyx_v_self, CYTHON_UNUSED int __pyx_v_page_no, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__35)
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_TraceCall("get", __pyx_f[5], 8, 0, __PYX_ERR(5, 8, __pyx_L1_error));

  /* "src/pyxpdf/pdfoutput.pxi":11
 *         """Get the output of `page_no` indexed page
 *         """
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(5, 11, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 11, __pyx_L1_error)

  /* "src/pyxpdf/pdfoutput.pxi":8
 *     All PDF Output Device inherit from this.
 *     """
 *     def get(self, int page_no, **kwargs):             # <<<<<<<<<<<<<<
 *         """Get the output of `page_no` indexed page
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFOutputDevice.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_15PDFOutputDevice_2__reduce_cython__[] = "PDFOutputDevice.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_15PDFOutputDevice_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_15PDFOutputDevice_2__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_15PDFOutputDevice_2__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_15PDFOutputDevice_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__36)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PDFOutputDevice); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFOutputDevice__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PDFOutputDevice); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFOutputDevice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFOutputDevice__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_15PDFOutputDevice_4__setstate_cython__[] = "PDFOutputDevice.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_15PDFOutputDevice_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_15PDFOutputDevice_4__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_15PDFOutputDevice_4__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_15PDFOutputDevice_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__37)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFOutputDevice__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFOutputDevice__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFOutputDevice__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFOutputDevice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":103
 *     cdef TextOutputControl _c_control
 * 
 *     def __cinit__(self, mode = "reading", double fixed_pitch = 0,             # <<<<<<<<<<<<<<
 *                   double fixed_line_spacing=0, enable_html=False, clip_text=False,
 *                   discard_diagonal=False, discard_invisible=False,
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_11TextControl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_11TextControl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_mode = 0;
  double __pyx_v_fixed_pitch;
  double __pyx_v_fixed_line_spacing;
  PyObject *__pyx_v_enable_html = 0;
  PyObject *__pyx_v_clip_text = 0;
  PyObject *__pyx_v_discard_diagonal = 0;
  PyObject *__pyx_v_discard_invisible = 0;
  PyObject *__pyx_v_discard_clipped = 0;
  PyObject *__pyx_v_insert_bom = 0;
  double __pyx_v_margin_left;
  double __pyx_v_margin_right;
  double __pyx_v_margin_top;
  double __pyx_v_margin_bottom;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,&__pyx_n_s_fixed_pitch,&__pyx_n_s_fixed_line_spacing,&__pyx_n_s_enable_html,&__pyx_n_s_clip_text,&__pyx_n_s_discard_diagonal,&__pyx_n_s_discard_invisible,&__pyx_n_s_discard_clipped,&__pyx_n_s_insert_bom,&__pyx_n_s_margin_left,&__pyx_n_s_margin_right,&__pyx_n_s_margin_top,&__pyx_n_s_margin_bottom,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)__pyx_n_u_reading);

    /* "src/pyxpdf/textoutput.pxi":104
 * 
 *     def __cinit__(self, mode = "reading", double fixed_pitch = 0,
 *                   double fixed_line_spacing=0, enable_html=False, clip_text=False,             # <<<<<<<<<<<<<<
 *                   discard_diagonal=False, discard_invisible=False,
 *                   discard_clipped=False, insert_bom=False, double margin_left=0,
 */
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_False);

    /* "src/pyxpdf/textoutput.pxi":105
 *     def __cinit__(self, mode = "reading", double fixed_pitch = 0,
 *                   double fixed_line_spacing=0, enable_html=False, clip_text=False,
 *                   discard_diagonal=False, discard_invisible=False,             # <<<<<<<<<<<<<<
 *                   discard_clipped=False, insert_bom=False, double margin_left=0,
 *                   double margin_right=0, double margin_top=0, double margin_bottom=0):
 */
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);

    /* "src/pyxpdf/textoutput.pxi":106
 *                   double fixed_line_spacing=0, enable_html=False, clip_text=False,
 *                   discard_diagonal=False, discard_invisible=False,
 *                   discard_clipped=False, insert_bom=False, double margin_left=0,             # <<<<<<<<<<<<<<
 *                   double margin_right=0, double margin_top=0, double margin_bottom=0):
 * 
 */
    values[7] = ((PyObject *)Py_False);
    values[8] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fixed_pitch);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fixed_line_spacing);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enable_html);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clip_text);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_discard_diagonal);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_discard_invisible);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_discard_clipped);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_insert_bom);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_left);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_right);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_top);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_bottom);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(8, 103, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mode = values[0];
    if (values[1]) {
      __pyx_v_fixed_pitch = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_fixed_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 103, __pyx_L3_error)
    } else {
      __pyx_v_fixed_pitch = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_fixed_line_spacing = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_fixed_line_spacing == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 104, __pyx_L3_error)
    } else {
      __pyx_v_fixed_line_spacing = ((double)0.0);
    }
    __pyx_v_enable_html = values[3];
    __pyx_v_clip_text = values[4];
    __pyx_v_discard_diagonal = values[5];
    __pyx_v_discard_invisible = values[6];
    __pyx_v_discard_clipped = values[7];
    __pyx_v_insert_bom = values[8];
    if (values[9]) {
      __pyx_v_margin_left = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_margin_left == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 106, __pyx_L3_error)
    } else {
      __pyx_v_margin_left = ((double)0.0);
    }
    if (values[10]) {
      __pyx_v_margin_right = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_margin_right == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 107, __pyx_L3_error)
    } else {
      __pyx_v_margin_right = ((double)0.0);
    }
    if (values[11]) {
      __pyx_v_margin_top = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_margin_top == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 107, __pyx_L3_error)
    } else {
      __pyx_v_margin_top = ((double)0.0);
    }
    if (values[12]) {
      __pyx_v_margin_bottom = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_margin_bottom == (double)-1) && PyErr_Occurred())) __PYX_ERR(8, 107, __pyx_L3_error)
    } else {
      __pyx_v_margin_bottom = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 103, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.TextControl.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_11TextControl___cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)__pyx_v_self), __pyx_v_mode, __pyx_v_fixed_pitch, __pyx_v_fixed_line_spacing, __pyx_v_enable_html, __pyx_v_clip_text, __pyx_v_discard_diagonal, __pyx_v_discard_invisible, __pyx_v_discard_clipped, __pyx_v_insert_bom, __pyx_v_margin_left, __pyx_v_margin_right, __pyx_v_margin_top, __pyx_v_margin_bottom);

  /* "src/pyxpdf/textoutput.pxi":103
 *     cdef TextOutputControl _c_control
 * 
 *     def __cinit__(self, mode = "reading", double fixed_pitch = 0,             # <<<<<<<<<<<<<<
 *                   double fixed_line_spacing=0, enable_html=False, clip_text=False,
 *                   discard_diagonal=False, discard_invisible=False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_11TextControl___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self, PyObject *__pyx_v_mode, double __pyx_v_fixed_pitch, double __pyx_v_fixed_line_spacing, PyObject *__pyx_v_enable_html, PyObject *__pyx_v_clip_text, PyObject *__pyx_v_discard_diagonal, PyObject *__pyx_v_discard_invisible, PyObject *__pyx_v_discard_clipped, PyObject *__pyx_v_insert_bom, double __pyx_v_margin_left, double __pyx_v_margin_right, double __pyx_v_margin_top, double __pyx_v_margin_bottom) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[8], 103, 0, __PYX_ERR(8, 103, __pyx_L1_error));

  /* "src/pyxpdf/textoutput.pxi":109
 *                   double margin_right=0, double margin_top=0, double margin_bottom=0):
 * 
 *         self._c_control.fixedPitch = fixed_pitch             # <<<<<<<<<<<<<<
 *         self._c_control.fixedLineSpacing = fixed_line_spacing
 * 
 */
  __Pyx_TraceLine(109,0,__PYX_ERR(8, 109, __pyx_L1_error))
  __pyx_v_self->_c_control.fixedPitch = __pyx_v_fixed_pitch;

  /* "src/pyxpdf/textoutput.pxi":110
 * 
 *         self._c_control.fixedPitch = fixed_pitch
 *         self._c_control.fixedLineSpacing = fixed_line_spacing             # <<<<<<<<<<<<<<
 * 
 *         self._c_control.html = to_GBool(enable_html)
 */
  __Pyx_TraceLine(110,0,__PYX_ERR(8, 110, __pyx_L1_error))
  __pyx_v_self->_c_control.fixedLineSpacing = __pyx_v_fixed_line_spacing;

  /* "src/pyxpdf/textoutput.pxi":112
 *         self._c_control.fixedLineSpacing = fixed_line_spacing
 * 
 *         self._c_control.html = to_GBool(enable_html)             # <<<<<<<<<<<<<<
 *         self._c_control.clipText = to_GBool(clip_text)
 *         self._c_control.discardDiagonalText = to_GBool(discard_diagonal)
 */
  __Pyx_TraceLine(112,0,__PYX_ERR(8, 112, __pyx_L1_error))
  __pyx_v_self->_c_control.html = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_enable_html);

  /* "src/pyxpdf/textoutput.pxi":113
 * 
 *         self._c_control.html = to_GBool(enable_html)
 *         self._c_control.clipText = to_GBool(clip_text)             # <<<<<<<<<<<<<<
 *         self._c_control.discardDiagonalText = to_GBool(discard_diagonal)
 *         self._c_control.discardInvisibleText = to_GBool(discard_invisible)
 */
  __Pyx_TraceLine(113,0,__PYX_ERR(8, 113, __pyx_L1_error))
  __pyx_v_self->_c_control.clipText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_clip_text);

  /* "src/pyxpdf/textoutput.pxi":114
 *         self._c_control.html = to_GBool(enable_html)
 *         self._c_control.clipText = to_GBool(clip_text)
 *         self._c_control.discardDiagonalText = to_GBool(discard_diagonal)             # <<<<<<<<<<<<<<
 *         self._c_control.discardInvisibleText = to_GBool(discard_invisible)
 *         self._c_control.discardClippedText = to_GBool(discard_clipped)
 */
  __Pyx_TraceLine(114,0,__PYX_ERR(8, 114, __pyx_L1_error))
  __pyx_v_self->_c_control.discardDiagonalText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_discard_diagonal);

  /* "src/pyxpdf/textoutput.pxi":115
 *         self._c_control.clipText = to_GBool(clip_text)
 *         self._c_control.discardDiagonalText = to_GBool(discard_diagonal)
 *         self._c_control.discardInvisibleText = to_GBool(discard_invisible)             # <<<<<<<<<<<<<<
 *         self._c_control.discardClippedText = to_GBool(discard_clipped)
 *         self._c_control.insertBOM = to_GBool(insert_bom)
 */
  __Pyx_TraceLine(115,0,__PYX_ERR(8, 115, __pyx_L1_error))
  __pyx_v_self->_c_control.discardInvisibleText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_discard_invisible);

  /* "src/pyxpdf/textoutput.pxi":116
 *         self._c_control.discardDiagonalText = to_GBool(discard_diagonal)
 *         self._c_control.discardInvisibleText = to_GBool(discard_invisible)
 *         self._c_control.discardClippedText = to_GBool(discard_clipped)             # <<<<<<<<<<<<<<
 *         self._c_control.insertBOM = to_GBool(insert_bom)
 * 
 */
  __Pyx_TraceLine(116,0,__PYX_ERR(8, 116, __pyx_L1_error))
  __pyx_v_self->_c_control.discardClippedText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_discard_clipped);

  /* "src/pyxpdf/textoutput.pxi":117
 *         self._c_control.discardInvisibleText = to_GBool(discard_invisible)
 *         self._c_control.discardClippedText = to_GBool(discard_clipped)
 *         self._c_control.insertBOM = to_GBool(insert_bom)             # <<<<<<<<<<<<<<
 * 
 *         self._c_control.marginRight = margin_right
 */
  __Pyx_TraceLine(117,0,__PYX_ERR(8, 117, __pyx_L1_error))
  __pyx_v_self->_c_control.insertBOM = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_insert_bom);

  /* "src/pyxpdf/textoutput.pxi":119
 *         self._c_control.insertBOM = to_GBool(insert_bom)
 * 
 *         self._c_control.marginRight = margin_right             # <<<<<<<<<<<<<<
 *         self._c_control.marginLeft = margin_left
 *         self._c_control.marginTop = margin_top
 */
  __Pyx_TraceLine(119,0,__PYX_ERR(8, 119, __pyx_L1_error))
  __pyx_v_self->_c_control.marginRight = __pyx_v_margin_right;

  /* "src/pyxpdf/textoutput.pxi":120
 * 
 *         self._c_control.marginRight = margin_right
 *         self._c_control.marginLeft = margin_left             # <<<<<<<<<<<<<<
 *         self._c_control.marginTop = margin_top
 *         self._c_control.marginBottom = margin_bottom
 */
  __Pyx_TraceLine(120,0,__PYX_ERR(8, 120, __pyx_L1_error))
  __pyx_v_self->_c_control.marginLeft = __pyx_v_margin_left;

  /* "src/pyxpdf/textoutput.pxi":121
 *         self._c_control.marginRight = margin_right
 *         self._c_control.marginLeft = margin_left
 *         self._c_control.marginTop = margin_top             # <<<<<<<<<<<<<<
 *         self._c_control.marginBottom = margin_bottom
 * 
 */
  __Pyx_TraceLine(121,0,__PYX_ERR(8, 121, __pyx_L1_error))
  __pyx_v_self->_c_control.marginTop = __pyx_v_margin_top;

  /* "src/pyxpdf/textoutput.pxi":122
 *         self._c_control.marginLeft = margin_left
 *         self._c_control.marginTop = margin_top
 *         self._c_control.marginBottom = margin_bottom             # <<<<<<<<<<<<<<
 * 
 *         if mode == "physical":
 */
  __Pyx_TraceLine(122,0,__PYX_ERR(8, 122, __pyx_L1_error))
  __pyx_v_self->_c_control.marginBottom = __pyx_v_margin_bottom;

  /* "src/pyxpdf/textoutput.pxi":124
 *         self._c_control.marginBottom = margin_bottom
 * 
 *         if mode == "physical":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutPhysLayout
 *         elif mode == "table":
 */
  __Pyx_TraceLine(124,0,__PYX_ERR(8, 124, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_physical, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(8, 124, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/textoutput.pxi":125
 * 
 *         if mode == "physical":
 *             self._c_control.mode = TextOutputMode.textOutPhysLayout             # <<<<<<<<<<<<<<
 *         elif mode == "table":
 *             self._c_control.mode = TextOutputMode.textOutTableLayout
 */
    __Pyx_TraceLine(125,0,__PYX_ERR(8, 125, __pyx_L1_error))
    __pyx_v_self->_c_control.mode = textOutPhysLayout;

    /* "src/pyxpdf/textoutput.pxi":124
 *         self._c_control.marginBottom = margin_bottom
 * 
 *         if mode == "physical":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutPhysLayout
 *         elif mode == "table":
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/textoutput.pxi":126
 *         if mode == "physical":
 *             self._c_control.mode = TextOutputMode.textOutPhysLayout
 *         elif mode == "table":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutTableLayout
 *         elif mode == "simple":
 */
  __Pyx_TraceLine(126,0,__PYX_ERR(8, 126, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_table, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(8, 126, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/textoutput.pxi":127
 *             self._c_control.mode = TextOutputMode.textOutPhysLayout
 *         elif mode == "table":
 *             self._c_control.mode = TextOutputMode.textOutTableLayout             # <<<<<<<<<<<<<<
 *         elif mode == "simple":
 *             self._c_control.mode = TextOutputMode.textOutSimpleLayout
 */
    __Pyx_TraceLine(127,0,__PYX_ERR(8, 127, __pyx_L1_error))
    __pyx_v_self->_c_control.mode = textOutTableLayout;

    /* "src/pyxpdf/textoutput.pxi":126
 *         if mode == "physical":
 *             self._c_control.mode = TextOutputMode.textOutPhysLayout
 *         elif mode == "table":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutTableLayout
 *         elif mode == "simple":
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/textoutput.pxi":128
 *         elif mode == "table":
 *             self._c_control.mode = TextOutputMode.textOutTableLayout
 *         elif mode == "simple":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutSimpleLayout
 *         elif mode == "lineprinter":
 */
  __Pyx_TraceLine(128,0,__PYX_ERR(8, 128, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_simple, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(8, 128, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/textoutput.pxi":129
 *             self._c_control.mode = TextOutputMode.textOutTableLayout
 *         elif mode == "simple":
 *             self._c_control.mode = TextOutputMode.textOutSimpleLayout             # <<<<<<<<<<<<<<
 *         elif mode == "lineprinter":
 *             self._c_control.mode = TextOutputMode.textOutLinePrinter
 */
    __Pyx_TraceLine(129,0,__PYX_ERR(8, 129, __pyx_L1_error))
    __pyx_v_self->_c_control.mode = textOutSimpleLayout;

    /* "src/pyxpdf/textoutput.pxi":128
 *         elif mode == "table":
 *             self._c_control.mode = TextOutputMode.textOutTableLayout
 *         elif mode == "simple":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutSimpleLayout
 *         elif mode == "lineprinter":
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/textoutput.pxi":130
 *         elif mode == "simple":
 *             self._c_control.mode = TextOutputMode.textOutSimpleLayout
 *         elif mode == "lineprinter":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutLinePrinter
 *         elif mode == "raw":
 */
  __Pyx_TraceLine(130,0,__PYX_ERR(8, 130, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_lineprinter, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(8, 130, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/textoutput.pxi":131
 *             self._c_control.mode = TextOutputMode.textOutSimpleLayout
 *         elif mode == "lineprinter":
 *             self._c_control.mode = TextOutputMode.textOutLinePrinter             # <<<<<<<<<<<<<<
 *         elif mode == "raw":
 *             self._c_control.mode = TextOutputMode.textOutRawOrder
 */
    __Pyx_TraceLine(131,0,__PYX_ERR(8, 131, __pyx_L1_error))
    __pyx_v_self->_c_control.mode = textOutLinePrinter;

    /* "src/pyxpdf/textoutput.pxi":130
 *         elif mode == "simple":
 *             self._c_control.mode = TextOutputMode.textOutSimpleLayout
 *         elif mode == "lineprinter":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutLinePrinter
 *         elif mode == "raw":
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/textoutput.pxi":132
 *         elif mode == "lineprinter":
 *             self._c_control.mode = TextOutputMode.textOutLinePrinter
 *         elif mode == "raw":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutRawOrder
 *         elif mode == "reading":
 */
  __Pyx_TraceLine(132,0,__PYX_ERR(8, 132, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_raw, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(8, 132, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/textoutput.pxi":133
 *             self._c_control.mode = TextOutputMode.textOutLinePrinter
 *         elif mode == "raw":
 *             self._c_control.mode = TextOutputMode.textOutRawOrder             # <<<<<<<<<<<<<<
 *         elif mode == "reading":
 *             self._c_control.mode = TextOutputMode.textOutReadingOrder
 */
    __Pyx_TraceLine(133,0,__PYX_ERR(8, 133, __pyx_L1_error))
    __pyx_v_self->_c_control.mode = textOutRawOrder;

    /* "src/pyxpdf/textoutput.pxi":132
 *         elif mode == "lineprinter":
 *             self._c_control.mode = TextOutputMode.textOutLinePrinter
 *         elif mode == "raw":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutRawOrder
 *         elif mode == "reading":
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/textoutput.pxi":134
 *         elif mode == "raw":
 *             self._c_control.mode = TextOutputMode.textOutRawOrder
 *         elif mode == "reading":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutReadingOrder
 *         else:
 */
  __Pyx_TraceLine(134,0,__PYX_ERR(8, 134, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_reading, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(8, 134, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "src/pyxpdf/textoutput.pxi":135
 *             self._c_control.mode = TextOutputMode.textOutRawOrder
 *         elif mode == "reading":
 *             self._c_control.mode = TextOutputMode.textOutReadingOrder             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid TexOutput Mode")
 */
    __Pyx_TraceLine(135,0,__PYX_ERR(8, 135, __pyx_L1_error))
    __pyx_v_self->_c_control.mode = textOutReadingOrder;

    /* "src/pyxpdf/textoutput.pxi":134
 *         elif mode == "raw":
 *             self._c_control.mode = TextOutputMode.textOutRawOrder
 *         elif mode == "reading":             # <<<<<<<<<<<<<<
 *             self._c_control.mode = TextOutputMode.textOutReadingOrder
 *         else:
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/textoutput.pxi":137
 *             self._c_control.mode = TextOutputMode.textOutReadingOrder
 *         else:
 *             raise ValueError("Invalid TexOutput Mode")             # <<<<<<<<<<<<<<
 * 
 *     cdef TextOutputControl* get_c_control(self):
 */
  __Pyx_TraceLine(137,0,__PYX_ERR(8, 137, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(8, 137, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "src/pyxpdf/textoutput.pxi":103
 *     cdef TextOutputControl _c_control
 * 
 *     def __cinit__(self, mode = "reading", double fixed_pitch = 0,             # <<<<<<<<<<<<<<
 *                   double fixed_line_spacing=0, enable_html=False, clip_text=False,
 *                   discard_diagonal=False, discard_invisible=False,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextControl.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":139
 *             raise ValueError("Invalid TexOutput Mode")
 * 
 *     cdef TextOutputControl* get_c_control(self):             # <<<<<<<<<<<<<<
 *         return &self._c_control
 * 
 */

static TextOutputControl *__pyx_f_6pyxpdf_4xpdf_11TextControl_get_c_control(struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self) {
  TextOutputControl *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_c_control", 0);
  __Pyx_TraceCall("get_c_control", __pyx_f[8], 139, 0, __PYX_ERR(8, 139, __pyx_L1_error));

  /* "src/pyxpdf/textoutput.pxi":140
 * 
 *     cdef TextOutputControl* get_c_control(self):
 *         return &self._c_control             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(140,0,__PYX_ERR(8, 140, __pyx_L1_error))
  __pyx_r = (&__pyx_v_self->_c_control);
  goto __pyx_L0;

  /* "src/pyxpdf/textoutput.pxi":139
 *             raise ValueError("Invalid TexOutput Mode")
 * 
 *     cdef TextOutputControl* get_c_control(self):             # <<<<<<<<<<<<<<
 *         return &self._c_control
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.TextControl.get_c_control", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_11TextControl_2__reduce_cython__[] = "TextControl.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_11TextControl_2__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_11TextControl_2__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_11TextControl_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__39)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(7, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextControl.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_11TextControl_4__setstate_cython__[] = "TextControl.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_11TextControl_4__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_11TextControl_4__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_11TextControl_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__41)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 3, 0, __PYX_ERR(7, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextControl.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":185
 *         vector[unique_ptr[TextPage]] _c_text_pages
 * 
 *     def __cinit__(self, Document doc not None, TextControl control = None, **kargs):             # <<<<<<<<<<<<<<
 *         if control == None:
 *             control = TextControl(**kargs)
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_10TextOutput_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_10TextOutput_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc = 0;
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control = 0;
  PyObject *__pyx_v_kargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kargs = PyDict_New(); if (unlikely(!__pyx_v_kargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_doc,&__pyx_n_s_control,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_doc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_control);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kargs, values, pos_args, "__cinit__") < 0)) __PYX_ERR(8, 185, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)values[0]);
    __pyx_v_control = ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 185, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kargs); __pyx_v_kargs = 0;
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_doc), __pyx_ptype_6pyxpdf_4xpdf_Document, 0, "doc", 0))) __PYX_ERR(8, 185, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_control), __pyx_ptype_6pyxpdf_4xpdf_TextControl, 1, "control", 0))) __PYX_ERR(8, 185, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10TextOutput___cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self), __pyx_v_doc, __pyx_v_control, __pyx_v_kargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_10TextOutput___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc, struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control, PyObject *__pyx_v_kargs) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[8], 185, 0, __PYX_ERR(8, 185, __pyx_L1_error));
  __Pyx_INCREF((PyObject *)__pyx_v_control);

  /* "src/pyxpdf/textoutput.pxi":186
 * 
 *     def __cinit__(self, Document doc not None, TextControl control = None, **kargs):
 *         if control == None:             # <<<<<<<<<<<<<<
 *             control = TextControl(**kargs)
 *         self.doc = doc
 */
  __Pyx_TraceLine(186,0,__PYX_ERR(8, 186, __pyx_L1_error))
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_control), Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 186, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pyxpdf/textoutput.pxi":187
 *     def __cinit__(self, Document doc not None, TextControl control = None, **kargs):
 *         if control == None:
 *             control = TextControl(**kargs)             # <<<<<<<<<<<<<<
 *         self.doc = doc
 *         # keep a ref for TextOutput as TextOutputDev does not
 */
    __Pyx_TraceLine(187,0,__PYX_ERR(8, 187, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_TextControl), __pyx_empty_tuple, __pyx_v_kargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_control, ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "src/pyxpdf/textoutput.pxi":186
 * 
 *     def __cinit__(self, Document doc not None, TextControl control = None, **kargs):
 *         if control == None:             # <<<<<<<<<<<<<<
 *             control = TextControl(**kargs)
 *         self.doc = doc
 */
  }

  /* "src/pyxpdf/textoutput.pxi":188
 *         if control == None:
 *             control = TextControl(**kargs)
 *         self.doc = doc             # <<<<<<<<<<<<<<
 *         # keep a ref for TextOutput as TextOutputDev does not
 *         # copy TextOutputControl
 */
  __Pyx_TraceLine(188,0,__PYX_ERR(8, 188, __pyx_L1_error))
  __Pyx_INCREF(((PyObject *)__pyx_v_doc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_doc));
  __Pyx_GOTREF(__pyx_v_self->doc);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->doc));
  __pyx_v_self->doc = __pyx_v_doc;

  /* "src/pyxpdf/textoutput.pxi":191
 *         # keep a ref for TextOutput as TextOutputDev does not
 *         # copy TextOutputControl
 *         self.control = control             # <<<<<<<<<<<<<<
 *         self._c_textdev = make_unique[TextOutputDev](&append_to_cpp_string, self._out_str.get(),
 *                                                      self.control.get_c_control())
 */
  __Pyx_TraceLine(191,0,__PYX_ERR(8, 191, __pyx_L1_error))
  __Pyx_INCREF(((PyObject *)__pyx_v_control));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_control));
  __Pyx_GOTREF(__pyx_v_self->control);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->control));
  __pyx_v_self->control = __pyx_v_control;

  /* "src/pyxpdf/textoutput.pxi":192
 *         # copy TextOutputControl
 *         self.control = control
 *         self._c_textdev = make_unique[TextOutputDev](&append_to_cpp_string, self._out_str.get(),             # <<<<<<<<<<<<<<
 *                                                      self.control.get_c_control())
 *         if self._c_textdev.get() == NULL:
 */
  __Pyx_TraceLine(192,0,__PYX_ERR(8, 192, __pyx_L1_error))
  __pyx_v_self->_c_textdev = std::make_unique<TextOutputDev>((&__pyx_f_6pyxpdf_4xpdf_append_to_cpp_string), __pyx_v_self->_out_str.get(), ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextControl *)__pyx_v_self->control->__pyx_vtab)->get_c_control(__pyx_v_self->control));

  /* "src/pyxpdf/textoutput.pxi":194
 *         self._c_textdev = make_unique[TextOutputDev](&append_to_cpp_string, self._out_str.get(),
 *                                                      self.control.get_c_control())
 *         if self._c_textdev.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for 'TextOutput' object.")
 *         # sanity check
 */
  __Pyx_TraceLine(194,0,__PYX_ERR(8, 194, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_self->_c_textdev.get() == NULL) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "src/pyxpdf/textoutput.pxi":195
 *                                                      self.control.get_c_control())
 *         if self._c_textdev.get() == NULL:
 *             raise MemoryError("Cannot allocate memory for 'TextOutput' object.")             # <<<<<<<<<<<<<<
 *         # sanity check
 *         if self._c_textdev.get().isOk() == gFalse:
 */
    __Pyx_TraceLine(195,0,__PYX_ERR(8, 195, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(8, 195, __pyx_L1_error)

    /* "src/pyxpdf/textoutput.pxi":194
 *         self._c_textdev = make_unique[TextOutputDev](&append_to_cpp_string, self._out_str.get(),
 *                                                      self.control.get_c_control())
 *         if self._c_textdev.get() == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for 'TextOutput' object.")
 *         # sanity check
 */
  }

  /* "src/pyxpdf/textoutput.pxi":197
 *             raise MemoryError("Cannot allocate memory for 'TextOutput' object.")
 *         # sanity check
 *         if self._c_textdev.get().isOk() == gFalse:             # <<<<<<<<<<<<<<
 *             raise XPDFInternalError
 *         # init caching
 */
  __Pyx_TraceLine(197,0,__PYX_ERR(8, 197, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_self->_c_textdev.get()->isOk() == gFalse) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "src/pyxpdf/textoutput.pxi":198
 *         # sanity check
 *         if self._c_textdev.get().isOk() == gFalse:
 *             raise XPDFInternalError             # <<<<<<<<<<<<<<
 *         # init caching
 *         self._init_cache()
 */
    __Pyx_TraceLine(198,0,__PYX_ERR(8, 198, __pyx_L1_error))
    __Pyx_Raise(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFInternalError), 0, 0, 0);
    __PYX_ERR(8, 198, __pyx_L1_error)

    /* "src/pyxpdf/textoutput.pxi":197
 *             raise MemoryError("Cannot allocate memory for 'TextOutput' object.")
 *         # sanity check
 *         if self._c_textdev.get().isOk() == gFalse:             # <<<<<<<<<<<<<<
 *             raise XPDFInternalError
 *         # init caching
 */
  }

  /* "src/pyxpdf/textoutput.pxi":200
 *             raise XPDFInternalError
 *         # init caching
 *         self._init_cache()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_TraceLine(200,0,__PYX_ERR(8, 200, __pyx_L1_error))
  ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self->__pyx_vtab)->_init_cache(__pyx_v_self);

  /* "src/pyxpdf/textoutput.pxi":185
 *         vector[unique_ptr[TextPage]] _c_text_pages
 * 
 *     def __cinit__(self, Document doc not None, TextControl control = None, **kargs):             # <<<<<<<<<<<<<<
 *         if control == None:
 *             control = TextControl(**kargs)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_control);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":202
 *         self._init_cache()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"<TextOutput[{self.doc.__repr__()}]>"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10TextOutput_2__repr__(((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_2__repr__(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[8], 202, 0, __PYX_ERR(8, 202, __pyx_L1_error));

  /* "src/pyxpdf/textoutput.pxi":203
 * 
 *     def __repr__(self):
 *         return f"<TextOutput[{self.doc.__repr__()}]>"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(203,0,__PYX_ERR(8, 203, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_TextOutput);
  __pyx_t_2 += 12;
  __Pyx_GIVEREF(__pyx_kp_u_TextOutput);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_TextOutput);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->doc), __pyx_n_s_repr); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__44);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__44);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__44);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/textoutput.pxi":202
 *         self._init_cache()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"<TextOutput[{self.doc.__repr__()}]>"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":208
 *     # PRIVATE METHODS
 * 
 *     cdef bytes _get_bytes(self, int page_no):             # <<<<<<<<<<<<<<
 *         if self._cache_texts[page_no] == None:
 *             # load text
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_10TextOutput__get_bytes(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  TextPage *__pyx_t_4;
  struct __pyx_opt_args_6pyxpdf_4xpdf_10TextOutput__get_TextPage __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_bytes", 0);
  __Pyx_TraceCall("_get_bytes", __pyx_f[8], 208, 0, __PYX_ERR(8, 208, __pyx_L1_error));

  /* "src/pyxpdf/textoutput.pxi":209
 * 
 *     cdef bytes _get_bytes(self, int page_no):
 *         if self._cache_texts[page_no] == None:             # <<<<<<<<<<<<<<
 *             # load text
 *             self._get_TextPage(page_no)
 */
  __Pyx_TraceLine(209,0,__PYX_ERR(8, 209, __pyx_L1_error))
  if (unlikely(__pyx_v_self->_cache_texts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(8, 209, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->_cache_texts, __pyx_v_page_no, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(8, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "src/pyxpdf/textoutput.pxi":211
 *         if self._cache_texts[page_no] == None:
 *             # load text
 *             self._get_TextPage(page_no)             # <<<<<<<<<<<<<<
 *         return self._cache_texts[page_no]
 * 
 */
    __Pyx_TraceLine(211,0,__PYX_ERR(8, 211, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_page_no); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5.__pyx_n = 1;
    __pyx_t_5.page_no = __pyx_t_2;
    __pyx_t_4 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self->__pyx_vtab)->_get_TextPage(__pyx_v_self, &__pyx_t_5); if (unlikely(__pyx_t_4 == ((TextPage *)NULL))) __PYX_ERR(8, 211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/textoutput.pxi":209
 * 
 *     cdef bytes _get_bytes(self, int page_no):
 *         if self._cache_texts[page_no] == None:             # <<<<<<<<<<<<<<
 *             # load text
 *             self._get_TextPage(page_no)
 */
  }

  /* "src/pyxpdf/textoutput.pxi":212
 *             # load text
 *             self._get_TextPage(page_no)
 *         return self._cache_texts[page_no]             # <<<<<<<<<<<<<<
 * 
 *     cdef TextPage* _get_TextPage(self, page_no=0) except NULL:
 */
  __Pyx_TraceLine(212,0,__PYX_ERR(8, 212, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_cache_texts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(8, 212, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_self->_cache_texts, __pyx_v_page_no, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(8, 212, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/textoutput.pxi":208
 *     # PRIVATE METHODS
 * 
 *     cdef bytes _get_bytes(self, int page_no):             # <<<<<<<<<<<<<<
 *         if self._cache_texts[page_no] == None:
 *             # load text
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput._get_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":214
 *         return self._cache_texts[page_no]
 * 
 *     cdef TextPage* _get_TextPage(self, page_no=0) except NULL:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Page page = self.doc.get_page(page_no)
 */

static TextPage *__pyx_f_6pyxpdf_4xpdf_10TextOutput__get_TextPage(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, struct __pyx_opt_args_6pyxpdf_4xpdf_10TextOutput__get_TextPage *__pyx_optional_args) {
  PyObject *__pyx_v_page_no = ((PyObject *)__pyx_int_0);
  struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_page = 0;
  PyObject *__pyx_v_page_txt = 0;
  std::unique_ptr<std::string>  __pyx_v_out;
  std::unique_ptr<TextOutputDev>  __pyx_v__c_dev;
  TextPage *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::vector<std::unique_ptr<TextPage> > ::size_type __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_TextPage", 0);
  __Pyx_TraceCall("_get_TextPage", __pyx_f[8], 214, 0, __PYX_ERR(8, 214, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_page_no = __pyx_optional_args->page_no;
    }
  }
  __Pyx_INCREF(__pyx_v_page_no);

  /* "src/pyxpdf/textoutput.pxi":216
 *     cdef TextPage* _get_TextPage(self, page_no=0) except NULL:
 *         cdef:
 *             Page page = self.doc.get_page(page_no)             # <<<<<<<<<<<<<<
 *             bytes page_txt
 *         if page_no < 0:
 */
  __Pyx_TraceLine(216,0,__PYX_ERR(8, 216, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_page_no); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 216, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->doc->__pyx_vtab)->get_page(__pyx_v_self->doc, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pyxpdf_4xpdf_Page))))) __PYX_ERR(8, 216, __pyx_L1_error)
  __pyx_v_page = ((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/textoutput.pxi":218
 *             Page page = self.doc.get_page(page_no)
 *             bytes page_txt
 *         if page_no < 0:             # <<<<<<<<<<<<<<
 *            page_no = 0
 *         if page_no >= self.doc.num_pages:
 */
  __Pyx_TraceLine(218,0,__PYX_ERR(8, 218, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_page_no, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 218, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(8, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "src/pyxpdf/textoutput.pxi":219
 *             bytes page_txt
 *         if page_no < 0:
 *            page_no = 0             # <<<<<<<<<<<<<<
 *         if page_no >= self.doc.num_pages:
 *             page_no = self.doc.num_pages - 1
 */
    __Pyx_TraceLine(219,0,__PYX_ERR(8, 219, __pyx_L1_error))
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF_SET(__pyx_v_page_no, __pyx_int_0);

    /* "src/pyxpdf/textoutput.pxi":218
 *             Page page = self.doc.get_page(page_no)
 *             bytes page_txt
 *         if page_no < 0:             # <<<<<<<<<<<<<<
 *            page_no = 0
 *         if page_no >= self.doc.num_pages:
 */
  }

  /* "src/pyxpdf/textoutput.pxi":220
 *         if page_no < 0:
 *            page_no = 0
 *         if page_no >= self.doc.num_pages:             # <<<<<<<<<<<<<<
 *             page_no = self.doc.num_pages - 1
 *         cdef:
 */
  __Pyx_TraceLine(220,0,__PYX_ERR(8, 220, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->doc), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_page_no, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(8, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_3) {

    /* "src/pyxpdf/textoutput.pxi":221
 *            page_no = 0
 *         if page_no >= self.doc.num_pages:
 *             page_no = self.doc.num_pages - 1             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[string] out = make_unique[string]()
 */
    __Pyx_TraceLine(221,0,__PYX_ERR(8, 221, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->doc), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_page_no, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/pyxpdf/textoutput.pxi":220
 *         if page_no < 0:
 *            page_no = 0
 *         if page_no >= self.doc.num_pages:             # <<<<<<<<<<<<<<
 *             page_no = self.doc.num_pages - 1
 *         cdef:
 */
  }

  /* "src/pyxpdf/textoutput.pxi":223
 *             page_no = self.doc.num_pages - 1
 *         cdef:
 *             unique_ptr[string] out = make_unique[string]()             # <<<<<<<<<<<<<<
 *             unique_ptr[TextOutputDev] _c_dev = make_unique[TextOutputDev](&append_to_cpp_string,
 *                                                                           out.get(), self.control.get_c_control())
 */
  __Pyx_TraceLine(223,0,__PYX_ERR(8, 223, __pyx_L1_error))
  __pyx_v_out = std::make_unique<std::string>();

  /* "src/pyxpdf/textoutput.pxi":224
 *         cdef:
 *             unique_ptr[string] out = make_unique[string]()
 *             unique_ptr[TextOutputDev] _c_dev = make_unique[TextOutputDev](&append_to_cpp_string,             # <<<<<<<<<<<<<<
 *                                                                           out.get(), self.control.get_c_control())
 *         if self._c_text_pages[page_no] == NULL:
 */
  __Pyx_TraceLine(224,0,__PYX_ERR(8, 224, __pyx_L1_error))
  __pyx_v__c_dev = std::make_unique<TextOutputDev>((&__pyx_f_6pyxpdf_4xpdf_append_to_cpp_string), __pyx_v_out.get(), ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextControl *)__pyx_v_self->control->__pyx_vtab)->get_c_control(__pyx_v_self->control));

  /* "src/pyxpdf/textoutput.pxi":226
 *             unique_ptr[TextOutputDev] _c_dev = make_unique[TextOutputDev](&append_to_cpp_string,
 *                                                                           out.get(), self.control.get_c_control())
 *         if self._c_text_pages[page_no] == NULL:             # <<<<<<<<<<<<<<
 *             page.display(_c_dev.get())
 *             self._c_text_pages[page_no].reset(deref(_c_dev).takeText())
 */
  __Pyx_TraceLine(226,0,__PYX_ERR(8, 226, __pyx_L1_error))
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_page_no); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(8, 226, __pyx_L1_error)
  __pyx_t_3 = (((__pyx_v_self->_c_text_pages[__pyx_t_5]) == NULL) != 0);
  if (__pyx_t_3) {

    /* "src/pyxpdf/textoutput.pxi":227
 *                                                                           out.get(), self.control.get_c_control())
 *         if self._c_text_pages[page_no] == NULL:
 *             page.display(_c_dev.get())             # <<<<<<<<<<<<<<
 *             self._c_text_pages[page_no].reset(deref(_c_dev).takeText())
 *             # save raw text from page
 */
    __Pyx_TraceLine(227,0,__PYX_ERR(8, 227, __pyx_L1_error))
    __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_page->__pyx_vtab)->display(__pyx_v_page, __pyx_v__c_dev.get(), NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/textoutput.pxi":228
 *         if self._c_text_pages[page_no] == NULL:
 *             page.display(_c_dev.get())
 *             self._c_text_pages[page_no].reset(deref(_c_dev).takeText())             # <<<<<<<<<<<<<<
 *             # save raw text from page
 *             page_txt = deref(out.get())
 */
    __Pyx_TraceLine(228,0,__PYX_ERR(8, 228, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_page_no); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(8, 228, __pyx_L1_error)
    (__pyx_v_self->_c_text_pages[__pyx_t_5]).reset((*__pyx_v__c_dev).takeText());

    /* "src/pyxpdf/textoutput.pxi":230
 *             self._c_text_pages[page_no].reset(deref(_c_dev).takeText())
 *             # save raw text from page
 *             page_txt = deref(out.get())             # <<<<<<<<<<<<<<
 *             self._cache_texts[page_no] = page_txt
 * 
 */
    __Pyx_TraceLine(230,0,__PYX_ERR(8, 230, __pyx_L1_error))
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_out.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_page_txt = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/pyxpdf/textoutput.pxi":231
 *             # save raw text from page
 *             page_txt = deref(out.get())
 *             self._cache_texts[page_no] = page_txt             # <<<<<<<<<<<<<<
 * 
 *         return self._c_text_pages[page_no].get()
 */
    __Pyx_TraceLine(231,0,__PYX_ERR(8, 231, __pyx_L1_error))
    if (unlikely(__pyx_v_self->_cache_texts == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(8, 231, __pyx_L1_error)
    }
    if (unlikely(PyObject_SetItem(__pyx_v_self->_cache_texts, __pyx_v_page_no, __pyx_v_page_txt) < 0)) __PYX_ERR(8, 231, __pyx_L1_error)

    /* "src/pyxpdf/textoutput.pxi":226
 *             unique_ptr[TextOutputDev] _c_dev = make_unique[TextOutputDev](&append_to_cpp_string,
 *                                                                           out.get(), self.control.get_c_control())
 *         if self._c_text_pages[page_no] == NULL:             # <<<<<<<<<<<<<<
 *             page.display(_c_dev.get())
 *             self._c_text_pages[page_no].reset(deref(_c_dev).takeText())
 */
  }

  /* "src/pyxpdf/textoutput.pxi":233
 *             self._cache_texts[page_no] = page_txt
 * 
 *         return self._c_text_pages[page_no].get()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(233,0,__PYX_ERR(8, 233, __pyx_L1_error))
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_page_no); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(8, 233, __pyx_L1_error)
  __pyx_r = (__pyx_v_self->_c_text_pages[__pyx_t_5]).get();
  goto __pyx_L0;

  /* "src/pyxpdf/textoutput.pxi":214
 *         return self._cache_texts[page_no]
 * 
 *     cdef TextPage* _get_TextPage(self, page_no=0) except NULL:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Page page = self.doc.get_page(page_no)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput._get_TextPage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_page);
  __Pyx_XDECREF(__pyx_v_page_txt);
  __Pyx_XDECREF(__pyx_v_page_no);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":236
 * 
 * 
 *     cdef void _init_cache(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[TextPage] _tp
 */

static void __pyx_f_6pyxpdf_4xpdf_10TextOutput__init_cache(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self) {
  std::unique_ptr<TextPage>  __pyx_v__tp;
  int __pyx_v_pg_count;
  CYTHON_UNUSED int __pyx_v__;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_cache", 0);
  __Pyx_TraceCall("_init_cache", __pyx_f[8], 236, 0, __PYX_ERR(8, 236, __pyx_L1_error));

  /* "src/pyxpdf/textoutput.pxi":240
 *             unique_ptr[TextPage] _tp
 *             int pg_count
 *         pg_count = self.doc.num_pages             # <<<<<<<<<<<<<<
 *         self._cache_texts = [None] * pg_count
 *         for _ in range(pg_count):
 */
  __Pyx_TraceLine(240,0,__PYX_ERR(8, 240, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->doc), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pg_count = __pyx_t_2;

  /* "src/pyxpdf/textoutput.pxi":241
 *             int pg_count
 *         pg_count = self.doc.num_pages
 *         self._cache_texts = [None] * pg_count             # <<<<<<<<<<<<<<
 *         for _ in range(pg_count):
 *             _tp = unique_ptr[TextPage]()
 */
  __Pyx_TraceLine(241,0,__PYX_ERR(8, 241, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_pg_count<0) ? 0:__pyx_v_pg_count)); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_pg_count; __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyList_SET_ITEM(__pyx_t_1, __pyx_temp, Py_None);
    }
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_cache_texts);
  __Pyx_DECREF(__pyx_v_self->_cache_texts);
  __pyx_v_self->_cache_texts = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/textoutput.pxi":242
 *         pg_count = self.doc.num_pages
 *         self._cache_texts = [None] * pg_count
 *         for _ in range(pg_count):             # <<<<<<<<<<<<<<
 *             _tp = unique_ptr[TextPage]()
 *             self._c_text_pages.push_back(move(_tp))
 */
  __Pyx_TraceLine(242,0,__PYX_ERR(8, 242, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_pg_count;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v__ = __pyx_t_4;

    /* "src/pyxpdf/textoutput.pxi":243
 *         self._cache_texts = [None] * pg_count
 *         for _ in range(pg_count):
 *             _tp = unique_ptr[TextPage]()             # <<<<<<<<<<<<<<
 *             self._c_text_pages.push_back(move(_tp))
 * 
 */
    __Pyx_TraceLine(243,0,__PYX_ERR(8, 243, __pyx_L1_error))
    __pyx_v__tp = std::unique_ptr<TextPage> ();

    /* "src/pyxpdf/textoutput.pxi":244
 *         for _ in range(pg_count):
 *             _tp = unique_ptr[TextPage]()
 *             self._c_text_pages.push_back(move(_tp))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(244,0,__PYX_ERR(8, 244, __pyx_L1_error))
    try {
      __pyx_v_self->_c_text_pages.push_back(cython_std::move<std::unique_ptr<TextPage> >(__pyx_v__tp));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(8, 244, __pyx_L1_error)
    }
  }

  /* "src/pyxpdf/textoutput.pxi":236
 * 
 * 
 *     cdef void _init_cache(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[TextPage] _tp
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("pyxpdf.xpdf.TextOutput._init_cache", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "src/pyxpdf/textoutput.pxi":249
 *     # PUBLIC METHODS
 * 
 *     cpdef bytes get_bytes(self, int page_no):             # <<<<<<<<<<<<<<
 *         """Get the extracted text bytes from `page_no` indexed page
 * 
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_5get_bytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_page_no); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_10TextOutput_get_bytes(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__45)
  __Pyx_RefNannySetupContext("get_bytes", 0);
  __Pyx_TraceCall("get_bytes", __pyx_f[8], 249, 0, __PYX_ERR(8, 249, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_5get_bytes)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_page_no); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 249, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 249, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(8, 249, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "src/pyxpdf/textoutput.pxi":266
 *             extracted text bytes
 *         """
 *         return self._get_bytes(page_no)             # <<<<<<<<<<<<<<
 * 
 *     cpdef object get(self, int page_no):
 */
  __Pyx_TraceLine(266,0,__PYX_ERR(8, 266, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self->__pyx_vtab)->_get_bytes(__pyx_v_self, __pyx_v_page_no); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/textoutput.pxi":249
 *     # PUBLIC METHODS
 * 
 *     cpdef bytes get_bytes(self, int page_no):             # <<<<<<<<<<<<<<
 *         """Get the extracted text bytes from `page_no` indexed page
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.get_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_5get_bytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_page_no); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_10TextOutput_4get_bytes[] = "TextOutput.get_bytes(self, int page_no) -> bytes\nGet the extracted text bytes from `page_no` indexed page\n\n        This method should be use when text encoding (:attr:`Config.text_encoding`)\n        is different than `UTF-8` or when you to control decoding of bytes\n        by yourself.\n\n        Parameters\n        ----------\n        page_no : int\n            index of page to extract text bytes from\n\n        Return\n        ------\n        bytes\n            extracted text bytes\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_10TextOutput_5get_bytes = {"get_bytes", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_5get_bytes, METH_O, __pyx_doc_6pyxpdf_4xpdf_10TextOutput_4get_bytes};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_5get_bytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_page_no) {
  int __pyx_v_page_no;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bytes (wrapper)", 0);
  assert(__pyx_arg_page_no); {
    __pyx_v_page_no = __Pyx_PyInt_As_int(__pyx_arg_page_no); if (unlikely((__pyx_v_page_no == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 249, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.get_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10TextOutput_4get_bytes(((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self), ((int)__pyx_v_page_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_4get_bytes(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__45)
  __Pyx_RefNannySetupContext("get_bytes", 0);
  __Pyx_TraceCall("get_bytes (wrapper)", __pyx_f[8], 249, 0, __PYX_ERR(8, 249, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_10TextOutput_get_bytes(__pyx_v_self, __pyx_v_page_no, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.get_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":268
 *         return self._get_bytes(page_no)
 * 
 *     cpdef object get(self, int page_no):             # <<<<<<<<<<<<<<
 *         """Get the extracted `UTF-8` decoded :any:`str` from `page_no` indexed
 *         page
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_7get(PyObject *__pyx_v_self, PyObject *__pyx_arg_page_no); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_10TextOutput_get(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__46)
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_TraceCall("get", __pyx_f[8], 268, 0, __PYX_ERR(8, 268, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_7get)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_page_no); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 268, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 268, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "src/pyxpdf/textoutput.pxi":286
 *             extracted `UTF-8` decoded text
 *         """
 *         return self._get_bytes(page_no).decode('UTF-8', errors='ignore')             # <<<<<<<<<<<<<<
 * 
 *     cpdef list get_all(self):
 */
  __Pyx_TraceLine(286,0,__PYX_ERR(8, 286, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self->__pyx_vtab)->_get_bytes(__pyx_v_self, __pyx_v_page_no); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_errors, __pyx_n_u_ignore) < 0) __PYX_ERR(8, 286, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/textoutput.pxi":268
 *         return self._get_bytes(page_no)
 * 
 *     cpdef object get(self, int page_no):             # <<<<<<<<<<<<<<
 *         """Get the extracted `UTF-8` decoded :any:`str` from `page_no` indexed
 *         page
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_7get(PyObject *__pyx_v_self, PyObject *__pyx_arg_page_no); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_10TextOutput_6get[] = "TextOutput.get(self, int page_no)\nGet the extracted `UTF-8` decoded :any:`str` from `page_no` indexed\n        page\n\n        This method is almost similar to :meth:`get_bytes`, the only difference\n        is that it decodes the extracted bytes in `UTF-8` with '`ignore`'\n        (:func:`codecs.ignore_errors`) decoding error handler.\n\n        Parameters\n        ----------\n        page_no : int\n            index of page to extract text bytes from\n\n        Return\n        ------\n        str\n            extracted `UTF-8` decoded text\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_10TextOutput_7get = {"get", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_7get, METH_O, __pyx_doc_6pyxpdf_4xpdf_10TextOutput_6get};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_7get(PyObject *__pyx_v_self, PyObject *__pyx_arg_page_no) {
  int __pyx_v_page_no;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  assert(__pyx_arg_page_no); {
    __pyx_v_page_no = __Pyx_PyInt_As_int(__pyx_arg_page_no); if (unlikely((__pyx_v_page_no == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 268, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10TextOutput_6get(((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self), ((int)__pyx_v_page_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_6get(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_v_page_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__46)
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_TraceCall("get (wrapper)", __pyx_f[8], 268, 0, __PYX_ERR(8, 268, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_10TextOutput_get(__pyx_v_self, __pyx_v_page_no, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":288
 *         return self._get_bytes(page_no).decode('UTF-8', errors='ignore')
 * 
 *     cpdef list get_all(self):             # <<<<<<<<<<<<<<
 *         """Get the extracted `UTF-8` decoded text from all pages
 * 
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_9get_all(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_10TextOutput_get_all(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_v_i;
  PyObject *__pyx_v_txt_all = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__47)
  __Pyx_RefNannySetupContext("get_all", 0);
  __Pyx_TraceCall("get_all", __pyx_f[8], 288, 0, __PYX_ERR(8, 288, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_all); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 288, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_9get_all)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 288, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(8, 288, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "src/pyxpdf/textoutput.pxi":298
 *         cdef:
 *             int i
 *             list txt_all = []             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.doc.doc.getNumPages()):
 */
  __Pyx_TraceLine(298,0,__PYX_ERR(8, 298, __pyx_L1_error))
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_txt_all = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/textoutput.pxi":300
 *             list txt_all = []
 * 
 *         for i in range(self.doc.doc.getNumPages()):             # <<<<<<<<<<<<<<
 *             txt_all.append(self._get_bytes(i).decode('UTF-8', errors='ignore'))
 *         return txt_all
 */
  __Pyx_TraceLine(300,0,__PYX_ERR(8, 300, __pyx_L1_error))
  __pyx_t_5 = __pyx_v_self->doc->doc->getNumPages();
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "src/pyxpdf/textoutput.pxi":301
 * 
 *         for i in range(self.doc.doc.getNumPages()):
 *             txt_all.append(self._get_bytes(i).decode('UTF-8', errors='ignore'))             # <<<<<<<<<<<<<<
 *         return txt_all
 * 
 */
    __Pyx_TraceLine(301,0,__PYX_ERR(8, 301, __pyx_L1_error))
    __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self->__pyx_vtab)->_get_bytes(__pyx_v_self, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_errors, __pyx_n_u_ignore) < 0) __PYX_ERR(8, 301, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__3, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_txt_all, __pyx_t_3); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(8, 301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "src/pyxpdf/textoutput.pxi":302
 *         for i in range(self.doc.doc.getNumPages()):
 *             txt_all.append(self._get_bytes(i).decode('UTF-8', errors='ignore'))
 *         return txt_all             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(302,0,__PYX_ERR(8, 302, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_txt_all);
  __pyx_r = __pyx_v_txt_all;
  goto __pyx_L0;

  /* "src/pyxpdf/textoutput.pxi":288
 *         return self._get_bytes(page_no).decode('UTF-8', errors='ignore')
 * 
 *     cpdef list get_all(self):             # <<<<<<<<<<<<<<
 *         """Get the extracted `UTF-8` decoded text from all pages
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.get_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_txt_all);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_9get_all(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_10TextOutput_8get_all[] = "TextOutput.get_all(self) -> list\nGet the extracted `UTF-8` decoded text from all pages\n\n        Return\n        ------\n        :any:`list` of str\n            list of `UTF-8` decoded text from all the pages\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_10TextOutput_9get_all = {"get_all", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_9get_all, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_10TextOutput_8get_all};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_9get_all(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_all (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10TextOutput_8get_all(((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_8get_all(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__47)
  __Pyx_RefNannySetupContext("get_all", 0);
  __Pyx_TraceCall("get_all (wrapper)", __pyx_f[8], 288, 0, __PYX_ERR(8, 288, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_10TextOutput_get_all(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.get_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":179
 *         unique_ptr[TextOutputDev] _c_textdev
 *         unique_ptr[string] _out_str
 *         readonly Document doc             # <<<<<<<<<<<<<<
 *         readonly TextControl control
 *         # caching resource
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_3doc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_3doc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10TextOutput_3doc___get__(((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[8], 179, 0, __PYX_ERR(8, 179, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->doc));
  __pyx_r = ((PyObject *)__pyx_v_self->doc);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.doc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":180
 *         unique_ptr[string] _out_str
 *         readonly Document doc
 *         readonly TextControl control             # <<<<<<<<<<<<<<
 *         # caching resource
 *         list _cache_texts
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_7control_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_7control_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10TextOutput_7control___get__(((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_7control___get__(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[8], 180, 0, __PYX_ERR(8, 180, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->control));
  __pyx_r = ((PyObject *)__pyx_v_self->control);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.control.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_10TextOutput_10__reduce_cython__[] = "TextOutput.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_10TextOutput_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_11__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_10TextOutput_10__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10TextOutput_10__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__48)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(7, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_10TextOutput_12__setstate_cython__[] = "TextOutput.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_10TextOutput_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_13__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_10TextOutput_12__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_10TextOutput_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10TextOutput_12__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10TextOutput_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__50)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 3, 0, __PYX_ERR(7, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextOutput.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":40
 * 
 * #FIXME: buggy as hell, text does not render properly.
 * cdef bytearray splash_bitmap_to_1bpc_1comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y, i
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_1bpc_1comp(SplashBitmap *__pyx_v_bitmap) {
  int __pyx_v_idx;
  CYTHON_UNUSED int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_i;
  int __pyx_v_height;
  int __pyx_v_width;
  SplashBitmapRowSize __pyx_v_row_size;
  SplashColorPtr __pyx_v_data;
  SplashColorPtr __pyx_v_p;
  PyObject *__pyx_v_img = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("splash_bitmap_to_1bpc_1comp", 0);
  __Pyx_TraceCall("splash_bitmap_to_1bpc_1comp", __pyx_f[9], 40, 0, __PYX_ERR(9, 40, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":43
 *     cdef:
 *         int idx, x, y, i
 *         int height = bitmap.getHeight()             # <<<<<<<<<<<<<<
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 */
  __Pyx_TraceLine(43,0,__PYX_ERR(9, 43, __pyx_L1_error))
  __pyx_v_height = __pyx_v_bitmap->getHeight();

  /* "src/pyxpdf/imageoutput.pxi":44
 *         int idx, x, y, i
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()             # <<<<<<<<<<<<<<
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()
 */
  __Pyx_TraceLine(44,0,__PYX_ERR(9, 44, __pyx_L1_error))
  __pyx_v_width = __pyx_v_bitmap->getWidth();

  /* "src/pyxpdf/imageoutput.pxi":45
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()             # <<<<<<<<<<<<<<
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         SplashColorPtr p
 */
  __Pyx_TraceLine(45,0,__PYX_ERR(9, 45, __pyx_L1_error))
  __pyx_v_row_size = __pyx_v_bitmap->getRowSize();

  /* "src/pyxpdf/imageoutput.pxi":46
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()             # <<<<<<<<<<<<<<
 *         SplashColorPtr p
 *         bytearray img = bytearray(height * width)
 */
  __Pyx_TraceLine(46,0,__PYX_ERR(9, 46, __pyx_L1_error))
  __pyx_v_data = __pyx_v_bitmap->getDataPtr();

  /* "src/pyxpdf/imageoutput.pxi":48
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         SplashColorPtr p
 *         bytearray img = bytearray(height * width)             # <<<<<<<<<<<<<<
 * 
 *     for y in range(height):
 */
  __Pyx_TraceLine(48,0,__PYX_ERR(9, 48, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_height * __pyx_v_width)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_img = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":50
 *         bytearray img = bytearray(height * width)
 * 
 *     for y in range(height):             # <<<<<<<<<<<<<<
 *         i = 0
 *         for x in range(0, width, 8):
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(9, 50, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_height;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "src/pyxpdf/imageoutput.pxi":51
 * 
 *     for y in range(height):
 *         i = 0             # <<<<<<<<<<<<<<
 *         for x in range(0, width, 8):
 *             p = &data[y * row_size + i]
 */
    __Pyx_TraceLine(51,0,__PYX_ERR(9, 51, __pyx_L1_error))
    __pyx_v_i = 0;

    /* "src/pyxpdf/imageoutput.pxi":52
 *     for y in range(height):
 *         i = 0
 *         for x in range(0, width, 8):             # <<<<<<<<<<<<<<
 *             p = &data[y * row_size + i]
 *             idx = y * row_size + i
 */
    __Pyx_TraceLine(52,0,__PYX_ERR(9, 52, __pyx_L1_error))
    __pyx_t_6 = __pyx_v_width;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=8) {
      __pyx_v_x = __pyx_t_8;

      /* "src/pyxpdf/imageoutput.pxi":53
 *         i = 0
 *         for x in range(0, width, 8):
 *             p = &data[y * row_size + i]             # <<<<<<<<<<<<<<
 *             idx = y * row_size + i
 *             img[idx] = p[0]
 */
      __Pyx_TraceLine(53,0,__PYX_ERR(9, 53, __pyx_L1_error))
      __pyx_v_p = (&(__pyx_v_data[((__pyx_v_y * __pyx_v_row_size) + __pyx_v_i)]));

      /* "src/pyxpdf/imageoutput.pxi":54
 *         for x in range(0, width, 8):
 *             p = &data[y * row_size + i]
 *             idx = y * row_size + i             # <<<<<<<<<<<<<<
 *             img[idx] = p[0]
 *             inc(i)
 */
      __Pyx_TraceLine(54,0,__PYX_ERR(9, 54, __pyx_L1_error))
      __pyx_v_idx = ((__pyx_v_y * __pyx_v_row_size) + __pyx_v_i);

      /* "src/pyxpdf/imageoutput.pxi":55
 *             p = &data[y * row_size + i]
 *             idx = y * row_size + i
 *             img[idx] = p[0]             # <<<<<<<<<<<<<<
 *             inc(i)
 *     return img
 */
      __Pyx_TraceLine(55,0,__PYX_ERR(9, 55, __pyx_L1_error))
      if (unlikely((__pyx_v_p[0]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 55, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_v_idx, ((unsigned char)(__pyx_v_p[0])), int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(9, 55, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":56
 *             idx = y * row_size + i
 *             img[idx] = p[0]
 *             inc(i)             # <<<<<<<<<<<<<<
 *     return img
 * 
 */
      __Pyx_TraceLine(56,0,__PYX_ERR(9, 56, __pyx_L1_error))
      (void)((++__pyx_v_i));
    }
  }

  /* "src/pyxpdf/imageoutput.pxi":57
 *             img[idx] = p[0]
 *             inc(i)
 *     return img             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(57,0,__PYX_ERR(9, 57, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_img);
  __pyx_r = __pyx_v_img;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":40
 * 
 * #FIXME: buggy as hell, text does not render properly.
 * cdef bytearray splash_bitmap_to_1bpc_1comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y, i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.splash_bitmap_to_1bpc_1comp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_img);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":60
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_1comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_1comp(SplashBitmap *__pyx_v_bitmap) {
  int __pyx_v_idx;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_pixel_width;
  int __pyx_v_height;
  int __pyx_v_width;
  SplashBitmapRowSize __pyx_v_row_size;
  SplashColorPtr __pyx_v_data;
  SplashColorPtr __pyx_v_p;
  PyObject *__pyx_v_img = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("splash_bitmap_to_8bpc_1comp", 0);
  __Pyx_TraceCall("splash_bitmap_to_8bpc_1comp", __pyx_f[9], 60, 0, __PYX_ERR(9, 60, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":63
 *     cdef:
 *         int idx, x, y
 *         int pixel_width = 1             # <<<<<<<<<<<<<<
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 */
  __Pyx_TraceLine(63,0,__PYX_ERR(9, 63, __pyx_L1_error))
  __pyx_v_pixel_width = 1;

  /* "src/pyxpdf/imageoutput.pxi":64
 *         int idx, x, y
 *         int pixel_width = 1
 *         int height = bitmap.getHeight()             # <<<<<<<<<<<<<<
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 */
  __Pyx_TraceLine(64,0,__PYX_ERR(9, 64, __pyx_L1_error))
  __pyx_v_height = __pyx_v_bitmap->getHeight();

  /* "src/pyxpdf/imageoutput.pxi":65
 *         int pixel_width = 1
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()             # <<<<<<<<<<<<<<
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()
 */
  __Pyx_TraceLine(65,0,__PYX_ERR(9, 65, __pyx_L1_error))
  __pyx_v_width = __pyx_v_bitmap->getWidth();

  /* "src/pyxpdf/imageoutput.pxi":66
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()             # <<<<<<<<<<<<<<
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         SplashColorPtr p
 */
  __Pyx_TraceLine(66,0,__PYX_ERR(9, 66, __pyx_L1_error))
  __pyx_v_row_size = __pyx_v_bitmap->getRowSize();

  /* "src/pyxpdf/imageoutput.pxi":67
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()             # <<<<<<<<<<<<<<
 *         SplashColorPtr p
 *         bytearray img = bytearray(height * width * pixel_width)
 */
  __Pyx_TraceLine(67,0,__PYX_ERR(9, 67, __pyx_L1_error))
  __pyx_v_data = __pyx_v_bitmap->getDataPtr();

  /* "src/pyxpdf/imageoutput.pxi":69
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         SplashColorPtr p
 *         bytearray img = bytearray(height * width * pixel_width)             # <<<<<<<<<<<<<<
 * 
 *     for y in range(height):
 */
  __Pyx_TraceLine(69,0,__PYX_ERR(9, 69, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_int(((__pyx_v_height * __pyx_v_width) * __pyx_v_pixel_width)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_img = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":71
 *         bytearray img = bytearray(height * width * pixel_width)
 * 
 *     for y in range(height):             # <<<<<<<<<<<<<<
 *         for x in range(width):
 *             p = &data[y * row_size + x]
 */
  __Pyx_TraceLine(71,0,__PYX_ERR(9, 71, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_height;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "src/pyxpdf/imageoutput.pxi":72
 * 
 *     for y in range(height):
 *         for x in range(width):             # <<<<<<<<<<<<<<
 *             p = &data[y * row_size + x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 */
    __Pyx_TraceLine(72,0,__PYX_ERR(9, 72, __pyx_L1_error))
    __pyx_t_6 = __pyx_v_width;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_x = __pyx_t_8;

      /* "src/pyxpdf/imageoutput.pxi":73
 *     for y in range(height):
 *         for x in range(width):
 *             p = &data[y * row_size + x]             # <<<<<<<<<<<<<<
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]
 */
      __Pyx_TraceLine(73,0,__PYX_ERR(9, 73, __pyx_L1_error))
      __pyx_v_p = (&(__pyx_v_data[((__pyx_v_y * __pyx_v_row_size) + __pyx_v_x)]));

      /* "src/pyxpdf/imageoutput.pxi":74
 *         for x in range(width):
 *             p = &data[y * row_size + x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)             # <<<<<<<<<<<<<<
 *             img[idx + 0] = p[0]
 *     return img
 */
      __Pyx_TraceLine(74,0,__PYX_ERR(9, 74, __pyx_L1_error))
      __pyx_v_idx = (((__pyx_v_y * __pyx_v_width) * __pyx_v_pixel_width) + (__pyx_v_x * __pyx_v_pixel_width));

      /* "src/pyxpdf/imageoutput.pxi":75
 *             p = &data[y * row_size + x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]             # <<<<<<<<<<<<<<
 *     return img
 * 
 */
      __Pyx_TraceLine(75,0,__PYX_ERR(9, 75, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 0);
      if (unlikely((__pyx_v_p[0]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 75, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[0])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 75, __pyx_L1_error)
    }
  }

  /* "src/pyxpdf/imageoutput.pxi":76
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]
 *     return img             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(76,0,__PYX_ERR(9, 76, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_img);
  __pyx_r = __pyx_v_img;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":60
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_1comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.splash_bitmap_to_8bpc_1comp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_img);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":79
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_1comp_with_alpha(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_1comp_with_alpha(SplashBitmap *__pyx_v_bitmap) {
  int __pyx_v_idx;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_pixel_width;
  int __pyx_v_height;
  int __pyx_v_width;
  SplashBitmapRowSize __pyx_v_row_size;
  SplashColorPtr __pyx_v_data;
  Guchar *__pyx_v_alpha_data;
  SplashColorPtr __pyx_v_p;
  Guchar __pyx_v_ap;
  PyObject *__pyx_v_img = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("splash_bitmap_to_8bpc_1comp_with_alpha", 0);
  __Pyx_TraceCall("splash_bitmap_to_8bpc_1comp_with_alpha", __pyx_f[9], 79, 0, __PYX_ERR(9, 79, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":82
 *     cdef:
 *         int idx, x, y
 *         int pixel_width = 2             # <<<<<<<<<<<<<<
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 */
  __Pyx_TraceLine(82,0,__PYX_ERR(9, 82, __pyx_L1_error))
  __pyx_v_pixel_width = 2;

  /* "src/pyxpdf/imageoutput.pxi":83
 *         int idx, x, y
 *         int pixel_width = 2
 *         int height = bitmap.getHeight()             # <<<<<<<<<<<<<<
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 */
  __Pyx_TraceLine(83,0,__PYX_ERR(9, 83, __pyx_L1_error))
  __pyx_v_height = __pyx_v_bitmap->getHeight();

  /* "src/pyxpdf/imageoutput.pxi":84
 *         int pixel_width = 2
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()             # <<<<<<<<<<<<<<
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()
 */
  __Pyx_TraceLine(84,0,__PYX_ERR(9, 84, __pyx_L1_error))
  __pyx_v_width = __pyx_v_bitmap->getWidth();

  /* "src/pyxpdf/imageoutput.pxi":85
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()             # <<<<<<<<<<<<<<
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         Guchar *alpha_data = bitmap.getAlphaPtr()
 */
  __Pyx_TraceLine(85,0,__PYX_ERR(9, 85, __pyx_L1_error))
  __pyx_v_row_size = __pyx_v_bitmap->getRowSize();

  /* "src/pyxpdf/imageoutput.pxi":86
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()             # <<<<<<<<<<<<<<
 *         Guchar *alpha_data = bitmap.getAlphaPtr()
 *         SplashColorPtr p
 */
  __Pyx_TraceLine(86,0,__PYX_ERR(9, 86, __pyx_L1_error))
  __pyx_v_data = __pyx_v_bitmap->getDataPtr();

  /* "src/pyxpdf/imageoutput.pxi":87
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         Guchar *alpha_data = bitmap.getAlphaPtr()             # <<<<<<<<<<<<<<
 *         SplashColorPtr p
 *         Guchar ap
 */
  __Pyx_TraceLine(87,0,__PYX_ERR(9, 87, __pyx_L1_error))
  __pyx_v_alpha_data = __pyx_v_bitmap->getAlphaPtr();

  /* "src/pyxpdf/imageoutput.pxi":90
 *         SplashColorPtr p
 *         Guchar ap
 *         bytearray img = bytearray(height * width * pixel_width)             # <<<<<<<<<<<<<<
 * 
 *     for y in range(height):
 */
  __Pyx_TraceLine(90,0,__PYX_ERR(9, 90, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_int(((__pyx_v_height * __pyx_v_width) * __pyx_v_pixel_width)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_img = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":92
 *         bytearray img = bytearray(height * width * pixel_width)
 * 
 *     for y in range(height):             # <<<<<<<<<<<<<<
 *         for x in range(width):
 *             p = &data[y * row_size + x]
 */
  __Pyx_TraceLine(92,0,__PYX_ERR(9, 92, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_height;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "src/pyxpdf/imageoutput.pxi":93
 * 
 *     for y in range(height):
 *         for x in range(width):             # <<<<<<<<<<<<<<
 *             p = &data[y * row_size + x]
 *             ap = alpha_data[y * <size_t>width + x]
 */
    __Pyx_TraceLine(93,0,__PYX_ERR(9, 93, __pyx_L1_error))
    __pyx_t_6 = __pyx_v_width;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_x = __pyx_t_8;

      /* "src/pyxpdf/imageoutput.pxi":94
 *     for y in range(height):
 *         for x in range(width):
 *             p = &data[y * row_size + x]             # <<<<<<<<<<<<<<
 *             ap = alpha_data[y * <size_t>width + x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 */
      __Pyx_TraceLine(94,0,__PYX_ERR(9, 94, __pyx_L1_error))
      __pyx_v_p = (&(__pyx_v_data[((__pyx_v_y * __pyx_v_row_size) + __pyx_v_x)]));

      /* "src/pyxpdf/imageoutput.pxi":95
 *         for x in range(width):
 *             p = &data[y * row_size + x]
 *             ap = alpha_data[y * <size_t>width + x]             # <<<<<<<<<<<<<<
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]
 */
      __Pyx_TraceLine(95,0,__PYX_ERR(9, 95, __pyx_L1_error))
      __pyx_v_ap = (__pyx_v_alpha_data[((__pyx_v_y * ((size_t)__pyx_v_width)) + __pyx_v_x)]);

      /* "src/pyxpdf/imageoutput.pxi":96
 *             p = &data[y * row_size + x]
 *             ap = alpha_data[y * <size_t>width + x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)             # <<<<<<<<<<<<<<
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = ap
 */
      __Pyx_TraceLine(96,0,__PYX_ERR(9, 96, __pyx_L1_error))
      __pyx_v_idx = (((__pyx_v_y * __pyx_v_width) * __pyx_v_pixel_width) + (__pyx_v_x * __pyx_v_pixel_width));

      /* "src/pyxpdf/imageoutput.pxi":97
 *             ap = alpha_data[y * <size_t>width + x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]             # <<<<<<<<<<<<<<
 *             img[idx + 1] = ap
 *     return img
 */
      __Pyx_TraceLine(97,0,__PYX_ERR(9, 97, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 0);
      if (unlikely((__pyx_v_p[0]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 97, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[0])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 97, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":98
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = ap             # <<<<<<<<<<<<<<
 *     return img
 * 
 */
      __Pyx_TraceLine(98,0,__PYX_ERR(9, 98, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 1);
      if (unlikely(__pyx_v_ap > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 98, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)__pyx_v_ap), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 98, __pyx_L1_error)
    }
  }

  /* "src/pyxpdf/imageoutput.pxi":99
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = ap
 *     return img             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(99,0,__PYX_ERR(9, 99, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_img);
  __pyx_r = __pyx_v_img;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":79
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_1comp_with_alpha(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.splash_bitmap_to_8bpc_1comp_with_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_img);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":102
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_4comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_4comp(SplashBitmap *__pyx_v_bitmap) {
  int __pyx_v_idx;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_height;
  int __pyx_v_width;
  SplashBitmapRowSize __pyx_v_row_size;
  SplashColorPtr __pyx_v_data;
  SplashColorPtr __pyx_v_p;
  PyObject *__pyx_v_img = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("splash_bitmap_to_8bpc_4comp", 0);
  __Pyx_TraceCall("splash_bitmap_to_8bpc_4comp", __pyx_f[9], 102, 0, __PYX_ERR(9, 102, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":105
 *     cdef:
 *         int idx, x, y
 *         int height = bitmap.getHeight()             # <<<<<<<<<<<<<<
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 */
  __Pyx_TraceLine(105,0,__PYX_ERR(9, 105, __pyx_L1_error))
  __pyx_v_height = __pyx_v_bitmap->getHeight();

  /* "src/pyxpdf/imageoutput.pxi":106
 *         int idx, x, y
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()             # <<<<<<<<<<<<<<
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()
 */
  __Pyx_TraceLine(106,0,__PYX_ERR(9, 106, __pyx_L1_error))
  __pyx_v_width = __pyx_v_bitmap->getWidth();

  /* "src/pyxpdf/imageoutput.pxi":107
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()             # <<<<<<<<<<<<<<
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         SplashColorPtr p
 */
  __Pyx_TraceLine(107,0,__PYX_ERR(9, 107, __pyx_L1_error))
  __pyx_v_row_size = __pyx_v_bitmap->getRowSize();

  /* "src/pyxpdf/imageoutput.pxi":108
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()             # <<<<<<<<<<<<<<
 *         SplashColorPtr p
 *         #FIXME: can overflow for large values
 */
  __Pyx_TraceLine(108,0,__PYX_ERR(9, 108, __pyx_L1_error))
  __pyx_v_data = __pyx_v_bitmap->getDataPtr();

  /* "src/pyxpdf/imageoutput.pxi":111
 *         SplashColorPtr p
 *         #FIXME: can overflow for large values
 *         bytearray img = bytearray(height * width * 4)             # <<<<<<<<<<<<<<
 * 
 *     for y in range(height):
 */
  __Pyx_TraceLine(111,0,__PYX_ERR(9, 111, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_long(((__pyx_v_height * __pyx_v_width) * 4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_img = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":113
 *         bytearray img = bytearray(height * width * 4)
 * 
 *     for y in range(height):             # <<<<<<<<<<<<<<
 *         for x in range(width):
 *             p = &data[y * row_size + 4 * x]
 */
  __Pyx_TraceLine(113,0,__PYX_ERR(9, 113, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_height;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "src/pyxpdf/imageoutput.pxi":114
 * 
 *     for y in range(height):
 *         for x in range(width):             # <<<<<<<<<<<<<<
 *             p = &data[y * row_size + 4 * x]
 *             idx = (y * width * 4) + (x * 4)
 */
    __Pyx_TraceLine(114,0,__PYX_ERR(9, 114, __pyx_L1_error))
    __pyx_t_6 = __pyx_v_width;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_x = __pyx_t_8;

      /* "src/pyxpdf/imageoutput.pxi":115
 *     for y in range(height):
 *         for x in range(width):
 *             p = &data[y * row_size + 4 * x]             # <<<<<<<<<<<<<<
 *             idx = (y * width * 4) + (x * 4)
 *             img[idx + 0] = p[0]
 */
      __Pyx_TraceLine(115,0,__PYX_ERR(9, 115, __pyx_L1_error))
      __pyx_v_p = (&(__pyx_v_data[((__pyx_v_y * __pyx_v_row_size) + (4 * __pyx_v_x))]));

      /* "src/pyxpdf/imageoutput.pxi":116
 *         for x in range(width):
 *             p = &data[y * row_size + 4 * x]
 *             idx = (y * width * 4) + (x * 4)             # <<<<<<<<<<<<<<
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = p[1]
 */
      __Pyx_TraceLine(116,0,__PYX_ERR(9, 116, __pyx_L1_error))
      __pyx_v_idx = (((__pyx_v_y * __pyx_v_width) * 4) + (__pyx_v_x * 4));

      /* "src/pyxpdf/imageoutput.pxi":117
 *             p = &data[y * row_size + 4 * x]
 *             idx = (y * width * 4) + (x * 4)
 *             img[idx + 0] = p[0]             # <<<<<<<<<<<<<<
 *             img[idx + 1] = p[1]
 *             img[idx + 2] = p[2]
 */
      __Pyx_TraceLine(117,0,__PYX_ERR(9, 117, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 0);
      if (unlikely((__pyx_v_p[0]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 117, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[0])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 117, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":118
 *             idx = (y * width * 4) + (x * 4)
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = p[1]             # <<<<<<<<<<<<<<
 *             img[idx + 2] = p[2]
 *             img[idx + 3] = p[3]
 */
      __Pyx_TraceLine(118,0,__PYX_ERR(9, 118, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 1);
      if (unlikely((__pyx_v_p[1]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 118, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[1])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 118, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":119
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = p[1]
 *             img[idx + 2] = p[2]             # <<<<<<<<<<<<<<
 *             img[idx + 3] = p[3]
 *     return img
 */
      __Pyx_TraceLine(119,0,__PYX_ERR(9, 119, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 2);
      if (unlikely((__pyx_v_p[2]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 119, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[2])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 119, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":120
 *             img[idx + 1] = p[1]
 *             img[idx + 2] = p[2]
 *             img[idx + 3] = p[3]             # <<<<<<<<<<<<<<
 *     return img
 * 
 */
      __Pyx_TraceLine(120,0,__PYX_ERR(9, 120, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 3);
      if (unlikely((__pyx_v_p[3]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 120, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[3])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 120, __pyx_L1_error)
    }
  }

  /* "src/pyxpdf/imageoutput.pxi":121
 *             img[idx + 2] = p[2]
 *             img[idx + 3] = p[3]
 *     return img             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(121,0,__PYX_ERR(9, 121, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_img);
  __pyx_r = __pyx_v_img;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":102
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_4comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.splash_bitmap_to_8bpc_4comp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_img);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":124
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_3comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_3comp(SplashBitmap *__pyx_v_bitmap) {
  int __pyx_v_idx;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_pixel_width;
  int __pyx_v_height;
  int __pyx_v_width;
  SplashBitmapRowSize __pyx_v_row_size;
  SplashColorPtr __pyx_v_data;
  SplashColorPtr __pyx_v_p;
  PyObject *__pyx_v_img = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("splash_bitmap_to_8bpc_3comp", 0);
  __Pyx_TraceCall("splash_bitmap_to_8bpc_3comp", __pyx_f[9], 124, 0, __PYX_ERR(9, 124, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":127
 *     cdef:
 *         int idx, x, y
 *         int pixel_width = 3             # <<<<<<<<<<<<<<
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 */
  __Pyx_TraceLine(127,0,__PYX_ERR(9, 127, __pyx_L1_error))
  __pyx_v_pixel_width = 3;

  /* "src/pyxpdf/imageoutput.pxi":128
 *         int idx, x, y
 *         int pixel_width = 3
 *         int height = bitmap.getHeight()             # <<<<<<<<<<<<<<
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 */
  __Pyx_TraceLine(128,0,__PYX_ERR(9, 128, __pyx_L1_error))
  __pyx_v_height = __pyx_v_bitmap->getHeight();

  /* "src/pyxpdf/imageoutput.pxi":129
 *         int pixel_width = 3
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()             # <<<<<<<<<<<<<<
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()
 */
  __Pyx_TraceLine(129,0,__PYX_ERR(9, 129, __pyx_L1_error))
  __pyx_v_width = __pyx_v_bitmap->getWidth();

  /* "src/pyxpdf/imageoutput.pxi":130
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()             # <<<<<<<<<<<<<<
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         SplashColorPtr p
 */
  __Pyx_TraceLine(130,0,__PYX_ERR(9, 130, __pyx_L1_error))
  __pyx_v_row_size = __pyx_v_bitmap->getRowSize();

  /* "src/pyxpdf/imageoutput.pxi":131
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()             # <<<<<<<<<<<<<<
 *         SplashColorPtr p
 *         #FIXME: can overflow for large values
 */
  __Pyx_TraceLine(131,0,__PYX_ERR(9, 131, __pyx_L1_error))
  __pyx_v_data = __pyx_v_bitmap->getDataPtr();

  /* "src/pyxpdf/imageoutput.pxi":134
 *         SplashColorPtr p
 *         #FIXME: can overflow for large values
 *         bytearray img = bytearray(height * width * pixel_width)             # <<<<<<<<<<<<<<
 * 
 *     for y in range(height):
 */
  __Pyx_TraceLine(134,0,__PYX_ERR(9, 134, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_int(((__pyx_v_height * __pyx_v_width) * __pyx_v_pixel_width)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_img = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":136
 *         bytearray img = bytearray(height * width * pixel_width)
 * 
 *     for y in range(height):             # <<<<<<<<<<<<<<
 *         for x in range(width):
 *             p = &data[y * row_size + 3 * x]
 */
  __Pyx_TraceLine(136,0,__PYX_ERR(9, 136, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_height;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "src/pyxpdf/imageoutput.pxi":137
 * 
 *     for y in range(height):
 *         for x in range(width):             # <<<<<<<<<<<<<<
 *             p = &data[y * row_size + 3 * x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 */
    __Pyx_TraceLine(137,0,__PYX_ERR(9, 137, __pyx_L1_error))
    __pyx_t_6 = __pyx_v_width;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_x = __pyx_t_8;

      /* "src/pyxpdf/imageoutput.pxi":138
 *     for y in range(height):
 *         for x in range(width):
 *             p = &data[y * row_size + 3 * x]             # <<<<<<<<<<<<<<
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]
 */
      __Pyx_TraceLine(138,0,__PYX_ERR(9, 138, __pyx_L1_error))
      __pyx_v_p = (&(__pyx_v_data[((__pyx_v_y * __pyx_v_row_size) + (3 * __pyx_v_x))]));

      /* "src/pyxpdf/imageoutput.pxi":139
 *         for x in range(width):
 *             p = &data[y * row_size + 3 * x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)             # <<<<<<<<<<<<<<
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = p[1]
 */
      __Pyx_TraceLine(139,0,__PYX_ERR(9, 139, __pyx_L1_error))
      __pyx_v_idx = (((__pyx_v_y * __pyx_v_width) * __pyx_v_pixel_width) + (__pyx_v_x * __pyx_v_pixel_width));

      /* "src/pyxpdf/imageoutput.pxi":140
 *             p = &data[y * row_size + 3 * x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]             # <<<<<<<<<<<<<<
 *             img[idx + 1] = p[1]
 *             img[idx + 2] = p[2]
 */
      __Pyx_TraceLine(140,0,__PYX_ERR(9, 140, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 0);
      if (unlikely((__pyx_v_p[0]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 140, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[0])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 140, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":141
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = p[1]             # <<<<<<<<<<<<<<
 *             img[idx + 2] = p[2]
 *     return img
 */
      __Pyx_TraceLine(141,0,__PYX_ERR(9, 141, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 1);
      if (unlikely((__pyx_v_p[1]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 141, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[1])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 141, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":142
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = p[1]
 *             img[idx + 2] = p[2]             # <<<<<<<<<<<<<<
 *     return img
 * 
 */
      __Pyx_TraceLine(142,0,__PYX_ERR(9, 142, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 2);
      if (unlikely((__pyx_v_p[2]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 142, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[2])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 142, __pyx_L1_error)
    }
  }

  /* "src/pyxpdf/imageoutput.pxi":143
 *             img[idx + 1] = p[1]
 *             img[idx + 2] = p[2]
 *     return img             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(143,0,__PYX_ERR(9, 143, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_img);
  __pyx_r = __pyx_v_img;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":124
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_3comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.splash_bitmap_to_8bpc_3comp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_img);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":146
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_3comp_with_alpha(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_3comp_with_alpha(SplashBitmap *__pyx_v_bitmap) {
  int __pyx_v_idx;
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_pixel_width;
  int __pyx_v_height;
  int __pyx_v_width;
  SplashBitmapRowSize __pyx_v_row_size;
  SplashColorPtr __pyx_v_data;
  Guchar *__pyx_v_alpha_data;
  SplashColorPtr __pyx_v_p;
  Guchar __pyx_v_ap;
  PyObject *__pyx_v_img = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("splash_bitmap_to_8bpc_3comp_with_alpha", 0);
  __Pyx_TraceCall("splash_bitmap_to_8bpc_3comp_with_alpha", __pyx_f[9], 146, 0, __PYX_ERR(9, 146, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":149
 *     cdef:
 *         int idx, x, y
 *         int pixel_width = 4             # <<<<<<<<<<<<<<
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 */
  __Pyx_TraceLine(149,0,__PYX_ERR(9, 149, __pyx_L1_error))
  __pyx_v_pixel_width = 4;

  /* "src/pyxpdf/imageoutput.pxi":150
 *         int idx, x, y
 *         int pixel_width = 4
 *         int height = bitmap.getHeight()             # <<<<<<<<<<<<<<
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 */
  __Pyx_TraceLine(150,0,__PYX_ERR(9, 150, __pyx_L1_error))
  __pyx_v_height = __pyx_v_bitmap->getHeight();

  /* "src/pyxpdf/imageoutput.pxi":151
 *         int pixel_width = 4
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()             # <<<<<<<<<<<<<<
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()
 */
  __Pyx_TraceLine(151,0,__PYX_ERR(9, 151, __pyx_L1_error))
  __pyx_v_width = __pyx_v_bitmap->getWidth();

  /* "src/pyxpdf/imageoutput.pxi":152
 *         int height = bitmap.getHeight()
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()             # <<<<<<<<<<<<<<
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         Guchar *alpha_data = bitmap.getAlphaPtr()
 */
  __Pyx_TraceLine(152,0,__PYX_ERR(9, 152, __pyx_L1_error))
  __pyx_v_row_size = __pyx_v_bitmap->getRowSize();

  /* "src/pyxpdf/imageoutput.pxi":153
 *         int width = bitmap.getWidth()
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()             # <<<<<<<<<<<<<<
 *         Guchar *alpha_data = bitmap.getAlphaPtr()
 *         SplashColorPtr p
 */
  __Pyx_TraceLine(153,0,__PYX_ERR(9, 153, __pyx_L1_error))
  __pyx_v_data = __pyx_v_bitmap->getDataPtr();

  /* "src/pyxpdf/imageoutput.pxi":154
 *         SplashBitmapRowSize row_size = bitmap.getRowSize()
 *         SplashColorPtr data = bitmap.getDataPtr()
 *         Guchar *alpha_data = bitmap.getAlphaPtr()             # <<<<<<<<<<<<<<
 *         SplashColorPtr p
 *         Guchar ap
 */
  __Pyx_TraceLine(154,0,__PYX_ERR(9, 154, __pyx_L1_error))
  __pyx_v_alpha_data = __pyx_v_bitmap->getAlphaPtr();

  /* "src/pyxpdf/imageoutput.pxi":158
 *         Guchar ap
 *         #FIXME: can overflow for large values
 *         bytearray img = bytearray(height * width * pixel_width)             # <<<<<<<<<<<<<<
 * 
 *     for y in range(height):
 */
  __Pyx_TraceLine(158,0,__PYX_ERR(9, 158, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_int(((__pyx_v_height * __pyx_v_width) * __pyx_v_pixel_width)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_img = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":160
 *         bytearray img = bytearray(height * width * pixel_width)
 * 
 *     for y in range(height):             # <<<<<<<<<<<<<<
 *         for x in range(width):
 *             p = &data[y * row_size + 3 * x]
 */
  __Pyx_TraceLine(160,0,__PYX_ERR(9, 160, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_height;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "src/pyxpdf/imageoutput.pxi":161
 * 
 *     for y in range(height):
 *         for x in range(width):             # <<<<<<<<<<<<<<
 *             p = &data[y * row_size + 3 * x]
 *             ap = alpha_data[y * <size_t>width + x]
 */
    __Pyx_TraceLine(161,0,__PYX_ERR(9, 161, __pyx_L1_error))
    __pyx_t_6 = __pyx_v_width;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_x = __pyx_t_8;

      /* "src/pyxpdf/imageoutput.pxi":162
 *     for y in range(height):
 *         for x in range(width):
 *             p = &data[y * row_size + 3 * x]             # <<<<<<<<<<<<<<
 *             ap = alpha_data[y * <size_t>width + x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 */
      __Pyx_TraceLine(162,0,__PYX_ERR(9, 162, __pyx_L1_error))
      __pyx_v_p = (&(__pyx_v_data[((__pyx_v_y * __pyx_v_row_size) + (3 * __pyx_v_x))]));

      /* "src/pyxpdf/imageoutput.pxi":163
 *         for x in range(width):
 *             p = &data[y * row_size + 3 * x]
 *             ap = alpha_data[y * <size_t>width + x]             # <<<<<<<<<<<<<<
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]
 */
      __Pyx_TraceLine(163,0,__PYX_ERR(9, 163, __pyx_L1_error))
      __pyx_v_ap = (__pyx_v_alpha_data[((__pyx_v_y * ((size_t)__pyx_v_width)) + __pyx_v_x)]);

      /* "src/pyxpdf/imageoutput.pxi":164
 *             p = &data[y * row_size + 3 * x]
 *             ap = alpha_data[y * <size_t>width + x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)             # <<<<<<<<<<<<<<
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = p[1]
 */
      __Pyx_TraceLine(164,0,__PYX_ERR(9, 164, __pyx_L1_error))
      __pyx_v_idx = (((__pyx_v_y * __pyx_v_width) * __pyx_v_pixel_width) + (__pyx_v_x * __pyx_v_pixel_width));

      /* "src/pyxpdf/imageoutput.pxi":165
 *             ap = alpha_data[y * <size_t>width + x]
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]             # <<<<<<<<<<<<<<
 *             img[idx + 1] = p[1]
 *             img[idx + 2] = p[2]
 */
      __Pyx_TraceLine(165,0,__PYX_ERR(9, 165, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 0);
      if (unlikely((__pyx_v_p[0]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 165, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[0])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 165, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":166
 *             idx = (y * width * pixel_width) + (x * pixel_width)
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = p[1]             # <<<<<<<<<<<<<<
 *             img[idx + 2] = p[2]
 *             img[idx + 3] = ap
 */
      __Pyx_TraceLine(166,0,__PYX_ERR(9, 166, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 1);
      if (unlikely((__pyx_v_p[1]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 166, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[1])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 166, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":167
 *             img[idx + 0] = p[0]
 *             img[idx + 1] = p[1]
 *             img[idx + 2] = p[2]             # <<<<<<<<<<<<<<
 *             img[idx + 3] = ap
 *     return img
 */
      __Pyx_TraceLine(167,0,__PYX_ERR(9, 167, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 2);
      if (unlikely((__pyx_v_p[2]) > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 167, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)(__pyx_v_p[2])), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 167, __pyx_L1_error)

      /* "src/pyxpdf/imageoutput.pxi":168
 *             img[idx + 1] = p[1]
 *             img[idx + 2] = p[2]
 *             img[idx + 3] = ap             # <<<<<<<<<<<<<<
 *     return img
 * 
 */
      __Pyx_TraceLine(168,0,__PYX_ERR(9, 168, __pyx_L1_error))
      __pyx_t_9 = (__pyx_v_idx + 3);
      if (unlikely(__pyx_v_ap > 255)) {
        PyErr_SetString(PyExc_ValueError, "byte must be in range(0, 256)"); __PYX_ERR(9, 168, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt_ByteArray(__pyx_v_img, __pyx_t_9, ((unsigned char)__pyx_v_ap), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) __PYX_ERR(9, 168, __pyx_L1_error)
    }
  }

  /* "src/pyxpdf/imageoutput.pxi":169
 *             img[idx + 2] = p[2]
 *             img[idx + 3] = ap
 *     return img             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(169,0,__PYX_ERR(9, 169, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_img);
  __pyx_r = __pyx_v_img;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":146
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_3comp_with_alpha(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.splash_bitmap_to_8bpc_3comp_with_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_img);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":185
 * }
 * 
 * cdef bytearray splash_bitmap_to_buffer(SplashBitmap *bitmap, mode):             # <<<<<<<<<<<<<<
 *     if mode == "CMYK":
 *         return splash_bitmap_to_8bpc_4comp(bitmap)
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_buffer(SplashBitmap *__pyx_v_bitmap, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("splash_bitmap_to_buffer", 0);
  __Pyx_TraceCall("splash_bitmap_to_buffer", __pyx_f[9], 185, 0, __PYX_ERR(9, 185, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":186
 * 
 * cdef bytearray splash_bitmap_to_buffer(SplashBitmap *bitmap, mode):
 *     if mode == "CMYK":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_4comp(bitmap)
 *     elif mode == "RGB":
 */
  __Pyx_TraceLine(186,0,__PYX_ERR(9, 186, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_CMYK, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 186, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":187
 * cdef bytearray splash_bitmap_to_buffer(SplashBitmap *bitmap, mode):
 *     if mode == "CMYK":
 *         return splash_bitmap_to_8bpc_4comp(bitmap)             # <<<<<<<<<<<<<<
 *     elif mode == "RGB":
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 */
    __Pyx_TraceLine(187,0,__PYX_ERR(9, 187, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_4comp(__pyx_v_bitmap); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/imageoutput.pxi":186
 * 
 * cdef bytearray splash_bitmap_to_buffer(SplashBitmap *bitmap, mode):
 *     if mode == "CMYK":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_4comp(bitmap)
 *     elif mode == "RGB":
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":188
 *     if mode == "CMYK":
 *         return splash_bitmap_to_8bpc_4comp(bitmap)
 *     elif mode == "RGB":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "RGBA":
 */
  __Pyx_TraceLine(188,0,__PYX_ERR(9, 188, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_RGB, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 188, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":189
 *         return splash_bitmap_to_8bpc_4comp(bitmap)
 *     elif mode == "RGB":
 *         return splash_bitmap_to_8bpc_3comp(bitmap)             # <<<<<<<<<<<<<<
 *     elif mode == "RGBA":
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 */
    __Pyx_TraceLine(189,0,__PYX_ERR(9, 189, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_3comp(__pyx_v_bitmap); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/imageoutput.pxi":188
 *     if mode == "CMYK":
 *         return splash_bitmap_to_8bpc_4comp(bitmap)
 *     elif mode == "RGB":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "RGBA":
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":190
 *     elif mode == "RGB":
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "RGBA":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "BGR":
 */
  __Pyx_TraceLine(190,0,__PYX_ERR(9, 190, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_RGBA, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 190, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":191
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "RGBA":
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)             # <<<<<<<<<<<<<<
 *     elif mode == "BGR":
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 */
    __Pyx_TraceLine(191,0,__PYX_ERR(9, 191, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_3comp_with_alpha(__pyx_v_bitmap); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/imageoutput.pxi":190
 *     elif mode == "RGB":
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "RGBA":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "BGR":
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":192
 *     elif mode == "RGBA":
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "BGR":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "BGRA":
 */
  __Pyx_TraceLine(192,0,__PYX_ERR(9, 192, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_BGR, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 192, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":193
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "BGR":
 *         return splash_bitmap_to_8bpc_3comp(bitmap)             # <<<<<<<<<<<<<<
 *     elif mode == "BGRA":
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 */
    __Pyx_TraceLine(193,0,__PYX_ERR(9, 193, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_3comp(__pyx_v_bitmap); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/imageoutput.pxi":192
 *     elif mode == "RGBA":
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "BGR":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "BGRA":
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":194
 *     elif mode == "BGR":
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "BGRA":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "L":
 */
  __Pyx_TraceLine(194,0,__PYX_ERR(9, 194, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_BGRA, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 194, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":195
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "BGRA":
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)             # <<<<<<<<<<<<<<
 *     elif mode == "L":
 *         return splash_bitmap_to_8bpc_1comp(bitmap)
 */
    __Pyx_TraceLine(195,0,__PYX_ERR(9, 195, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_3comp_with_alpha(__pyx_v_bitmap); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/imageoutput.pxi":194
 *     elif mode == "BGR":
 *         return splash_bitmap_to_8bpc_3comp(bitmap)
 *     elif mode == "BGRA":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "L":
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":196
 *     elif mode == "BGRA":
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "L":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_1comp(bitmap)
 *     elif mode == "LA":
 */
  __Pyx_TraceLine(196,0,__PYX_ERR(9, 196, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_L, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 196, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":197
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "L":
 *         return splash_bitmap_to_8bpc_1comp(bitmap)             # <<<<<<<<<<<<<<
 *     elif mode == "LA":
 *         return splash_bitmap_to_8bpc_1comp_with_alpha(bitmap)
 */
    __Pyx_TraceLine(197,0,__PYX_ERR(9, 197, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_1comp(__pyx_v_bitmap); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/imageoutput.pxi":196
 *     elif mode == "BGRA":
 *         return splash_bitmap_to_8bpc_3comp_with_alpha(bitmap)
 *     elif mode == "L":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_1comp(bitmap)
 *     elif mode == "LA":
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":198
 *     elif mode == "L":
 *         return splash_bitmap_to_8bpc_1comp(bitmap)
 *     elif mode == "LA":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_1comp_with_alpha(bitmap)
 *     elif mode == "1":
 */
  __Pyx_TraceLine(198,0,__PYX_ERR(9, 198, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_LA, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 198, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":199
 *         return splash_bitmap_to_8bpc_1comp(bitmap)
 *     elif mode == "LA":
 *         return splash_bitmap_to_8bpc_1comp_with_alpha(bitmap)             # <<<<<<<<<<<<<<
 *     elif mode == "1":
 *         return splash_bitmap_to_1bpc_1comp(bitmap)
 */
    __Pyx_TraceLine(199,0,__PYX_ERR(9, 199, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_8bpc_1comp_with_alpha(__pyx_v_bitmap); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/imageoutput.pxi":198
 *     elif mode == "L":
 *         return splash_bitmap_to_8bpc_1comp(bitmap)
 *     elif mode == "LA":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_8bpc_1comp_with_alpha(bitmap)
 *     elif mode == "1":
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":200
 *     elif mode == "LA":
 *         return splash_bitmap_to_8bpc_1comp_with_alpha(bitmap)
 *     elif mode == "1":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_1bpc_1comp(bitmap)
 *     else:
 */
  __Pyx_TraceLine(200,0,__PYX_ERR(9, 200, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_kp_u_1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 200, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "src/pyxpdf/imageoutput.pxi":201
 *         return splash_bitmap_to_8bpc_1comp_with_alpha(bitmap)
 *     elif mode == "1":
 *         return splash_bitmap_to_1bpc_1comp(bitmap)             # <<<<<<<<<<<<<<
 *     else:
 *         raise Exception(f"'{mode}' color mode is not supported.")
 */
    __Pyx_TraceLine(201,0,__PYX_ERR(9, 201, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_1bpc_1comp(__pyx_v_bitmap); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/imageoutput.pxi":200
 *     elif mode == "LA":
 *         return splash_bitmap_to_8bpc_1comp_with_alpha(bitmap)
 *     elif mode == "1":             # <<<<<<<<<<<<<<
 *         return splash_bitmap_to_1bpc_1comp(bitmap)
 *     else:
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":203
 *         return splash_bitmap_to_1bpc_1comp(bitmap)
 *     else:
 *         raise Exception(f"'{mode}' color mode is not supported.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(203,0,__PYX_ERR(9, 203, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u__52);
    __pyx_t_3 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__52);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u__52);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_mode, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_color_mode_is_not_supported);
    __pyx_t_3 += 30;
    __Pyx_GIVEREF(__pyx_kp_u_color_mode_is_not_supported);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_color_mode_is_not_supported);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(9, 203, __pyx_L1_error)
  }

  /* "src/pyxpdf/imageoutput.pxi":185
 * }
 * 
 * cdef bytearray splash_bitmap_to_buffer(SplashBitmap *bitmap, mode):             # <<<<<<<<<<<<<<
 *     if mode == "CMYK":
 *         return splash_bitmap_to_8bpc_4comp(bitmap)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.splash_bitmap_to_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":206
 * 
 * 
 * cdef object pillow_image_from_buffer(object mode, int height, int width, object buffer):             # <<<<<<<<<<<<<<
 *     if not ("PIL.Image" in available_deps):
 *         raise PDFError("'Pillow' is not installed. Please install it.")
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_pillow_image_from_buffer(PyObject *__pyx_v_mode, int __pyx_v_height, int __pyx_v_width, PyObject *__pyx_v_buffer) {
  PyObject *__pyx_v_Image = 0;
  PyObject *__pyx_v_bbuff = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pillow_image_from_buffer", 0);
  __Pyx_TraceCall("pillow_image_from_buffer", __pyx_f[9], 206, 0, __PYX_ERR(9, 206, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":207
 * 
 * cdef object pillow_image_from_buffer(object mode, int height, int width, object buffer):
 *     if not ("PIL.Image" in available_deps):             # <<<<<<<<<<<<<<
 *         raise PDFError("'Pillow' is not installed. Please install it.")
 * 
 */
  __Pyx_TraceLine(207,0,__PYX_ERR(9, 207, __pyx_L1_error))
  if (unlikely(__pyx_v_6pyxpdf_4xpdf_available_deps == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(9, 207, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_kp_u_PIL_Image, __pyx_v_6pyxpdf_4xpdf_available_deps, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 207, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "src/pyxpdf/imageoutput.pxi":208
 * cdef object pillow_image_from_buffer(object mode, int height, int width, object buffer):
 *     if not ("PIL.Image" in available_deps):
 *         raise PDFError("'Pillow' is not installed. Please install it.")             # <<<<<<<<<<<<<<
 * 
 *     cdef object Image = available_deps['PIL.Image']
 */
    __Pyx_TraceLine(208,0,__PYX_ERR(9, 208, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError), __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(9, 208, __pyx_L1_error)

    /* "src/pyxpdf/imageoutput.pxi":207
 * 
 * cdef object pillow_image_from_buffer(object mode, int height, int width, object buffer):
 *     if not ("PIL.Image" in available_deps):             # <<<<<<<<<<<<<<
 *         raise PDFError("'Pillow' is not installed. Please install it.")
 * 
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":210
 *         raise PDFError("'Pillow' is not installed. Please install it.")
 * 
 *     cdef object Image = available_deps['PIL.Image']             # <<<<<<<<<<<<<<
 *     cdef bytes bbuff = bytes(buffer)
 *     return Image.frombuffer(IMAGE_MODES[mode][0], (width, height), bbuff, 'raw', mode, 0, 1)
 */
  __Pyx_TraceLine(210,0,__PYX_ERR(9, 210, __pyx_L1_error))
  if (unlikely(__pyx_v_6pyxpdf_4xpdf_available_deps == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(9, 210, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_6pyxpdf_4xpdf_available_deps, __pyx_kp_u_PIL_Image); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_Image = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":211
 * 
 *     cdef object Image = available_deps['PIL.Image']
 *     cdef bytes bbuff = bytes(buffer)             # <<<<<<<<<<<<<<
 *     return Image.frombuffer(IMAGE_MODES[mode][0], (width, height), bbuff, 'raw', mode, 0, 1)
 * 
 */
  __Pyx_TraceLine(211,0,__PYX_ERR(9, 211, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_v_buffer); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_bbuff = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":212
 *     cdef object Image = available_deps['PIL.Image']
 *     cdef bytes bbuff = bytes(buffer)
 *     return Image.frombuffer(IMAGE_MODES[mode][0], (width, height), bbuff, 'raw', mode, 0, 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(212,0,__PYX_ERR(9, 212, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_Image, __pyx_n_s_frombuffer); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_v_6pyxpdf_4xpdf_IMAGE_MODES == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(9, 212, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_6pyxpdf_4xpdf_IMAGE_MODES, __pyx_v_mode); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[8] = {__pyx_t_7, __pyx_t_6, __pyx_t_8, __pyx_v_bbuff, __pyx_n_u_raw, __pyx_v_mode, __pyx_int_0, __pyx_int_1};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 7+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 212, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[8] = {__pyx_t_7, __pyx_t_6, __pyx_t_8, __pyx_v_bbuff, __pyx_n_u_raw, __pyx_v_mode, __pyx_int_0, __pyx_int_1};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 7+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 212, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(7+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_9, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_9, __pyx_t_8);
    __Pyx_INCREF(__pyx_v_bbuff);
    __Pyx_GIVEREF(__pyx_v_bbuff);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_9, __pyx_v_bbuff);
    __Pyx_INCREF(__pyx_n_u_raw);
    __Pyx_GIVEREF(__pyx_n_u_raw);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_9, __pyx_n_u_raw);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_9, __pyx_v_mode);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_9, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_5, 6+__pyx_t_9, __pyx_int_1);
    __pyx_t_6 = 0;
    __pyx_t_8 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":206
 * 
 * 
 * cdef object pillow_image_from_buffer(object mode, int height, int width, object buffer):             # <<<<<<<<<<<<<<
 *     if not ("PIL.Image" in available_deps):
 *         raise PDFError("'Pillow' is not installed. Please install it.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.pillow_image_from_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Image);
  __Pyx_XDECREF(__pyx_v_bbuff);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15RawImageControl_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_15RawImageControl___reduce_cython__[] = "RawImageControl.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_15RawImageControl_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15RawImageControl_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_15RawImageControl___reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15RawImageControl_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_15RawImageControl___reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_15RawImageControl___reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__54)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_RawImageControl); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RawImageControl__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_RawImageControl); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageControl.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RawImageControl__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15RawImageControl_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_15RawImageControl_2__setstate_cython__[] = "RawImageControl.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_15RawImageControl_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15RawImageControl_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_15RawImageControl_2__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15RawImageControl_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_15RawImageControl_2__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_15RawImageControl_2__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__55)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RawImageControl__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_RawImageControl__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RawImageControl__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageControl.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":290
 * 
 * 
 *     def __cinit__(self, Document doc not None,             # <<<<<<<<<<<<<<
 *                   object mode = "RGB",
 *                   object paper_color = None,
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc = 0;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_paper_color = 0;
  double __pyx_v_resolution;
  double __pyx_v_resolution_x;
  double __pyx_v_resolution_y;
  PyObject *__pyx_v_anti_alias = 0;
  PyObject *__pyx_v_no_composite = 0;
  PyObject *__pyx_v_use_cropbox = 0;
  PyObject *__pyx_v_scale_before_rotation = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_doc,&__pyx_n_s_mode,&__pyx_n_s_paper_color,&__pyx_n_s_resolution,&__pyx_n_s_resolution_x,&__pyx_n_s_resolution_y,&__pyx_n_s_anti_alias,&__pyx_n_s_no_composite,&__pyx_n_s_use_cropbox,&__pyx_n_s_scale_before_rotation,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_u_RGB);

    /* "src/pyxpdf/imageoutput.pxi":292
 *     def __cinit__(self, Document doc not None,
 *                   object mode = "RGB",
 *                   object paper_color = None,             # <<<<<<<<<<<<<<
 *                   double resolution = BITMAP_RESOLUTION,
 *                   double resolution_x = BITMAP_RESOLUTION,
 */
    values[2] = ((PyObject *)Py_None);

    /* "src/pyxpdf/imageoutput.pxi":296
 *                   double resolution_x = BITMAP_RESOLUTION,
 *                   double resolution_y = BITMAP_RESOLUTION,
 *                   anti_alias=True, no_composite=False,             # <<<<<<<<<<<<<<
 *                   use_cropbox = False, scale_before_rotation = False):
 *         if paper_color != None and len(paper_color) not in (3, 4):
 */
    values[6] = ((PyObject *)Py_True);
    values[7] = ((PyObject *)Py_False);

    /* "src/pyxpdf/imageoutput.pxi":297
 *                   double resolution_y = BITMAP_RESOLUTION,
 *                   anti_alias=True, no_composite=False,
 *                   use_cropbox = False, scale_before_rotation = False):             # <<<<<<<<<<<<<<
 *         if paper_color != None and len(paper_color) not in (3, 4):
 *             raise ValueError(f"'paper_color' must be 3 (RGB) or 4 (CMYK) value (0-255) list/tuple.")
 */
    values[8] = ((PyObject *)Py_False);
    values[9] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_doc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_paper_color);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_resolution);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_resolution_x);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_resolution_y);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_anti_alias);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_no_composite);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_cropbox);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_before_rotation);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(9, 290, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)values[0]);
    __pyx_v_mode = values[1];
    __pyx_v_paper_color = values[2];
    if (values[3]) {
      __pyx_v_resolution = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_resolution == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 293, __pyx_L3_error)
    } else {
      __pyx_v_resolution = ((double)150.0);
    }
    if (values[4]) {
      __pyx_v_resolution_x = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_resolution_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 294, __pyx_L3_error)
    } else {
      __pyx_v_resolution_x = ((double)150.0);
    }
    if (values[5]) {
      __pyx_v_resolution_y = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_resolution_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 295, __pyx_L3_error)
    } else {
      __pyx_v_resolution_y = ((double)150.0);
    }
    __pyx_v_anti_alias = values[6];
    __pyx_v_no_composite = values[7];
    __pyx_v_use_cropbox = values[8];
    __pyx_v_scale_before_rotation = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 290, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_doc), __pyx_ptype_6pyxpdf_4xpdf_Document, 0, "doc", 0))) __PYX_ERR(9, 290, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput___cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self), __pyx_v_doc, __pyx_v_mode, __pyx_v_paper_color, __pyx_v_resolution, __pyx_v_resolution_x, __pyx_v_resolution_y, __pyx_v_anti_alias, __pyx_v_no_composite, __pyx_v_use_cropbox, __pyx_v_scale_before_rotation);

  /* "src/pyxpdf/imageoutput.pxi":290
 * 
 * 
 *     def __cinit__(self, Document doc not None,             # <<<<<<<<<<<<<<
 *                   object mode = "RGB",
 *                   object paper_color = None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc, PyObject *__pyx_v_mode, PyObject *__pyx_v_paper_color, double __pyx_v_resolution, double __pyx_v_resolution_x, double __pyx_v_resolution_y, PyObject *__pyx_v_anti_alias, PyObject *__pyx_v_no_composite, PyObject *__pyx_v_use_cropbox, PyObject *__pyx_v_scale_before_rotation) {
  SplashColor __pyx_v__c_paper_color;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Guchar __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[9], 290, 0, __PYX_ERR(9, 290, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_paper_color);

  /* "src/pyxpdf/imageoutput.pxi":298
 *                   anti_alias=True, no_composite=False,
 *                   use_cropbox = False, scale_before_rotation = False):
 *         if paper_color != None and len(paper_color) not in (3, 4):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"'paper_color' must be 3 (RGB) or 4 (CMYK) value (0-255) list/tuple.")
 * 
 */
  __Pyx_TraceLine(298,0,__PYX_ERR(9, 298, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_paper_color, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 298, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(9, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyObject_Length(__pyx_v_paper_color); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(9, 298, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 != 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_5 = ((__pyx_t_4 != 4) != 0);
  __pyx_t_3 = __pyx_t_5;
  __pyx_L6_bool_binop_done:;
  __pyx_t_5 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/imageoutput.pxi":299
 *                   use_cropbox = False, scale_before_rotation = False):
 *         if paper_color != None and len(paper_color) not in (3, 4):
 *             raise ValueError(f"'paper_color' must be 3 (RGB) or 4 (CMYK) value (0-255) list/tuple.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __Pyx_TraceLine(299,0,__PYX_ERR(9, 299, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(9, 299, __pyx_L1_error)

    /* "src/pyxpdf/imageoutput.pxi":298
 *                   anti_alias=True, no_composite=False,
 *                   use_cropbox = False, scale_before_rotation = False):
 *         if paper_color != None and len(paper_color) not in (3, 4):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"'paper_color' must be 3 (RGB) or 4 (CMYK) value (0-255) list/tuple.")
 * 
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":304
 *             SplashColor _c_paper_color
 * 
 *         if paper_color == None:             # <<<<<<<<<<<<<<
 *             # default paper color is white
 *             if mode == 'CMYK':
 */
  __Pyx_TraceLine(304,0,__PYX_ERR(9, 304, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_paper_color, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 304, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":306
 *         if paper_color == None:
 *             # default paper color is white
 *             if mode == 'CMYK':             # <<<<<<<<<<<<<<
 *                 paper_color = (0,0,0,0)
 *             else:
 */
    __Pyx_TraceLine(306,0,__PYX_ERR(9, 306, __pyx_L1_error))
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_CMYK, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 306, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "src/pyxpdf/imageoutput.pxi":307
 *             # default paper color is white
 *             if mode == 'CMYK':
 *                 paper_color = (0,0,0,0)             # <<<<<<<<<<<<<<
 *             else:
 *                 paper_color = (255,255,255)
 */
      __Pyx_TraceLine(307,0,__PYX_ERR(9, 307, __pyx_L1_error))
      __Pyx_INCREF(__pyx_tuple__57);
      __Pyx_DECREF_SET(__pyx_v_paper_color, __pyx_tuple__57);

      /* "src/pyxpdf/imageoutput.pxi":306
 *         if paper_color == None:
 *             # default paper color is white
 *             if mode == 'CMYK':             # <<<<<<<<<<<<<<
 *                 paper_color = (0,0,0,0)
 *             else:
 */
      goto __pyx_L9;
    }

    /* "src/pyxpdf/imageoutput.pxi":309
 *                 paper_color = (0,0,0,0)
 *             else:
 *                 paper_color = (255,255,255)             # <<<<<<<<<<<<<<
 *         _c_paper_color[0] = paper_color[0]
 *         _c_paper_color[1] = paper_color[1]
 */
    __Pyx_TraceLine(309,0,__PYX_ERR(9, 309, __pyx_L1_error))
    /*else*/ {
      __Pyx_INCREF(__pyx_tuple__58);
      __Pyx_DECREF_SET(__pyx_v_paper_color, __pyx_tuple__58);
    }
    __pyx_L9:;

    /* "src/pyxpdf/imageoutput.pxi":304
 *             SplashColor _c_paper_color
 * 
 *         if paper_color == None:             # <<<<<<<<<<<<<<
 *             # default paper color is white
 *             if mode == 'CMYK':
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":310
 *             else:
 *                 paper_color = (255,255,255)
 *         _c_paper_color[0] = paper_color[0]             # <<<<<<<<<<<<<<
 *         _c_paper_color[1] = paper_color[1]
 *         _c_paper_color[2] = paper_color[2]
 */
  __Pyx_TraceLine(310,0,__PYX_ERR(9, 310, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_paper_color, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyInt_As_Guchar(__pyx_t_2); if (unlikely((__pyx_t_6 == ((Guchar)-1)) && PyErr_Occurred())) __PYX_ERR(9, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v__c_paper_color[0]) = __pyx_t_6;

  /* "src/pyxpdf/imageoutput.pxi":311
 *                 paper_color = (255,255,255)
 *         _c_paper_color[0] = paper_color[0]
 *         _c_paper_color[1] = paper_color[1]             # <<<<<<<<<<<<<<
 *         _c_paper_color[2] = paper_color[2]
 *         if mode == 'CMYK':
 */
  __Pyx_TraceLine(311,0,__PYX_ERR(9, 311, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_paper_color, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyInt_As_Guchar(__pyx_t_2); if (unlikely((__pyx_t_6 == ((Guchar)-1)) && PyErr_Occurred())) __PYX_ERR(9, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v__c_paper_color[1]) = __pyx_t_6;

  /* "src/pyxpdf/imageoutput.pxi":312
 *         _c_paper_color[0] = paper_color[0]
 *         _c_paper_color[1] = paper_color[1]
 *         _c_paper_color[2] = paper_color[2]             # <<<<<<<<<<<<<<
 *         if mode == 'CMYK':
 *             _c_paper_color[3] = paper_color[3]
 */
  __Pyx_TraceLine(312,0,__PYX_ERR(9, 312, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_paper_color, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyInt_As_Guchar(__pyx_t_2); if (unlikely((__pyx_t_6 == ((Guchar)-1)) && PyErr_Occurred())) __PYX_ERR(9, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v__c_paper_color[2]) = __pyx_t_6;

  /* "src/pyxpdf/imageoutput.pxi":313
 *         _c_paper_color[1] = paper_color[1]
 *         _c_paper_color[2] = paper_color[2]
 *         if mode == 'CMYK':             # <<<<<<<<<<<<<<
 *             _c_paper_color[3] = paper_color[3]
 * 
 */
  __Pyx_TraceLine(313,0,__PYX_ERR(9, 313, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_n_u_CMYK, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 313, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":314
 *         _c_paper_color[2] = paper_color[2]
 *         if mode == 'CMYK':
 *             _c_paper_color[3] = paper_color[3]             # <<<<<<<<<<<<<<
 * 
 *         if resolution != BITMAP_RESOLUTION:
 */
    __Pyx_TraceLine(314,0,__PYX_ERR(9, 314, __pyx_L1_error))
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_paper_color, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_Guchar(__pyx_t_2); if (unlikely((__pyx_t_6 == ((Guchar)-1)) && PyErr_Occurred())) __PYX_ERR(9, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v__c_paper_color[3]) = __pyx_t_6;

    /* "src/pyxpdf/imageoutput.pxi":313
 *         _c_paper_color[1] = paper_color[1]
 *         _c_paper_color[2] = paper_color[2]
 *         if mode == 'CMYK':             # <<<<<<<<<<<<<<
 *             _c_paper_color[3] = paper_color[3]
 * 
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":316
 *             _c_paper_color[3] = paper_color[3]
 * 
 *         if resolution != BITMAP_RESOLUTION:             # <<<<<<<<<<<<<<
 *             resolution_x = resolution
 *             resolution_y = resolution
 */
  __Pyx_TraceLine(316,0,__PYX_ERR(9, 316, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_resolution != 150.0) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/imageoutput.pxi":317
 * 
 *         if resolution != BITMAP_RESOLUTION:
 *             resolution_x = resolution             # <<<<<<<<<<<<<<
 *             resolution_y = resolution
 * 
 */
    __Pyx_TraceLine(317,0,__PYX_ERR(9, 317, __pyx_L1_error))
    __pyx_v_resolution_x = __pyx_v_resolution;

    /* "src/pyxpdf/imageoutput.pxi":318
 *         if resolution != BITMAP_RESOLUTION:
 *             resolution_x = resolution
 *             resolution_y = resolution             # <<<<<<<<<<<<<<
 * 
 *         self.doc = doc
 */
    __Pyx_TraceLine(318,0,__PYX_ERR(9, 318, __pyx_L1_error))
    __pyx_v_resolution_y = __pyx_v_resolution;

    /* "src/pyxpdf/imageoutput.pxi":316
 *             _c_paper_color[3] = paper_color[3]
 * 
 *         if resolution != BITMAP_RESOLUTION:             # <<<<<<<<<<<<<<
 *             resolution_x = resolution
 *             resolution_y = resolution
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":320
 *             resolution_y = resolution
 * 
 *         self.doc = doc             # <<<<<<<<<<<<<<
 *         self.doc_started = False
 *         self.mode = mode.upper()
 */
  __Pyx_TraceLine(320,0,__PYX_ERR(9, 320, __pyx_L1_error))
  __Pyx_INCREF(((PyObject *)__pyx_v_doc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_doc));
  __Pyx_GOTREF(__pyx_v_self->doc);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->doc));
  __pyx_v_self->doc = __pyx_v_doc;

  /* "src/pyxpdf/imageoutput.pxi":321
 * 
 *         self.doc = doc
 *         self.doc_started = False             # <<<<<<<<<<<<<<
 *         self.mode = mode.upper()
 *         self.resolution_x = resolution_x
 */
  __Pyx_TraceLine(321,0,__PYX_ERR(9, 321, __pyx_L1_error))
  __pyx_v_self->doc_started = 0;

  /* "src/pyxpdf/imageoutput.pxi":322
 *         self.doc = doc
 *         self.doc_started = False
 *         self.mode = mode.upper()             # <<<<<<<<<<<<<<
 *         self.resolution_x = resolution_x
 *         self.resolution_y = resolution_y
 */
  __Pyx_TraceLine(322,0,__PYX_ERR(9, 322, __pyx_L1_error))
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_mode, __pyx_n_s_upper); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->mode);
  __Pyx_DECREF(__pyx_v_self->mode);
  __pyx_v_self->mode = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":323
 *         self.doc_started = False
 *         self.mode = mode.upper()
 *         self.resolution_x = resolution_x             # <<<<<<<<<<<<<<
 *         self.resolution_y = resolution_y
 *         self.use_cropbox = use_cropbox
 */
  __Pyx_TraceLine(323,0,__PYX_ERR(9, 323, __pyx_L1_error))
  __pyx_v_self->resolution_x = __pyx_v_resolution_x;

  /* "src/pyxpdf/imageoutput.pxi":324
 *         self.mode = mode.upper()
 *         self.resolution_x = resolution_x
 *         self.resolution_y = resolution_y             # <<<<<<<<<<<<<<
 *         self.use_cropbox = use_cropbox
 *         self.scale_before_rotation = scale_before_rotation
 */
  __Pyx_TraceLine(324,0,__PYX_ERR(9, 324, __pyx_L1_error))
  __pyx_v_self->resolution_y = __pyx_v_resolution_y;

  /* "src/pyxpdf/imageoutput.pxi":325
 *         self.resolution_x = resolution_x
 *         self.resolution_y = resolution_y
 *         self.use_cropbox = use_cropbox             # <<<<<<<<<<<<<<
 *         self.scale_before_rotation = scale_before_rotation
 *         #self._c_splash_dev = make_unique[SplashOutputDev](SplashColorMode.splashModeBGR8,
 */
  __Pyx_TraceLine(325,0,__PYX_ERR(9, 325, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_use_cropbox); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 325, __pyx_L1_error)
  __pyx_v_self->use_cropbox = __pyx_t_1;

  /* "src/pyxpdf/imageoutput.pxi":326
 *         self.resolution_y = resolution_y
 *         self.use_cropbox = use_cropbox
 *         self.scale_before_rotation = scale_before_rotation             # <<<<<<<<<<<<<<
 *         #self._c_splash_dev = make_unique[SplashOutputDev](SplashColorMode.splashModeBGR8,
 *         #                                                  4, gFalse, _c_paper_color, gTrue,
 */
  __Pyx_TraceLine(326,0,__PYX_ERR(9, 326, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_scale_before_rotation); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 326, __pyx_L1_error)
  __pyx_v_self->scale_before_rotation = __pyx_t_1;

  /* "src/pyxpdf/imageoutput.pxi":330
 *         #                                                  4, gFalse, _c_paper_color, gTrue,
 *         #                                                  to_GBool(anti_alias))
 *         self._init_SplashOutputDev(mode, row_pad=BITMAP_ROW_PAD, paper_color=_c_paper_color,             # <<<<<<<<<<<<<<
 *                                    bitmap_topdown = gTrue,
 *                                    anti_alias = to_GBool(anti_alias))
 */
  __Pyx_TraceLine(330,0,__PYX_ERR(9, 330, __pyx_L1_error))
  __pyx_t_9 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self->__pyx_vtab)->_init_SplashOutputDev(__pyx_v_self, __pyx_v_mode, 4, __pyx_v__c_paper_color, gTrue, __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_anti_alias)); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(9, 330, __pyx_L1_error)

  /* "src/pyxpdf/imageoutput.pxi":334
 *                                    anti_alias = to_GBool(anti_alias))
 *         # set spashoutdev properties
 *         self._c_splash_dev.get().setNoComposite(to_GBool(no_composite))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(334,0,__PYX_ERR(9, 334, __pyx_L1_error))
  __pyx_v_self->_c_splash_dev.get()->setNoComposite(__pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_no_composite));

  /* "src/pyxpdf/imageoutput.pxi":290
 * 
 * 
 *     def __cinit__(self, Document doc not None,             # <<<<<<<<<<<<<<
 *                   object mode = "RGB",
 *                   object paper_color = None,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_paper_color);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":337
 * 
 * 
 *     cdef int _init_SplashOutputDev(self, object mode, int row_pad,             # <<<<<<<<<<<<<<
 *                                    SplashColorPtr paper_color,
 *                                    GBool bitmap_topdown, GBool anti_alias) except -1:
 */

static int __pyx_f_6pyxpdf_4xpdf_14RawImageOutput__init_SplashOutputDev(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_mode, int __pyx_v_row_pad, SplashColorPtr __pyx_v_paper_color, GBool __pyx_v_bitmap_topdown, GBool __pyx_v_anti_alias) {
  SplashColorMode __pyx_v__c_mode;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  SplashColorMode __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_SplashOutputDev", 0);
  __Pyx_TraceCall("_init_SplashOutputDev", __pyx_f[9], 337, 0, __PYX_ERR(9, 337, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":340
 *                                    SplashColorPtr paper_color,
 *                                    GBool bitmap_topdown, GBool anti_alias) except -1:
 *         if mode not in IMAGE_MODES:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"{mode} is not supported.")
 * 
 */
  __Pyx_TraceLine(340,0,__PYX_ERR(9, 340, __pyx_L1_error))
  if (unlikely(__pyx_v_6pyxpdf_4xpdf_IMAGE_MODES == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(9, 340, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_mode, __pyx_v_6pyxpdf_4xpdf_IMAGE_MODES, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 340, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "src/pyxpdf/imageoutput.pxi":341
 *                                    GBool bitmap_topdown, GBool anti_alias) except -1:
 *         if mode not in IMAGE_MODES:
 *             raise ValueError(f"{mode} is not supported.")             # <<<<<<<<<<<<<<
 * 
 *         cdef SplashColorMode _c_mode = IMAGE_MODES[mode][1]
 */
    __Pyx_TraceLine(341,0,__PYX_ERR(9, 341, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_mode, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_kp_u_is_not_supported); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(9, 341, __pyx_L1_error)

    /* "src/pyxpdf/imageoutput.pxi":340
 *                                    SplashColorPtr paper_color,
 *                                    GBool bitmap_topdown, GBool anti_alias) except -1:
 *         if mode not in IMAGE_MODES:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"{mode} is not supported.")
 * 
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":343
 *             raise ValueError(f"{mode} is not supported.")
 * 
 *         cdef SplashColorMode _c_mode = IMAGE_MODES[mode][1]             # <<<<<<<<<<<<<<
 * 
 *         self._c_splash_dev = make_unique[SplashOutputDev](_c_mode, row_pad, gFalse,
 */
  __Pyx_TraceLine(343,0,__PYX_ERR(9, 343, __pyx_L1_error))
  if (unlikely(__pyx_v_6pyxpdf_4xpdf_IMAGE_MODES == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(9, 343, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_6pyxpdf_4xpdf_IMAGE_MODES, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((SplashColorMode)__Pyx_PyInt_As_SplashColorMode(__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(9, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v__c_mode = __pyx_t_5;

  /* "src/pyxpdf/imageoutput.pxi":345
 *         cdef SplashColorMode _c_mode = IMAGE_MODES[mode][1]
 * 
 *         self._c_splash_dev = make_unique[SplashOutputDev](_c_mode, row_pad, gFalse,             # <<<<<<<<<<<<<<
 *                                                          paper_color, bitmap_topdown,
 *                                                          anti_alias)
 */
  __Pyx_TraceLine(345,0,__PYX_ERR(9, 345, __pyx_L1_error))
  __pyx_v_self->_c_splash_dev = std::make_unique<SplashOutputDev>(__pyx_v__c_mode, __pyx_v_row_pad, gFalse, __pyx_v_paper_color, __pyx_v_bitmap_topdown, __pyx_v_anti_alias);

  /* "src/pyxpdf/imageoutput.pxi":348
 *                                                          paper_color, bitmap_topdown,
 *                                                          anti_alias)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(348,0,__PYX_ERR(9, 348, __pyx_L1_error))
  __pyx_r = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":337
 * 
 * 
 *     cdef int _init_SplashOutputDev(self, object mode, int row_pad,             # <<<<<<<<<<<<<<
 *                                    SplashColorPtr paper_color,
 *                                    GBool bitmap_topdown, GBool anti_alias) except -1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput._init_SplashOutputDev", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":351
 * 
 * 
 *     cdef SplashBitmap* _get_SplashBitmap(self, int page_no, int x, int y,             # <<<<<<<<<<<<<<
 *                                          int w, int h, double page_h,
 *                                          double page_w, double res_x,
 */

static SplashBitmap *__pyx_f_6pyxpdf_4xpdf_14RawImageOutput__get_SplashBitmap(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_v_x, int __pyx_v_y, int __pyx_v_w, int __pyx_v_h, double __pyx_v_page_h, double __pyx_v_page_w, double __pyx_v_res_x, double __pyx_v_res_y) {
  struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_page = 0;
  SplashBitmap *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display_slice __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_SplashBitmap", 0);
  __Pyx_TraceCall("_get_SplashBitmap", __pyx_f[9], 351, 0, __PYX_ERR(9, 351, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":355
 *                                          double page_w, double res_x,
 *                                          double res_y) except NULL:
 *         cdef Page page = self.doc.get_page(page_no)             # <<<<<<<<<<<<<<
 * 
 *         if self.doc_started == False:
 */
  __Pyx_TraceLine(355,0,__PYX_ERR(9, 355, __pyx_L1_error))
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->doc->__pyx_vtab)->get_page(__pyx_v_self->doc, __pyx_v_page_no); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pyxpdf_4xpdf_Page))))) __PYX_ERR(9, 355, __pyx_L1_error)
  __pyx_v_page = ((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":357
 *         cdef Page page = self.doc.get_page(page_no)
 * 
 *         if self.doc_started == False:             # <<<<<<<<<<<<<<
 *             self._c_splash_dev.get().startDoc(self.doc.doc.getXRef())
 * 
 */
  __Pyx_TraceLine(357,0,__PYX_ERR(9, 357, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_self->doc_started == 0) != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/imageoutput.pxi":358
 * 
 *         if self.doc_started == False:
 *             self._c_splash_dev.get().startDoc(self.doc.doc.getXRef())             # <<<<<<<<<<<<<<
 * 
 *         if w == 0:
 */
    __Pyx_TraceLine(358,0,__PYX_ERR(9, 358, __pyx_L1_error))
    __pyx_v_self->_c_splash_dev.get()->startDoc(__pyx_v_self->doc->doc->getXRef());

    /* "src/pyxpdf/imageoutput.pxi":357
 *         cdef Page page = self.doc.get_page(page_no)
 * 
 *         if self.doc_started == False:             # <<<<<<<<<<<<<<
 *             self._c_splash_dev.get().startDoc(self.doc.doc.getXRef())
 * 
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":360
 *             self._c_splash_dev.get().startDoc(self.doc.doc.getXRef())
 * 
 *         if w == 0:             # <<<<<<<<<<<<<<
 *             w = <int>cmath.ceil(page_w)
 *         if h == 0:
 */
  __Pyx_TraceLine(360,0,__PYX_ERR(9, 360, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_w == 0) != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/imageoutput.pxi":361
 * 
 *         if w == 0:
 *             w = <int>cmath.ceil(page_w)             # <<<<<<<<<<<<<<
 *         if h == 0:
 *             h = <int>cmath.ceil(page_h)
 */
    __Pyx_TraceLine(361,0,__PYX_ERR(9, 361, __pyx_L1_error))
    __pyx_v_w = ((int)ceil(__pyx_v_page_w));

    /* "src/pyxpdf/imageoutput.pxi":360
 *             self._c_splash_dev.get().startDoc(self.doc.doc.getXRef())
 * 
 *         if w == 0:             # <<<<<<<<<<<<<<
 *             w = <int>cmath.ceil(page_w)
 *         if h == 0:
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":362
 *         if w == 0:
 *             w = <int>cmath.ceil(page_w)
 *         if h == 0:             # <<<<<<<<<<<<<<
 *             h = <int>cmath.ceil(page_h)
 *         w = <int>cmath.ceil(page_w - x) if x + w > page_w else w
 */
  __Pyx_TraceLine(362,0,__PYX_ERR(9, 362, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_h == 0) != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/imageoutput.pxi":363
 *             w = <int>cmath.ceil(page_w)
 *         if h == 0:
 *             h = <int>cmath.ceil(page_h)             # <<<<<<<<<<<<<<
 *         w = <int>cmath.ceil(page_w - x) if x + w > page_w else w
 *         h = <int>cmath.ceil(page_h - y) if y + h > page_h else h
 */
    __Pyx_TraceLine(363,0,__PYX_ERR(9, 363, __pyx_L1_error))
    __pyx_v_h = ((int)ceil(__pyx_v_page_h));

    /* "src/pyxpdf/imageoutput.pxi":362
 *         if w == 0:
 *             w = <int>cmath.ceil(page_w)
 *         if h == 0:             # <<<<<<<<<<<<<<
 *             h = <int>cmath.ceil(page_h)
 *         w = <int>cmath.ceil(page_w - x) if x + w > page_w else w
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":364
 *         if h == 0:
 *             h = <int>cmath.ceil(page_h)
 *         w = <int>cmath.ceil(page_w - x) if x + w > page_w else w             # <<<<<<<<<<<<<<
 *         h = <int>cmath.ceil(page_h - y) if y + h > page_h else h
 * 
 */
  __Pyx_TraceLine(364,0,__PYX_ERR(9, 364, __pyx_L1_error))
  if ((((__pyx_v_x + __pyx_v_w) > __pyx_v_page_w) != 0)) {
    __pyx_t_3 = ((int)ceil((__pyx_v_page_w - __pyx_v_x)));
  } else {
    __pyx_t_3 = __pyx_v_w;
  }
  __pyx_v_w = __pyx_t_3;

  /* "src/pyxpdf/imageoutput.pxi":365
 *             h = <int>cmath.ceil(page_h)
 *         w = <int>cmath.ceil(page_w - x) if x + w > page_w else w
 *         h = <int>cmath.ceil(page_h - y) if y + h > page_h else h             # <<<<<<<<<<<<<<
 * 
 *         page.display_slice(self._c_splash_dev.get(), x, y,
 */
  __Pyx_TraceLine(365,0,__PYX_ERR(9, 365, __pyx_L1_error))
  if ((((__pyx_v_y + __pyx_v_h) > __pyx_v_page_h) != 0)) {
    __pyx_t_3 = ((int)ceil((__pyx_v_page_h - __pyx_v_y)));
  } else {
    __pyx_t_3 = __pyx_v_h;
  }
  __pyx_v_h = __pyx_t_3;

  /* "src/pyxpdf/imageoutput.pxi":369
 *         page.display_slice(self._c_splash_dev.get(), x, y,
 *                                            w, h, res_x, res_y, 0,
 *                                            to_GBool(not self.use_cropbox),             # <<<<<<<<<<<<<<
 *                                            gFalse)
 *         return self._c_splash_dev.get().getBitmap()
 */
  __Pyx_TraceLine(369,0,__PYX_ERR(9, 369, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(__pyx_v_self->use_cropbox != 0))); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyxpdf/imageoutput.pxi":367
 *         h = <int>cmath.ceil(page_h - y) if y + h > page_h else h
 * 
 *         page.display_slice(self._c_splash_dev.get(), x, y,             # <<<<<<<<<<<<<<
 *                                            w, h, res_x, res_y, 0,
 *                                            to_GBool(not self.use_cropbox),
 */
  __Pyx_TraceLine(367,0,__PYX_ERR(9, 367, __pyx_L1_error))
  __pyx_t_5.__pyx_n = 5;
  __pyx_t_5.hDPI = __pyx_v_res_x;
  __pyx_t_5.vDPI = __pyx_v_res_y;
  __pyx_t_5.rotate = 0;
  __pyx_t_5.use_media_box = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_t_1);
  __pyx_t_5.crop = gFalse;
  __pyx_t_4 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_page->__pyx_vtab)->display_slice(__pyx_v_page, __pyx_v_self->_c_splash_dev.get(), __pyx_v_x, __pyx_v_y, __pyx_v_w, __pyx_v_h, &__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pyxpdf/imageoutput.pxi":371
 *                                            to_GBool(not self.use_cropbox),
 *                                            gFalse)
 *         return self._c_splash_dev.get().getBitmap()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(371,0,__PYX_ERR(9, 371, __pyx_L1_error))
  __pyx_r = __pyx_v_self->_c_splash_dev.get()->getBitmap();
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":351
 * 
 * 
 *     cdef SplashBitmap* _get_SplashBitmap(self, int page_no, int x, int y,             # <<<<<<<<<<<<<<
 *                                          int w, int h, double page_h,
 *                                          double page_w, double res_x,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput._get_SplashBitmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_page);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":374
 * 
 * 
 *     cdef SplashBitmap* _get_normalize_SplashBitmap(self, int page_no, int crop_x, int crop_y,             # <<<<<<<<<<<<<<
 *                                                    int crop_h, int crop_w, double scale_x,
 *                                                    double scale_y) except NULL:
 */

static SplashBitmap *__pyx_f_6pyxpdf_4xpdf_14RawImageOutput__get_normalize_SplashBitmap(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_v_crop_x, int __pyx_v_crop_y, int __pyx_v_crop_h, int __pyx_v_crop_w, double __pyx_v_scale_x, double __pyx_v_scale_y) {
  int __pyx_v_rotation;
  CYTHON_UNUSED int __pyx_v_total_pages;
  double __pyx_v_page_h;
  double __pyx_v_page_w;
  double __pyx_v_tmp;
  double __pyx_v_res_x;
  double __pyx_v_res_y;
  SplashBitmap *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  SplashBitmap *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_normalize_SplashBitmap", 0);
  __Pyx_TraceCall("_get_normalize_SplashBitmap", __pyx_f[9], 374, 0, __PYX_ERR(9, 374, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":378
 *                                                    double scale_y) except NULL:
 *         cdef:
 *             int rotation = 0             # <<<<<<<<<<<<<<
 *             int total_pages = self.doc.doc.getNumPages()
 *             double page_h = 0
 */
  __Pyx_TraceLine(378,0,__PYX_ERR(9, 378, __pyx_L1_error))
  __pyx_v_rotation = 0;

  /* "src/pyxpdf/imageoutput.pxi":379
 *         cdef:
 *             int rotation = 0
 *             int total_pages = self.doc.doc.getNumPages()             # <<<<<<<<<<<<<<
 *             double page_h = 0
 *             double page_w = 0
 */
  __Pyx_TraceLine(379,0,__PYX_ERR(9, 379, __pyx_L1_error))
  __pyx_v_total_pages = __pyx_v_self->doc->doc->getNumPages();

  /* "src/pyxpdf/imageoutput.pxi":380
 *             int rotation = 0
 *             int total_pages = self.doc.doc.getNumPages()
 *             double page_h = 0             # <<<<<<<<<<<<<<
 *             double page_w = 0
 *             double tmp
 */
  __Pyx_TraceLine(380,0,__PYX_ERR(9, 380, __pyx_L1_error))
  __pyx_v_page_h = 0.0;

  /* "src/pyxpdf/imageoutput.pxi":381
 *             int total_pages = self.doc.doc.getNumPages()
 *             double page_h = 0
 *             double page_w = 0             # <<<<<<<<<<<<<<
 *             double tmp
 *             double res_x = self.resolution_x
 */
  __Pyx_TraceLine(381,0,__PYX_ERR(9, 381, __pyx_L1_error))
  __pyx_v_page_w = 0.0;

  /* "src/pyxpdf/imageoutput.pxi":383
 *             double page_w = 0
 *             double tmp
 *             double res_x = self.resolution_x             # <<<<<<<<<<<<<<
 *             double res_y = self.resolution_y
 *             SplashBitmap* bitmap
 */
  __Pyx_TraceLine(383,0,__PYX_ERR(9, 383, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_self->resolution_x;
  __pyx_v_res_x = __pyx_t_1;

  /* "src/pyxpdf/imageoutput.pxi":384
 *             double tmp
 *             double res_x = self.resolution_x
 *             double res_y = self.resolution_y             # <<<<<<<<<<<<<<
 *             SplashBitmap* bitmap
 * 
 */
  __Pyx_TraceLine(384,0,__PYX_ERR(9, 384, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_self->resolution_y;
  __pyx_v_res_y = __pyx_t_1;

  /* "src/pyxpdf/imageoutput.pxi":387
 *             SplashBitmap* bitmap
 * 
 *         if self.use_cropbox:             # <<<<<<<<<<<<<<
 *             page_h = self.doc.doc.getPageCropHeight(page_no + 1)
 *             page_w = self.doc.doc.getPageCropWidth(page_no + 1)
 */
  __Pyx_TraceLine(387,0,__PYX_ERR(9, 387, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v_self->use_cropbox != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/imageoutput.pxi":388
 * 
 *         if self.use_cropbox:
 *             page_h = self.doc.doc.getPageCropHeight(page_no + 1)             # <<<<<<<<<<<<<<
 *             page_w = self.doc.doc.getPageCropWidth(page_no + 1)
 *         else:
 */
    __Pyx_TraceLine(388,0,__PYX_ERR(9, 388, __pyx_L1_error))
    __pyx_v_page_h = __pyx_v_self->doc->doc->getPageCropHeight((__pyx_v_page_no + 1));

    /* "src/pyxpdf/imageoutput.pxi":389
 *         if self.use_cropbox:
 *             page_h = self.doc.doc.getPageCropHeight(page_no + 1)
 *             page_w = self.doc.doc.getPageCropWidth(page_no + 1)             # <<<<<<<<<<<<<<
 *         else:
 *             page_h = self.doc.doc.getPageMediaHeight(page_no + 1)
 */
    __Pyx_TraceLine(389,0,__PYX_ERR(9, 389, __pyx_L1_error))
    __pyx_v_page_w = __pyx_v_self->doc->doc->getPageCropWidth((__pyx_v_page_no + 1));

    /* "src/pyxpdf/imageoutput.pxi":387
 *             SplashBitmap* bitmap
 * 
 *         if self.use_cropbox:             # <<<<<<<<<<<<<<
 *             page_h = self.doc.doc.getPageCropHeight(page_no + 1)
 *             page_w = self.doc.doc.getPageCropWidth(page_no + 1)
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/imageoutput.pxi":391
 *             page_w = self.doc.doc.getPageCropWidth(page_no + 1)
 *         else:
 *             page_h = self.doc.doc.getPageMediaHeight(page_no + 1)             # <<<<<<<<<<<<<<
 *             page_w = self.doc.doc.getPageMediaWidth(page_no + 1)
 * 
 */
  __Pyx_TraceLine(391,0,__PYX_ERR(9, 391, __pyx_L1_error))
  /*else*/ {
    __pyx_v_page_h = __pyx_v_self->doc->doc->getPageMediaHeight((__pyx_v_page_no + 1));

    /* "src/pyxpdf/imageoutput.pxi":392
 *         else:
 *             page_h = self.doc.doc.getPageMediaHeight(page_no + 1)
 *             page_w = self.doc.doc.getPageMediaWidth(page_no + 1)             # <<<<<<<<<<<<<<
 * 
 *         rotation = self.doc.doc.getPageRotate(page_no + 1)
 */
    __Pyx_TraceLine(392,0,__PYX_ERR(9, 392, __pyx_L1_error))
    __pyx_v_page_w = __pyx_v_self->doc->doc->getPageMediaWidth((__pyx_v_page_no + 1));
  }
  __pyx_L3:;

  /* "src/pyxpdf/imageoutput.pxi":394
 *             page_w = self.doc.doc.getPageMediaWidth(page_no + 1)
 * 
 *         rotation = self.doc.doc.getPageRotate(page_no + 1)             # <<<<<<<<<<<<<<
 *         # swap height and width
 *         if self.scale_before_rotation and (rotation == 90 or rotation == 270):
 */
  __Pyx_TraceLine(394,0,__PYX_ERR(9, 394, __pyx_L1_error))
  __pyx_v_rotation = __pyx_v_self->doc->doc->getPageRotate((__pyx_v_page_no + 1));

  /* "src/pyxpdf/imageoutput.pxi":396
 *         rotation = self.doc.doc.getPageRotate(page_no + 1)
 *         # swap height and width
 *         if self.scale_before_rotation and (rotation == 90 or rotation == 270):             # <<<<<<<<<<<<<<
 *             # cppalgo.swap(page_h, page_w)
 *             tmp = page_h
 */
  __Pyx_TraceLine(396,0,__PYX_ERR(9, 396, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_self->scale_before_rotation != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  switch (__pyx_v_rotation) {
    case 90:
    CYTHON_FALLTHROUGH;
    case 0x10E:
    __pyx_t_3 = 1;
    break;
    default:
    __pyx_t_3 = 0;
    break;
  }
  __pyx_t_2 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "src/pyxpdf/imageoutput.pxi":398
 *         if self.scale_before_rotation and (rotation == 90 or rotation == 270):
 *             # cppalgo.swap(page_h, page_w)
 *             tmp = page_h             # <<<<<<<<<<<<<<
 *             page_h = page_w
 *             page_w = tmp
 */
    __Pyx_TraceLine(398,0,__PYX_ERR(9, 398, __pyx_L1_error))
    __pyx_v_tmp = __pyx_v_page_h;

    /* "src/pyxpdf/imageoutput.pxi":399
 *             # cppalgo.swap(page_h, page_w)
 *             tmp = page_h
 *             page_h = page_w             # <<<<<<<<<<<<<<
 *             page_w = tmp
 * 
 */
    __Pyx_TraceLine(399,0,__PYX_ERR(9, 399, __pyx_L1_error))
    __pyx_v_page_h = __pyx_v_page_w;

    /* "src/pyxpdf/imageoutput.pxi":400
 *             tmp = page_h
 *             page_h = page_w
 *             page_w = tmp             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(400,0,__PYX_ERR(9, 400, __pyx_L1_error))
    __pyx_v_page_w = __pyx_v_tmp;

    /* "src/pyxpdf/imageoutput.pxi":396
 *         rotation = self.doc.doc.getPageRotate(page_no + 1)
 *         # swap height and width
 *         if self.scale_before_rotation and (rotation == 90 or rotation == 270):             # <<<<<<<<<<<<<<
 *             # cppalgo.swap(page_h, page_w)
 *             tmp = page_h
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":403
 * 
 * 
 *         if scale_x > 0:             # <<<<<<<<<<<<<<
 *             res_x = (72.0 * scale_x) / page_w
 *             if scale_y <= 0:
 */
  __Pyx_TraceLine(403,0,__PYX_ERR(9, 403, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_scale_x > 0.0) != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/imageoutput.pxi":404
 * 
 *         if scale_x > 0:
 *             res_x = (72.0 * scale_x) / page_w             # <<<<<<<<<<<<<<
 *             if scale_y <= 0:
 *                 res_y = res_x
 */
    __Pyx_TraceLine(404,0,__PYX_ERR(9, 404, __pyx_L1_error))
    __pyx_t_1 = (72.0 * __pyx_v_scale_x);
    if (unlikely(__pyx_v_page_w == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(9, 404, __pyx_L1_error)
    }
    __pyx_v_res_x = (__pyx_t_1 / __pyx_v_page_w);

    /* "src/pyxpdf/imageoutput.pxi":405
 *         if scale_x > 0:
 *             res_x = (72.0 * scale_x) / page_w
 *             if scale_y <= 0:             # <<<<<<<<<<<<<<
 *                 res_y = res_x
 *         if scale_y > 0:
 */
    __Pyx_TraceLine(405,0,__PYX_ERR(9, 405, __pyx_L1_error))
    __pyx_t_2 = ((__pyx_v_scale_y <= 0.0) != 0);
    if (__pyx_t_2) {

      /* "src/pyxpdf/imageoutput.pxi":406
 *             res_x = (72.0 * scale_x) / page_w
 *             if scale_y <= 0:
 *                 res_y = res_x             # <<<<<<<<<<<<<<
 *         if scale_y > 0:
 *             res_y = (72.0 * scale_y) / page_h
 */
      __Pyx_TraceLine(406,0,__PYX_ERR(9, 406, __pyx_L1_error))
      __pyx_v_res_y = __pyx_v_res_x;

      /* "src/pyxpdf/imageoutput.pxi":405
 *         if scale_x > 0:
 *             res_x = (72.0 * scale_x) / page_w
 *             if scale_y <= 0:             # <<<<<<<<<<<<<<
 *                 res_y = res_x
 *         if scale_y > 0:
 */
    }

    /* "src/pyxpdf/imageoutput.pxi":403
 * 
 * 
 *         if scale_x > 0:             # <<<<<<<<<<<<<<
 *             res_x = (72.0 * scale_x) / page_w
 *             if scale_y <= 0:
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":407
 *             if scale_y <= 0:
 *                 res_y = res_x
 *         if scale_y > 0:             # <<<<<<<<<<<<<<
 *             res_y = (72.0 * scale_y) / page_h
 *             if scale_x <= 0:
 */
  __Pyx_TraceLine(407,0,__PYX_ERR(9, 407, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_scale_y > 0.0) != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/imageoutput.pxi":408
 *                 res_y = res_x
 *         if scale_y > 0:
 *             res_y = (72.0 * scale_y) / page_h             # <<<<<<<<<<<<<<
 *             if scale_x <= 0:
 *                 res_x = res_y
 */
    __Pyx_TraceLine(408,0,__PYX_ERR(9, 408, __pyx_L1_error))
    __pyx_t_1 = (72.0 * __pyx_v_scale_y);
    if (unlikely(__pyx_v_page_h == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(9, 408, __pyx_L1_error)
    }
    __pyx_v_res_y = (__pyx_t_1 / __pyx_v_page_h);

    /* "src/pyxpdf/imageoutput.pxi":409
 *         if scale_y > 0:
 *             res_y = (72.0 * scale_y) / page_h
 *             if scale_x <= 0:             # <<<<<<<<<<<<<<
 *                 res_x = res_y
 * 
 */
    __Pyx_TraceLine(409,0,__PYX_ERR(9, 409, __pyx_L1_error))
    __pyx_t_2 = ((__pyx_v_scale_x <= 0.0) != 0);
    if (__pyx_t_2) {

      /* "src/pyxpdf/imageoutput.pxi":410
 *             res_y = (72.0 * scale_y) / page_h
 *             if scale_x <= 0:
 *                 res_x = res_y             # <<<<<<<<<<<<<<
 * 
 *         page_w = page_w * (res_x / 72.0)
 */
      __Pyx_TraceLine(410,0,__PYX_ERR(9, 410, __pyx_L1_error))
      __pyx_v_res_x = __pyx_v_res_y;

      /* "src/pyxpdf/imageoutput.pxi":409
 *         if scale_y > 0:
 *             res_y = (72.0 * scale_y) / page_h
 *             if scale_x <= 0:             # <<<<<<<<<<<<<<
 *                 res_x = res_y
 * 
 */
    }

    /* "src/pyxpdf/imageoutput.pxi":407
 *             if scale_y <= 0:
 *                 res_y = res_x
 *         if scale_y > 0:             # <<<<<<<<<<<<<<
 *             res_y = (72.0 * scale_y) / page_h
 *             if scale_x <= 0:
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":412
 *                 res_x = res_y
 * 
 *         page_w = page_w * (res_x / 72.0)             # <<<<<<<<<<<<<<
 *         page_h = page_h * (res_y / 72.0)
 * 
 */
  __Pyx_TraceLine(412,0,__PYX_ERR(9, 412, __pyx_L1_error))
  __pyx_v_page_w = (__pyx_v_page_w * (__pyx_v_res_x / 72.0));

  /* "src/pyxpdf/imageoutput.pxi":413
 * 
 *         page_w = page_w * (res_x / 72.0)
 *         page_h = page_h * (res_y / 72.0)             # <<<<<<<<<<<<<<
 * 
 *         # swap height and width
 */
  __Pyx_TraceLine(413,0,__PYX_ERR(9, 413, __pyx_L1_error))
  __pyx_v_page_h = (__pyx_v_page_h * (__pyx_v_res_y / 72.0));

  /* "src/pyxpdf/imageoutput.pxi":416
 * 
 *         # swap height and width
 *         if (not self.scale_before_rotation) and (rotation == 90 or rotation == 270):             # <<<<<<<<<<<<<<
 *             # cppalgo.swap(page_h, page_w)
 *             tmp = page_h
 */
  __Pyx_TraceLine(416,0,__PYX_ERR(9, 416, __pyx_L1_error))
  __pyx_t_3 = ((!(__pyx_v_self->scale_before_rotation != 0)) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L12_bool_binop_done;
  }
  switch (__pyx_v_rotation) {
    case 90:
    CYTHON_FALLTHROUGH;
    case 0x10E:
    __pyx_t_3 = 1;
    break;
    default:
    __pyx_t_3 = 0;
    break;
  }
  __pyx_t_2 = __pyx_t_3;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_2) {

    /* "src/pyxpdf/imageoutput.pxi":418
 *         if (not self.scale_before_rotation) and (rotation == 90 or rotation == 270):
 *             # cppalgo.swap(page_h, page_w)
 *             tmp = page_h             # <<<<<<<<<<<<<<
 *             page_h = page_w
 *             page_w = tmp
 */
    __Pyx_TraceLine(418,0,__PYX_ERR(9, 418, __pyx_L1_error))
    __pyx_v_tmp = __pyx_v_page_h;

    /* "src/pyxpdf/imageoutput.pxi":419
 *             # cppalgo.swap(page_h, page_w)
 *             tmp = page_h
 *             page_h = page_w             # <<<<<<<<<<<<<<
 *             page_w = tmp
 * 
 */
    __Pyx_TraceLine(419,0,__PYX_ERR(9, 419, __pyx_L1_error))
    __pyx_v_page_h = __pyx_v_page_w;

    /* "src/pyxpdf/imageoutput.pxi":420
 *             tmp = page_h
 *             page_h = page_w
 *             page_w = tmp             # <<<<<<<<<<<<<<
 * 
 *         return self._get_SplashBitmap(page_no, crop_x, crop_y,
 */
    __Pyx_TraceLine(420,0,__PYX_ERR(9, 420, __pyx_L1_error))
    __pyx_v_page_w = __pyx_v_tmp;

    /* "src/pyxpdf/imageoutput.pxi":416
 * 
 *         # swap height and width
 *         if (not self.scale_before_rotation) and (rotation == 90 or rotation == 270):             # <<<<<<<<<<<<<<
 *             # cppalgo.swap(page_h, page_w)
 *             tmp = page_h
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":422
 *             page_w = tmp
 * 
 *         return self._get_SplashBitmap(page_no, crop_x, crop_y,             # <<<<<<<<<<<<<<
 *                                       crop_h, crop_w, page_h,
 *                                       page_w, res_x, res_y)
 */
  __Pyx_TraceLine(422,0,__PYX_ERR(9, 422, __pyx_L1_error))
  __pyx_t_4 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self->__pyx_vtab)->_get_SplashBitmap(__pyx_v_self, __pyx_v_page_no, __pyx_v_crop_x, __pyx_v_crop_y, __pyx_v_crop_h, __pyx_v_crop_w, __pyx_v_page_h, __pyx_v_page_w, __pyx_v_res_x, __pyx_v_res_y); if (unlikely(__pyx_t_4 == ((SplashBitmap *)NULL))) __PYX_ERR(9, 422, __pyx_L1_error)
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":374
 * 
 * 
 *     cdef SplashBitmap* _get_normalize_SplashBitmap(self, int page_no, int crop_x, int crop_y,             # <<<<<<<<<<<<<<
 *                                                    int crop_h, int crop_w, double scale_x,
 *                                                    double scale_y) except NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput._get_normalize_SplashBitmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":429
 * 
 * 
 *     cpdef object get(self, int page_no, crop_box=(0,0,0,0), scale_pixel_box = None):             # <<<<<<<<<<<<<<
 *         """Get the rendered :class:`~PIL.Image.Image` for `page_no` indexed page
 * 
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_3get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_14RawImageOutput_get(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, int __pyx_v_page_no, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_14RawImageOutput_get *__pyx_optional_args) {
  PyObject *__pyx_v_crop_box = ((PyObject *)__pyx_tuple__57);
  PyObject *__pyx_v_scale_pixel_box = ((PyObject *)Py_None);
  int __pyx_v_scale_x;
  int __pyx_v_scale_y;
  int __pyx_v_total_pages;
  SplashBitmap *__pyx_v_bitmap;
  PyObject *__pyx_v_buff = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  SplashBitmap *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__59)
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_TraceCall("get", __pyx_f[9], 429, 0, __PYX_ERR(9, 429, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_crop_box = __pyx_optional_args->crop_box;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_scale_pixel_box = __pyx_optional_args->scale_pixel_box;
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_3get)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_page_no); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        __pyx_t_6 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_6 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_3, __pyx_v_crop_box, __pyx_v_scale_pixel_box};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 429, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_3, __pyx_v_crop_box, __pyx_v_scale_pixel_box};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 429, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(9, 429, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
          __Pyx_INCREF(__pyx_v_crop_box);
          __Pyx_GIVEREF(__pyx_v_crop_box);
          PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_crop_box);
          __Pyx_INCREF(__pyx_v_scale_pixel_box);
          __Pyx_GIVEREF(__pyx_v_scale_pixel_box);
          PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_v_scale_pixel_box);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 429, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "src/pyxpdf/imageoutput.pxi":452
 *         """
 *         cdef:
 *             int scale_x = scale_pixel_box[0] if scale_pixel_box else 0             # <<<<<<<<<<<<<<
 *             int scale_y = scale_pixel_box[1] if scale_pixel_box else 0
 *             int total_pages = self.doc.doc.getNumPages()
 */
  __Pyx_TraceLine(452,0,__PYX_ERR(9, 452, __pyx_L1_error))
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_scale_pixel_box); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(9, 452, __pyx_L1_error)
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_scale_pixel_box, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 452, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_t_9;
  } else {
    __pyx_t_6 = 0;
  }
  __pyx_v_scale_x = __pyx_t_6;

  /* "src/pyxpdf/imageoutput.pxi":453
 *         cdef:
 *             int scale_x = scale_pixel_box[0] if scale_pixel_box else 0
 *             int scale_y = scale_pixel_box[1] if scale_pixel_box else 0             # <<<<<<<<<<<<<<
 *             int total_pages = self.doc.doc.getNumPages()
 *             SplashBitmap* bitmap
 */
  __Pyx_TraceLine(453,0,__PYX_ERR(9, 453, __pyx_L1_error))
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_scale_pixel_box); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(9, 453, __pyx_L1_error)
  if (__pyx_t_8) {
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_scale_pixel_box, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 453, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_t_9;
  } else {
    __pyx_t_6 = 0;
  }
  __pyx_v_scale_y = __pyx_t_6;

  /* "src/pyxpdf/imageoutput.pxi":454
 *             int scale_x = scale_pixel_box[0] if scale_pixel_box else 0
 *             int scale_y = scale_pixel_box[1] if scale_pixel_box else 0
 *             int total_pages = self.doc.doc.getNumPages()             # <<<<<<<<<<<<<<
 *             SplashBitmap* bitmap
 *             bytearray buff
 */
  __Pyx_TraceLine(454,0,__PYX_ERR(9, 454, __pyx_L1_error))
  __pyx_v_total_pages = __pyx_v_self->doc->doc->getNumPages();

  /* "src/pyxpdf/imageoutput.pxi":458
 *             bytearray buff
 * 
 *         if page_no < 0:             # <<<<<<<<<<<<<<
 *             page_no = 0
 *         if page_no >= total_pages:
 */
  __Pyx_TraceLine(458,0,__PYX_ERR(9, 458, __pyx_L1_error))
  __pyx_t_8 = ((__pyx_v_page_no < 0) != 0);
  if (__pyx_t_8) {

    /* "src/pyxpdf/imageoutput.pxi":459
 * 
 *         if page_no < 0:
 *             page_no = 0             # <<<<<<<<<<<<<<
 *         if page_no >= total_pages:
 *             page_no = total_pages - 1
 */
    __Pyx_TraceLine(459,0,__PYX_ERR(9, 459, __pyx_L1_error))
    __pyx_v_page_no = 0;

    /* "src/pyxpdf/imageoutput.pxi":458
 *             bytearray buff
 * 
 *         if page_no < 0:             # <<<<<<<<<<<<<<
 *             page_no = 0
 *         if page_no >= total_pages:
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":460
 *         if page_no < 0:
 *             page_no = 0
 *         if page_no >= total_pages:             # <<<<<<<<<<<<<<
 *             page_no = total_pages - 1
 * 
 */
  __Pyx_TraceLine(460,0,__PYX_ERR(9, 460, __pyx_L1_error))
  __pyx_t_8 = ((__pyx_v_page_no >= __pyx_v_total_pages) != 0);
  if (__pyx_t_8) {

    /* "src/pyxpdf/imageoutput.pxi":461
 *             page_no = 0
 *         if page_no >= total_pages:
 *             page_no = total_pages - 1             # <<<<<<<<<<<<<<
 * 
 *         bitmap = self._get_normalize_SplashBitmap(page_no, crop_box[0], crop_box[1],
 */
    __Pyx_TraceLine(461,0,__PYX_ERR(9, 461, __pyx_L1_error))
    __pyx_v_page_no = (__pyx_v_total_pages - 1);

    /* "src/pyxpdf/imageoutput.pxi":460
 *         if page_no < 0:
 *             page_no = 0
 *         if page_no >= total_pages:             # <<<<<<<<<<<<<<
 *             page_no = total_pages - 1
 * 
 */
  }

  /* "src/pyxpdf/imageoutput.pxi":463
 *             page_no = total_pages - 1
 * 
 *         bitmap = self._get_normalize_SplashBitmap(page_no, crop_box[0], crop_box[1],             # <<<<<<<<<<<<<<
 *                                                   crop_box[2], crop_box[3], scale_x,
 *                                                   scale_y)
 */
  __Pyx_TraceLine(463,0,__PYX_ERR(9, 463, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_crop_box, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_crop_box, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":464
 * 
 *         bitmap = self._get_normalize_SplashBitmap(page_no, crop_box[0], crop_box[1],
 *                                                   crop_box[2], crop_box[3], scale_x,             # <<<<<<<<<<<<<<
 *                                                   scale_y)
 *         buff = splash_bitmap_to_buffer(bitmap, self.mode)
 */
  __Pyx_TraceLine(464,0,__PYX_ERR(9, 464, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_crop_box, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_crop_box, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":463
 *             page_no = total_pages - 1
 * 
 *         bitmap = self._get_normalize_SplashBitmap(page_no, crop_box[0], crop_box[1],             # <<<<<<<<<<<<<<
 *                                                   crop_box[2], crop_box[3], scale_x,
 *                                                   scale_y)
 */
  __Pyx_TraceLine(463,0,__PYX_ERR(9, 463, __pyx_L1_error))
  __pyx_t_12 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self->__pyx_vtab)->_get_normalize_SplashBitmap(__pyx_v_self, __pyx_v_page_no, __pyx_t_6, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_v_scale_x, __pyx_v_scale_y); if (unlikely(__pyx_t_12 == ((SplashBitmap *)NULL))) __PYX_ERR(9, 463, __pyx_L1_error)
  __pyx_v_bitmap = __pyx_t_12;

  /* "src/pyxpdf/imageoutput.pxi":466
 *                                                   crop_box[2], crop_box[3], scale_x,
 *                                                   scale_y)
 *         buff = splash_bitmap_to_buffer(bitmap, self.mode)             # <<<<<<<<<<<<<<
 * 
 *         return pillow_image_from_buffer(self.mode, bitmap.getHeight(), bitmap.getWidth(),
 */
  __Pyx_TraceLine(466,0,__PYX_ERR(9, 466, __pyx_L1_error))
  __pyx_t_1 = __pyx_v_self->mode;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_buffer(__pyx_v_bitmap, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_buff = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":468
 *         buff = splash_bitmap_to_buffer(bitmap, self.mode)
 * 
 *         return pillow_image_from_buffer(self.mode, bitmap.getHeight(), bitmap.getWidth(),             # <<<<<<<<<<<<<<
 *                                         buff)
 * 
 */
  __Pyx_TraceLine(468,0,__PYX_ERR(9, 468, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_v_self->mode;
  __Pyx_INCREF(__pyx_t_2);

  /* "src/pyxpdf/imageoutput.pxi":469
 * 
 *         return pillow_image_from_buffer(self.mode, bitmap.getHeight(), bitmap.getWidth(),
 *                                         buff)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(469,0,__PYX_ERR(9, 469, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_pillow_image_from_buffer(__pyx_t_2, __pyx_v_bitmap->getHeight(), __pyx_v_bitmap->getWidth(), __pyx_v_buff); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":429
 * 
 * 
 *     cpdef object get(self, int page_no, crop_box=(0,0,0,0), scale_pixel_box = None):             # <<<<<<<<<<<<<<
 *         """Get the rendered :class:`~PIL.Image.Image` for `page_no` indexed page
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_buff);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_3get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_14RawImageOutput_2get[] = "RawImageOutput.get(self, int page_no, crop_box=(0, 0, 0, 0), scale_pixel_box=None)\nGet the rendered :class:`~PIL.Image.Image` for `page_no` indexed page\n\n        Parameters\n        ----------\n        page_no : int\n            index of page to render\n        crop_box : tuple of float, optional\n            tuple of cordinates of :term:`BBox` to set the rendering area.\n            (default is (0,0,0,0), means the whole page area)\n        scale_pixel_box : tuple of int, optional\n            tuple of pair of int which scales the page to fix within x * y pixels\n\n        Return\n        ------\n        :class:`~PIL.Image.Image`\n            Rendered PDF Page\n\n        Note\n        ----\n        Requires Optional dependency ``Pillow`` module\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_14RawImageOutput_3get = {"get", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_3get, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_14RawImageOutput_2get};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_3get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_page_no;
  PyObject *__pyx_v_crop_box = 0;
  PyObject *__pyx_v_scale_pixel_box = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_page_no,&__pyx_n_s_crop_box,&__pyx_n_s_scale_pixel_box,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_tuple__57);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_page_no)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_crop_box);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scale_pixel_box);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) __PYX_ERR(9, 429, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_page_no = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_page_no == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 429, __pyx_L3_error)
    __pyx_v_crop_box = values[1];
    __pyx_v_scale_pixel_box = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 429, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_2get(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self), __pyx_v_page_no, __pyx_v_crop_box, __pyx_v_scale_pixel_box);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_2get(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, int __pyx_v_page_no, PyObject *__pyx_v_crop_box, PyObject *__pyx_v_scale_pixel_box) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_14RawImageOutput_get __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__59)
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_TraceCall("get (wrapper)", __pyx_f[9], 429, 0, __PYX_ERR(9, 429, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.crop_box = __pyx_v_crop_box;
  __pyx_t_2.scale_pixel_box = __pyx_v_scale_pixel_box;
  __pyx_t_1 = __pyx_vtabptr_6pyxpdf_4xpdf_RawImageOutput->get(__pyx_v_self, __pyx_v_page_no, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":282
 *         unique_ptr[SplashOutputDev] _c_splash_dev
 *         bint doc_started
 *         public bint use_cropbox             # <<<<<<<<<<<<<<
 *         public bint scale_before_rotation
 *         public double resolution_y
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 282, 0, __PYX_ERR(9, 282, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->use_cropbox); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.use_cropbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[9], 282, 0, __PYX_ERR(9, 282, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 282, __pyx_L1_error)
  __pyx_v_self->use_cropbox = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.use_cropbox.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":283
 *         bint doc_started
 *         public bint use_cropbox
 *         public bint scale_before_rotation             # <<<<<<<<<<<<<<
 *         public double resolution_y
 *         public double resolution_x
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation___get__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 283, 0, __PYX_ERR(9, 283, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->scale_before_rotation); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.scale_before_rotation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[9], 283, 0, __PYX_ERR(9, 283, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 283, __pyx_L1_error)
  __pyx_v_self->scale_before_rotation = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.scale_before_rotation.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":284
 *         public bint use_cropbox
 *         public bint scale_before_rotation
 *         public double resolution_y             # <<<<<<<<<<<<<<
 *         public double resolution_x
 *         readonly object mode
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y___get__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 284, 0, __PYX_ERR(9, 284, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->resolution_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.resolution_y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[9], 284, 0, __PYX_ERR(9, 284, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 284, __pyx_L1_error)
  __pyx_v_self->resolution_y = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.resolution_y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":285
 *         public bint scale_before_rotation
 *         public double resolution_y
 *         public double resolution_x             # <<<<<<<<<<<<<<
 *         readonly object mode
 *         readonly Document doc
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x___get__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 285, 0, __PYX_ERR(9, 285, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->resolution_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.resolution_x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[9], 285, 0, __PYX_ERR(9, 285, __pyx_L1_error));
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(9, 285, __pyx_L1_error)
  __pyx_v_self->resolution_x = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.resolution_x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":286
 *         public double resolution_y
 *         public double resolution_x
 *         readonly object mode             # <<<<<<<<<<<<<<
 *         readonly Document doc
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_4mode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_4mode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_4mode___get__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_4mode___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 286, 0, __PYX_ERR(9, 286, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->mode);
  __pyx_r = __pyx_v_self->mode;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.mode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":287
 *         public double resolution_x
 *         readonly object mode
 *         readonly Document doc             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_3doc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_3doc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_3doc___get__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 287, 0, __PYX_ERR(9, 287, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->doc));
  __pyx_r = ((PyObject *)__pyx_v_self->doc);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.doc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_14RawImageOutput_4__reduce_cython__[] = "RawImageOutput.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_14RawImageOutput_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_5__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_14RawImageOutput_4__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_4__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__60)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(7, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_14RawImageOutput_6__setstate_cython__[] = "RawImageOutput.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_14RawImageOutput_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_7__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_14RawImageOutput_6__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_6__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14RawImageOutput_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__62)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 3, 0, __PYX_ERR(7, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.RawImageOutput.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":517
 * 
 *     @staticmethod
 *     cdef PDFImage from_ptr(PDFBitmapImage *c_img):             # <<<<<<<<<<<<<<
 *         cdef:
 *             PDFImage img = PDFImage.__new__(PDFImage)
 */

static struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_f_6pyxpdf_4xpdf_8PDFImage_from_ptr(PDFBitmapImage *__pyx_v_c_img) {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_img = 0;
  SplashBitmap *__pyx_v_bmap;
  PyObject *__pyx_v_mode = 0;
  PyObject *__pyx_v_cs = NULL;
  PyObject *__pyx_v_comp = NULL;
  PyObject *__pyx_v_buff = NULL;
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);
  __Pyx_TraceCall("from_ptr", __pyx_f[9], 517, 0, __PYX_ERR(9, 517, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":519
 *     cdef PDFImage from_ptr(PDFBitmapImage *c_img):
 *         cdef:
 *             PDFImage img = PDFImage.__new__(PDFImage)             # <<<<<<<<<<<<<<
 *             SplashBitmap *bmap
 *             object mode
 */
  __Pyx_TraceLine(519,0,__PYX_ERR(9, 519, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6pyxpdf_4xpdf_PDFImage(((PyTypeObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFImage), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 519, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_img = ((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":522
 *             SplashBitmap *bmap
 *             object mode
 *         img.page_index = c_img.pageNum             # <<<<<<<<<<<<<<
 *         img.bbox = (c_img.x1, c_img.y1, c_img.x2, c_img.y2)
 *         img.hDPI = c_img.hDPI
 */
  __Pyx_TraceLine(522,0,__PYX_ERR(9, 522, __pyx_L1_error))
  __pyx_t_2 = __pyx_v_c_img->pageNum;
  __pyx_v_img->page_index = __pyx_t_2;

  /* "src/pyxpdf/imageoutput.pxi":523
 *             object mode
 *         img.page_index = c_img.pageNum
 *         img.bbox = (c_img.x1, c_img.y1, c_img.x2, c_img.y2)             # <<<<<<<<<<<<<<
 *         img.hDPI = c_img.hDPI
 *         img.vDPI = c_img.vDPI
 */
  __Pyx_TraceLine(523,0,__PYX_ERR(9, 523, __pyx_L1_error))
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_c_img->x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_img->y1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_c_img->x2); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_c_img->y2); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_img->bbox);
  __Pyx_DECREF(__pyx_v_img->bbox);
  __pyx_v_img->bbox = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/pyxpdf/imageoutput.pxi":524
 *         img.page_index = c_img.pageNum
 *         img.bbox = (c_img.x1, c_img.y1, c_img.x2, c_img.y2)
 *         img.hDPI = c_img.hDPI             # <<<<<<<<<<<<<<
 *         img.vDPI = c_img.vDPI
 * 
 */
  __Pyx_TraceLine(524,0,__PYX_ERR(9, 524, __pyx_L1_error))
  __pyx_t_7 = __pyx_v_c_img->hDPI;
  __pyx_v_img->hDPI = __pyx_t_7;

  /* "src/pyxpdf/imageoutput.pxi":525
 *         img.bbox = (c_img.x1, c_img.y1, c_img.x2, c_img.y2)
 *         img.hDPI = c_img.hDPI
 *         img.vDPI = c_img.vDPI             # <<<<<<<<<<<<<<
 * 
 *         img.interpolate = True if c_img.interpolate == gTrue else False
 */
  __Pyx_TraceLine(525,0,__PYX_ERR(9, 525, __pyx_L1_error))
  __pyx_t_7 = __pyx_v_c_img->vDPI;
  __pyx_v_img->vDPI = __pyx_t_7;

  /* "src/pyxpdf/imageoutput.pxi":527
 *         img.vDPI = c_img.vDPI
 * 
 *         img.interpolate = True if c_img.interpolate == gTrue else False             # <<<<<<<<<<<<<<
 *         img.is_inline = True if c_img.inlineImg == gTrue else False
 * 
 */
  __Pyx_TraceLine(527,0,__PYX_ERR(9, 527, __pyx_L1_error))
  if (((__pyx_v_c_img->interpolate == gTrue) != 0)) {
    __pyx_t_8 = 1;
  } else {
    __pyx_t_8 = 0;
  }
  __pyx_v_img->interpolate = __pyx_t_8;

  /* "src/pyxpdf/imageoutput.pxi":528
 * 
 *         img.interpolate = True if c_img.interpolate == gTrue else False
 *         img.is_inline = True if c_img.inlineImg == gTrue else False             # <<<<<<<<<<<<<<
 * 
 *         cs = GFX_COLOR_SPACE_NAMES.get(c_img.colorspace, None)
 */
  __Pyx_TraceLine(528,0,__PYX_ERR(9, 528, __pyx_L1_error))
  if (((__pyx_v_c_img->inlineImg == gTrue) != 0)) {
    __pyx_t_8 = 1;
  } else {
    __pyx_t_8 = 0;
  }
  __pyx_v_img->is_inline = __pyx_t_8;

  /* "src/pyxpdf/imageoutput.pxi":530
 *         img.is_inline = True if c_img.inlineImg == gTrue else False
 * 
 *         cs = GFX_COLOR_SPACE_NAMES.get(c_img.colorspace, None)             # <<<<<<<<<<<<<<
 *         img.colorspace = cs if cs != None else ""
 * 
 */
  __Pyx_TraceLine(530,0,__PYX_ERR(9, 530, __pyx_L1_error))
  if (unlikely(__pyx_v_6pyxpdf_4xpdf_GFX_COLOR_SPACE_NAMES == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(9, 530, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyInt_From_GfxColorSpaceMode(__pyx_v_c_img->colorspace); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyDict_GetItemDefault(__pyx_v_6pyxpdf_4xpdf_GFX_COLOR_SPACE_NAMES, __pyx_t_6, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_cs = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "src/pyxpdf/imageoutput.pxi":531
 * 
 *         cs = GFX_COLOR_SPACE_NAMES.get(c_img.colorspace, None)
 *         img.colorspace = cs if cs != None else ""             # <<<<<<<<<<<<<<
 * 
 *         comp = IMAGE_STREAM_TYPES.get(c_img.compression, None)
 */
  __Pyx_TraceLine(531,0,__PYX_ERR(9, 531, __pyx_L1_error))
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_cs, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 531, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(9, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_8) {
    __Pyx_INCREF(__pyx_v_cs);
    __pyx_t_5 = __pyx_v_cs;
  } else {
    __Pyx_INCREF(__pyx_kp_u__4);
    __pyx_t_5 = __pyx_kp_u__4;
  }
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_img->colorspace);
  __Pyx_DECREF(__pyx_v_img->colorspace);
  __pyx_v_img->colorspace = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "src/pyxpdf/imageoutput.pxi":533
 *         img.colorspace = cs if cs != None else ""
 * 
 *         comp = IMAGE_STREAM_TYPES.get(c_img.compression, None)             # <<<<<<<<<<<<<<
 *         img.compression = comp if comp != None else "unknown"
 * 
 */
  __Pyx_TraceLine(533,0,__PYX_ERR(9, 533, __pyx_L1_error))
  if (unlikely(__pyx_v_6pyxpdf_4xpdf_IMAGE_STREAM_TYPES == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(9, 533, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_StreamKind(__pyx_v_c_img->compression); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyDict_GetItemDefault(__pyx_v_6pyxpdf_4xpdf_IMAGE_STREAM_TYPES, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_comp = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/pyxpdf/imageoutput.pxi":534
 * 
 *         comp = IMAGE_STREAM_TYPES.get(c_img.compression, None)
 *         img.compression = comp if comp != None else "unknown"             # <<<<<<<<<<<<<<
 * 
 *         # image_type
 */
  __Pyx_TraceLine(534,0,__PYX_ERR(9, 534, __pyx_L1_error))
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_comp, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 534, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(9, 534, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_8) {
    __Pyx_INCREF(__pyx_v_comp);
    __pyx_t_6 = __pyx_v_comp;
  } else {
    __Pyx_INCREF(__pyx_n_u_unknown);
    __pyx_t_6 = __pyx_n_u_unknown;
  }
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_img->compression);
  __Pyx_DECREF(__pyx_v_img->compression);
  __pyx_v_img->compression = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/pyxpdf/imageoutput.pxi":537
 * 
 *         # image_type
 *         if c_img.imgType == ImageType.imgImage:             # <<<<<<<<<<<<<<
 *             img.image_type = "image"
 *         elif c_img.imgType == ImageType.imgStencil:
 */
  __Pyx_TraceLine(537,0,__PYX_ERR(9, 537, __pyx_L1_error))
  switch (__pyx_v_c_img->imgType) {
    case imgImage:

    /* "src/pyxpdf/imageoutput.pxi":538
 *         # image_type
 *         if c_img.imgType == ImageType.imgImage:
 *             img.image_type = "image"             # <<<<<<<<<<<<<<
 *         elif c_img.imgType == ImageType.imgStencil:
 *             img.image_type = "stencil"
 */
    __Pyx_TraceLine(538,0,__PYX_ERR(9, 538, __pyx_L1_error))
    __Pyx_INCREF(__pyx_n_u_image);
    __Pyx_GIVEREF(__pyx_n_u_image);
    __Pyx_GOTREF(__pyx_v_img->image_type);
    __Pyx_DECREF(__pyx_v_img->image_type);
    __pyx_v_img->image_type = __pyx_n_u_image;

    /* "src/pyxpdf/imageoutput.pxi":537
 * 
 *         # image_type
 *         if c_img.imgType == ImageType.imgImage:             # <<<<<<<<<<<<<<
 *             img.image_type = "image"
 *         elif c_img.imgType == ImageType.imgStencil:
 */
    break;
    case imgStencil:

    /* "src/pyxpdf/imageoutput.pxi":540
 *             img.image_type = "image"
 *         elif c_img.imgType == ImageType.imgStencil:
 *             img.image_type = "stencil"             # <<<<<<<<<<<<<<
 *         elif c_img.imgType == ImageType.imgMask:
 *             img.image_type = "mask"
 */
    __Pyx_TraceLine(540,0,__PYX_ERR(9, 540, __pyx_L1_error))
    __Pyx_INCREF(__pyx_n_u_stencil);
    __Pyx_GIVEREF(__pyx_n_u_stencil);
    __Pyx_GOTREF(__pyx_v_img->image_type);
    __Pyx_DECREF(__pyx_v_img->image_type);
    __pyx_v_img->image_type = __pyx_n_u_stencil;

    /* "src/pyxpdf/imageoutput.pxi":539
 *         if c_img.imgType == ImageType.imgImage:
 *             img.image_type = "image"
 *         elif c_img.imgType == ImageType.imgStencil:             # <<<<<<<<<<<<<<
 *             img.image_type = "stencil"
 *         elif c_img.imgType == ImageType.imgMask:
 */
    break;
    case imgMask:

    /* "src/pyxpdf/imageoutput.pxi":542
 *             img.image_type = "stencil"
 *         elif c_img.imgType == ImageType.imgMask:
 *             img.image_type = "mask"             # <<<<<<<<<<<<<<
 *         elif c_img.imgType == ImageType.imgSmask:
 *             img.image_type = "smask"
 */
    __Pyx_TraceLine(542,0,__PYX_ERR(9, 542, __pyx_L1_error))
    __Pyx_INCREF(__pyx_n_u_mask);
    __Pyx_GIVEREF(__pyx_n_u_mask);
    __Pyx_GOTREF(__pyx_v_img->image_type);
    __Pyx_DECREF(__pyx_v_img->image_type);
    __pyx_v_img->image_type = __pyx_n_u_mask;

    /* "src/pyxpdf/imageoutput.pxi":541
 *         elif c_img.imgType == ImageType.imgStencil:
 *             img.image_type = "stencil"
 *         elif c_img.imgType == ImageType.imgMask:             # <<<<<<<<<<<<<<
 *             img.image_type = "mask"
 *         elif c_img.imgType == ImageType.imgSmask:
 */
    break;
    case imgSmask:

    /* "src/pyxpdf/imageoutput.pxi":544
 *             img.image_type = "mask"
 *         elif c_img.imgType == ImageType.imgSmask:
 *             img.image_type = "smask"             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"unexpected value of imgType")
 */
    __Pyx_TraceLine(544,0,__PYX_ERR(9, 544, __pyx_L1_error))
    __Pyx_INCREF(__pyx_n_u_smask);
    __Pyx_GIVEREF(__pyx_n_u_smask);
    __Pyx_GOTREF(__pyx_v_img->image_type);
    __Pyx_DECREF(__pyx_v_img->image_type);
    __pyx_v_img->image_type = __pyx_n_u_smask;

    /* "src/pyxpdf/imageoutput.pxi":543
 *         elif c_img.imgType == ImageType.imgMask:
 *             img.image_type = "mask"
 *         elif c_img.imgType == ImageType.imgSmask:             # <<<<<<<<<<<<<<
 *             img.image_type = "smask"
 *         else:
 */
    break;
    default:

    /* "src/pyxpdf/imageoutput.pxi":546
 *             img.image_type = "smask"
 *         else:
 *             raise ValueError(f"unexpected value of imgType")             # <<<<<<<<<<<<<<
 * 
 *         bmap = c_img.bitmap.get()
 */
    __Pyx_TraceLine(546,0,__PYX_ERR(9, 546, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(9, 546, __pyx_L1_error)
    break;
  }

  /* "src/pyxpdf/imageoutput.pxi":548
 *             raise ValueError(f"unexpected value of imgType")
 * 
 *         bmap = c_img.bitmap.get()             # <<<<<<<<<<<<<<
 *         if c_img.bitmapColorMode == SplashColorMode.splashModeMono1:
 *             mode = "1"
 */
  __Pyx_TraceLine(548,0,__PYX_ERR(9, 548, __pyx_L1_error))
  __pyx_v_bmap = __pyx_v_c_img->bitmap.get();

  /* "src/pyxpdf/imageoutput.pxi":549
 * 
 *         bmap = c_img.bitmap.get()
 *         if c_img.bitmapColorMode == SplashColorMode.splashModeMono1:             # <<<<<<<<<<<<<<
 *             mode = "1"
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeMono8:
 */
  __Pyx_TraceLine(549,0,__PYX_ERR(9, 549, __pyx_L1_error))
  switch (__pyx_v_c_img->bitmapColorMode) {
    case splashModeMono1:

    /* "src/pyxpdf/imageoutput.pxi":550
 *         bmap = c_img.bitmap.get()
 *         if c_img.bitmapColorMode == SplashColorMode.splashModeMono1:
 *             mode = "1"             # <<<<<<<<<<<<<<
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeMono8:
 *             mode = "L"
 */
    __Pyx_TraceLine(550,0,__PYX_ERR(9, 550, __pyx_L1_error))
    __Pyx_INCREF(__pyx_kp_u_1);
    __pyx_v_mode = __pyx_kp_u_1;

    /* "src/pyxpdf/imageoutput.pxi":549
 * 
 *         bmap = c_img.bitmap.get()
 *         if c_img.bitmapColorMode == SplashColorMode.splashModeMono1:             # <<<<<<<<<<<<<<
 *             mode = "1"
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeMono8:
 */
    break;
    case splashModeMono8:

    /* "src/pyxpdf/imageoutput.pxi":552
 *             mode = "1"
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeMono8:
 *             mode = "L"             # <<<<<<<<<<<<<<
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeRGB8:
 *             mode = "RGB"
 */
    __Pyx_TraceLine(552,0,__PYX_ERR(9, 552, __pyx_L1_error))
    __Pyx_INCREF(__pyx_n_u_L);
    __pyx_v_mode = __pyx_n_u_L;

    /* "src/pyxpdf/imageoutput.pxi":551
 *         if c_img.bitmapColorMode == SplashColorMode.splashModeMono1:
 *             mode = "1"
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeMono8:             # <<<<<<<<<<<<<<
 *             mode = "L"
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeRGB8:
 */
    break;
    case splashModeRGB8:

    /* "src/pyxpdf/imageoutput.pxi":554
 *             mode = "L"
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeRGB8:
 *             mode = "RGB"             # <<<<<<<<<<<<<<
 *         buff = splash_bitmap_to_buffer(bmap, mode)
 *         img.image = pillow_image_from_buffer(mode, bmap.getHeight(), bmap.getWidth(), buff)
 */
    __Pyx_TraceLine(554,0,__PYX_ERR(9, 554, __pyx_L1_error))
    __Pyx_INCREF(__pyx_n_u_RGB);
    __pyx_v_mode = __pyx_n_u_RGB;

    /* "src/pyxpdf/imageoutput.pxi":553
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeMono8:
 *             mode = "L"
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeRGB8:             # <<<<<<<<<<<<<<
 *             mode = "RGB"
 *         buff = splash_bitmap_to_buffer(bmap, mode)
 */
    break;
    default: break;
  }

  /* "src/pyxpdf/imageoutput.pxi":555
 *         elif c_img.bitmapColorMode == SplashColorMode.splashModeRGB8:
 *             mode = "RGB"
 *         buff = splash_bitmap_to_buffer(bmap, mode)             # <<<<<<<<<<<<<<
 *         img.image = pillow_image_from_buffer(mode, bmap.getHeight(), bmap.getWidth(), buff)
 * 
 */
  __Pyx_TraceLine(555,0,__PYX_ERR(9, 555, __pyx_L1_error))
  if (unlikely(!__pyx_v_mode)) { __Pyx_RaiseUnboundLocalError("mode"); __PYX_ERR(9, 555, __pyx_L1_error) }
  __pyx_t_6 = __pyx_f_6pyxpdf_4xpdf_splash_bitmap_to_buffer(__pyx_v_bmap, __pyx_v_mode); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_buff = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "src/pyxpdf/imageoutput.pxi":556
 *             mode = "RGB"
 *         buff = splash_bitmap_to_buffer(bmap, mode)
 *         img.image = pillow_image_from_buffer(mode, bmap.getHeight(), bmap.getWidth(), buff)             # <<<<<<<<<<<<<<
 * 
 *         return img
 */
  __Pyx_TraceLine(556,0,__PYX_ERR(9, 556, __pyx_L1_error))
  if (unlikely(!__pyx_v_mode)) { __Pyx_RaiseUnboundLocalError("mode"); __PYX_ERR(9, 556, __pyx_L1_error) }
  __pyx_t_6 = __pyx_f_6pyxpdf_4xpdf_pillow_image_from_buffer(__pyx_v_mode, __pyx_v_bmap->getHeight(), __pyx_v_bmap->getWidth(), __pyx_v_buff); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_img->image);
  __Pyx_DECREF(__pyx_v_img->image);
  __pyx_v_img->image = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "src/pyxpdf/imageoutput.pxi":558
 *         img.image = pillow_image_from_buffer(mode, bmap.getHeight(), bmap.getWidth(), buff)
 * 
 *         return img             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_TraceLine(558,0,__PYX_ERR(9, 558, __pyx_L1_error))
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_img));
  __pyx_r = __pyx_v_img;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":517
 * 
 *     @staticmethod
 *     cdef PDFImage from_ptr(PDFBitmapImage *c_img):             # <<<<<<<<<<<<<<
 *         cdef:
 *             PDFImage img = PDFImage.__new__(PDFImage)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_img);
  __Pyx_XDECREF(__pyx_v_mode);
  __Pyx_XDECREF(__pyx_v_cs);
  __Pyx_XDECREF(__pyx_v_comp);
  __Pyx_XDECREF(__pyx_v_buff);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":560
 *         return img
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"<pyxpdf.xpdf.PDFImage type={self.image_type} compression={self.compression} colorspace={self.colorspace} bbox={self.bbox}>"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage___repr__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage___repr__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[9], 560, 0, __PYX_ERR(9, 560, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":561
 * 
 *     def __repr__(self):
 *         return f"<pyxpdf.xpdf.PDFImage type={self.image_type} compression={self.compression} colorspace={self.colorspace} bbox={self.bbox}>"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(561,0,__PYX_ERR(9, 561, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_pyxpdf_xpdf_PDFImage_type);
  __pyx_t_2 += 27;
  __Pyx_GIVEREF(__pyx_kp_u_pyxpdf_xpdf_PDFImage_type);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_pyxpdf_xpdf_PDFImage_type);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->image_type, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_compression);
  __pyx_t_2 += 13;
  __Pyx_GIVEREF(__pyx_kp_u_compression);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_compression);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->compression, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_colorspace);
  __pyx_t_2 += 12;
  __Pyx_GIVEREF(__pyx_kp_u_colorspace);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_colorspace);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->colorspace, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_bbox);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_bbox);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_bbox);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->bbox, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__65);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__65);
  PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u__65);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 9, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":560
 *         return img
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"<pyxpdf.xpdf.PDFImage type={self.image_type} compression={self.compression} colorspace={self.colorspace} bbox={self.bbox}>"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":505
 * cdef class PDFImage:
 *     cdef:
 *         readonly tuple bbox             # <<<<<<<<<<<<<<
 *         readonly int page_index
 *         readonly bint interpolate
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_4bbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_4bbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_4bbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_4bbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 505, 0, __PYX_ERR(9, 505, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->bbox);
  __pyx_r = __pyx_v_self->bbox;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.bbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":506
 *     cdef:
 *         readonly tuple bbox
 *         readonly int page_index             # <<<<<<<<<<<<<<
 *         readonly bint interpolate
 *         readonly bint is_inline
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_10page_index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_10page_index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_10page_index___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_10page_index___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 506, 0, __PYX_ERR(9, 506, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->page_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.page_index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":507
 *         readonly tuple bbox
 *         readonly int page_index
 *         readonly bint interpolate             # <<<<<<<<<<<<<<
 *         readonly bint is_inline
 *         readonly double hDPI
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_11interpolate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_11interpolate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_11interpolate___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_11interpolate___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 507, 0, __PYX_ERR(9, 507, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->interpolate); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.interpolate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":508
 *         readonly int page_index
 *         readonly bint interpolate
 *         readonly bint is_inline             # <<<<<<<<<<<<<<
 *         readonly double hDPI
 *         readonly double vDPI
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_9is_inline_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_9is_inline_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_9is_inline___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_9is_inline___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 508, 0, __PYX_ERR(9, 508, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->is_inline); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.is_inline.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":509
 *         readonly bint interpolate
 *         readonly bint is_inline
 *         readonly double hDPI             # <<<<<<<<<<<<<<
 *         readonly double vDPI
 *         readonly object colorspace
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_4hDPI_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_4hDPI_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_4hDPI___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_4hDPI___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 509, 0, __PYX_ERR(9, 509, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hDPI); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.hDPI.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":510
 *         readonly bint is_inline
 *         readonly double hDPI
 *         readonly double vDPI             # <<<<<<<<<<<<<<
 *         readonly object colorspace
 *         readonly object image_type
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_4vDPI_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_4vDPI_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_4vDPI___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_4vDPI___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 510, 0, __PYX_ERR(9, 510, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->vDPI); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.vDPI.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":511
 *         readonly double hDPI
 *         readonly double vDPI
 *         readonly object colorspace             # <<<<<<<<<<<<<<
 *         readonly object image_type
 *         readonly object compression
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_10colorspace_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_10colorspace_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_10colorspace___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_10colorspace___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 511, 0, __PYX_ERR(9, 511, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->colorspace);
  __pyx_r = __pyx_v_self->colorspace;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.colorspace.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":512
 *         readonly double vDPI
 *         readonly object colorspace
 *         readonly object image_type             # <<<<<<<<<<<<<<
 *         readonly object compression
 *         readonly object image
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_10image_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_10image_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_10image_type___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_10image_type___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 512, 0, __PYX_ERR(9, 512, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->image_type);
  __pyx_r = __pyx_v_self->image_type;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.image_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":513
 *         readonly object colorspace
 *         readonly object image_type
 *         readonly object compression             # <<<<<<<<<<<<<<
 *         readonly object image
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_11compression_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_11compression_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_11compression___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_11compression___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 513, 0, __PYX_ERR(9, 513, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->compression);
  __pyx_r = __pyx_v_self->compression;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.compression.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":514
 *         readonly object image_type
 *         readonly object compression
 *         readonly object image             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_5image_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_5image_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_5image___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_5image___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 514, 0, __PYX_ERR(9, 514, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->image);
  __pyx_r = __pyx_v_self->image;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.image.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8PDFImage_2__reduce_cython__[] = "PDFImage.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8PDFImage_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFImage_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8PDFImage_2__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_2__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__66)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.bbox, self.colorspace, self.compression, self.hDPI, self.image, self.image_type, self.interpolate, self.is_inline, self.page_index, self.vDPI)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->hDPI); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->interpolate); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->is_inline); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->page_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->vDPI); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(10); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_self->bbox);
  __Pyx_GIVEREF(__pyx_v_self->bbox);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_self->bbox);
  __Pyx_INCREF(__pyx_v_self->colorspace);
  __Pyx_GIVEREF(__pyx_v_self->colorspace);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_self->colorspace);
  __Pyx_INCREF(__pyx_v_self->compression);
  __Pyx_GIVEREF(__pyx_v_self->compression);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_self->compression);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->image);
  __Pyx_GIVEREF(__pyx_v_self->image);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_v_self->image);
  __Pyx_INCREF(__pyx_v_self->image_type);
  __Pyx_GIVEREF(__pyx_v_self->image_type);
  PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_v_self->image_type);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 8, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 9, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.bbox, self.colorspace, self.compression, self.hDPI, self.image, self.image_type, self.interpolate, self.is_inline, self.page_index, self.vDPI)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_6 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v__dict = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "(tree fragment)":7
 *     state = (self.bbox, self.colorspace, self.compression, self.hDPI, self.image, self.image_type, self.interpolate, self.is_inline, self.page_index, self.vDPI)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_7 = (__pyx_v__dict != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v__dict);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.bbox is not None or self.colorspace is not None or self.compression is not None or self.image is not None or self.image_type is not None
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.bbox, self.colorspace, self.compression, self.hDPI, self.image, self.image_type, self.interpolate, self.is_inline, self.page_index, self.vDPI)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.bbox is not None or self.colorspace is not None or self.compression is not None or self.image is not None or self.image_type is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_t_7 = (__pyx_v_self->bbox != ((PyObject*)Py_None));
    __pyx_t_9 = (__pyx_t_7 != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_self->colorspace != Py_None);
    __pyx_t_7 = (__pyx_t_9 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_8 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_self->compression != Py_None);
    __pyx_t_9 = (__pyx_t_7 != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_9 = (__pyx_v_self->image != Py_None);
    __pyx_t_7 = (__pyx_t_9 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_8 = __pyx_t_7;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_7 = (__pyx_v_self->image_type != Py_None);
    __pyx_t_9 = (__pyx_t_7 != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_8;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.bbox is not None or self.colorspace is not None or self.compression is not None or self.image is not None or self.image_type is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_8 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_8) {

    /* "(tree fragment)":13
 *         use_setstate = self.bbox is not None or self.colorspace is not None or self.compression is not None or self.image is not None or self.image_type is not None
 *     if use_setstate:
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PDFImage); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_185634786);
    __Pyx_GIVEREF(__pyx_int_185634786);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_185634786);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_6, 2, Py_None);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.bbox is not None or self.colorspace is not None or self.compression is not None or self.image is not None or self.image_type is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, None), state
 *     else:
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFImage__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PDFImage); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_185634786);
    __Pyx_GIVEREF(__pyx_int_185634786);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_185634786);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFImage__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8PDFImage_4__setstate_cython__[] = "PDFImage.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8PDFImage_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFImage_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_8PDFImage_4__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFImage_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFImage_4__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFImage_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__67)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFImage__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFImage__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFImage__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":583
 * 
 * 
 *     def __cinit__(self, Document doc not None):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_doc,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_doc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(9, 583, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(9, 583, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImageOutput.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_doc), __pyx_ptype_6pyxpdf_4xpdf_Document, 0, "doc", 0))) __PYX_ERR(9, 583, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput___cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *)__pyx_v_self), __pyx_v_doc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[9], 583, 0, __PYX_ERR(9, 583, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":584
 * 
 *     def __cinit__(self, Document doc not None):
 *         self.doc = doc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(584,0,__PYX_ERR(9, 584, __pyx_L1_error))
  __Pyx_INCREF(((PyObject *)__pyx_v_doc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_doc));
  __Pyx_GOTREF(__pyx_v_self->doc);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->doc));
  __pyx_v_self->doc = __pyx_v_doc;

  /* "src/pyxpdf/imageoutput.pxi":583
 * 
 * 
 *     def __cinit__(self, Document doc not None):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImageOutput.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":587
 * 
 * 
 *     cdef int _get_PDFBitmapImages(self, page_no, vector[PDFBitmapImage] *img_vec) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[BitmapOutputDev] out = make_unique[BitmapOutputDev](img_vec)
 */

static int __pyx_f_6pyxpdf_4xpdf_14PDFImageOutput__get_PDFBitmapImages(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, PyObject *__pyx_v_page_no, std::vector<PDFBitmapImage>  *__pyx_v_img_vec) {
  std::unique_ptr<BitmapOutputDev>  __pyx_v_out;
  struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_page = 0;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_PDFBitmapImages", 0);
  __Pyx_TraceCall("_get_PDFBitmapImages", __pyx_f[9], 587, 0, __PYX_ERR(9, 587, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":589
 *     cdef int _get_PDFBitmapImages(self, page_no, vector[PDFBitmapImage] *img_vec) except -1:
 *         cdef:
 *             unique_ptr[BitmapOutputDev] out = make_unique[BitmapOutputDev](img_vec)             # <<<<<<<<<<<<<<
 *             Page page = self.doc.get_page(page_no)
 * 
 */
  __Pyx_TraceLine(589,0,__PYX_ERR(9, 589, __pyx_L1_error))
  __pyx_v_out = std::make_unique<BitmapOutputDev>(__pyx_v_img_vec);

  /* "src/pyxpdf/imageoutput.pxi":590
 *         cdef:
 *             unique_ptr[BitmapOutputDev] out = make_unique[BitmapOutputDev](img_vec)
 *             Page page = self.doc.get_page(page_no)             # <<<<<<<<<<<<<<
 * 
 *         page.display(out.get())
 */
  __Pyx_TraceLine(590,0,__PYX_ERR(9, 590, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_page_no); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 590, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->doc->__pyx_vtab)->get_page(__pyx_v_self->doc, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6pyxpdf_4xpdf_Page))))) __PYX_ERR(9, 590, __pyx_L1_error)
  __pyx_v_page = ((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":592
 *             Page page = self.doc.get_page(page_no)
 * 
 *         page.display(out.get())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(592,0,__PYX_ERR(9, 592, __pyx_L1_error))
  __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_page->__pyx_vtab)->display(__pyx_v_page, __pyx_v_out.get(), NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/imageoutput.pxi":587
 * 
 * 
 *     cdef int _get_PDFBitmapImages(self, page_no, vector[PDFBitmapImage] *img_vec) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[BitmapOutputDev] out = make_unique[BitmapOutputDev](img_vec)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImageOutput._get_PDFBitmapImages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_page);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":595
 * 
 * 
 *     cdef list _get_images(self, page_no):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector[PDFBitmapImage] img_vec
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_14PDFImageOutput__get_images(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, PyObject *__pyx_v_page_no) {
  std::vector<PDFBitmapImage>  __pyx_v_img_vec;
  size_t __pyx_v_i;
  PyObject *__pyx_v_images = 0;
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v_img = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  std::vector<PDFBitmapImage> ::size_type __pyx_t_3;
  std::vector<PDFBitmapImage> ::size_type __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_images", 0);
  __Pyx_TraceCall("_get_images", __pyx_f[9], 595, 0, __PYX_ERR(9, 595, __pyx_L1_error));

  /* "src/pyxpdf/imageoutput.pxi":599
 *             vector[PDFBitmapImage] img_vec
 *             size_t i
 *             list images = []             # <<<<<<<<<<<<<<
 * 
 *         self._get_PDFBitmapImages(page_no, &img_vec)
 */
  __Pyx_TraceLine(599,0,__PYX_ERR(9, 599, __pyx_L1_error))
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_images = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":601
 *             list images = []
 * 
 *         self._get_PDFBitmapImages(page_no, &img_vec)             # <<<<<<<<<<<<<<
 *         for i in range(img_vec.size()):
 *             img = PDFImage.from_ptr(&img_vec[i])
 */
  __Pyx_TraceLine(601,0,__PYX_ERR(9, 601, __pyx_L1_error))
  __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImageOutput *)__pyx_v_self->__pyx_vtab)->_get_PDFBitmapImages(__pyx_v_self, __pyx_v_page_no, (&__pyx_v_img_vec)); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(9, 601, __pyx_L1_error)

  /* "src/pyxpdf/imageoutput.pxi":602
 * 
 *         self._get_PDFBitmapImages(page_no, &img_vec)
 *         for i in range(img_vec.size()):             # <<<<<<<<<<<<<<
 *             img = PDFImage.from_ptr(&img_vec[i])
 *             images.append(img)
 */
  __Pyx_TraceLine(602,0,__PYX_ERR(9, 602, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_img_vec.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "src/pyxpdf/imageoutput.pxi":603
 *         self._get_PDFBitmapImages(page_no, &img_vec)
 *         for i in range(img_vec.size()):
 *             img = PDFImage.from_ptr(&img_vec[i])             # <<<<<<<<<<<<<<
 *             images.append(img)
 * 
 */
    __Pyx_TraceLine(603,0,__PYX_ERR(9, 603, __pyx_L1_error))
    __pyx_t_1 = ((PyObject *)__pyx_f_6pyxpdf_4xpdf_8PDFImage_from_ptr((&(__pyx_v_img_vec[__pyx_v_i])))); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_img, ((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "src/pyxpdf/imageoutput.pxi":604
 *         for i in range(img_vec.size()):
 *             img = PDFImage.from_ptr(&img_vec[i])
 *             images.append(img)             # <<<<<<<<<<<<<<
 * 
 *         return images
 */
    __Pyx_TraceLine(604,0,__PYX_ERR(9, 604, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_images, ((PyObject *)__pyx_v_img)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(9, 604, __pyx_L1_error)
  }

  /* "src/pyxpdf/imageoutput.pxi":606
 *             images.append(img)
 * 
 *         return images             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(606,0,__PYX_ERR(9, 606, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_images);
  __pyx_r = __pyx_v_images;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":595
 * 
 * 
 *     cdef list _get_images(self, page_no):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector[PDFBitmapImage] img_vec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImageOutput._get_images", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_images);
  __Pyx_XDECREF((PyObject *)__pyx_v_img);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":609
 * 
 * 
 *     cpdef list get(self, page_no):             # <<<<<<<<<<<<<<
 *         """Get all the images from `page_no` indexed page.
 * 
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_3get(PyObject *__pyx_v_self, PyObject *__pyx_v_page_no); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_14PDFImageOutput_get(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, PyObject *__pyx_v_page_no, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__68)
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_TraceCall("get", __pyx_f[9], 609, 0, __PYX_ERR(9, 609, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 609, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_3get)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_page_no) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_page_no);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 609, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(9, 609, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "src/pyxpdf/imageoutput.pxi":622
 *             All the images in PDF Page
 *         """
 *         return self._get_images(page_no)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(622,0,__PYX_ERR(9, 622, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImageOutput *)__pyx_v_self->__pyx_vtab)->_get_images(__pyx_v_self, __pyx_v_page_no); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/imageoutput.pxi":609
 * 
 * 
 *     cpdef list get(self, page_no):             # <<<<<<<<<<<<<<
 *         """Get all the images from `page_no` indexed page.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImageOutput.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_3get(PyObject *__pyx_v_self, PyObject *__pyx_v_page_no); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_14PDFImageOutput_2get[] = "PDFImageOutput.get(self, page_no) -> list\nGet all the images from `page_no` indexed page.\n\n        Parameters\n        ----------\n        page_no : int\n            index of page to render\n\n        Return\n        ------\n        list of :class:`~PIL.Image.Image`\n            All the images in PDF Page\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_14PDFImageOutput_3get = {"get", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_3get, METH_O, __pyx_doc_6pyxpdf_4xpdf_14PDFImageOutput_2get};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_3get(PyObject *__pyx_v_self, PyObject *__pyx_v_page_no) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_2get(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *)__pyx_v_self), ((PyObject *)__pyx_v_page_no));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_2get(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, PyObject *__pyx_v_page_no) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__68)
  __Pyx_RefNannySetupContext("get", 0);
  __Pyx_TraceCall("get (wrapper)", __pyx_f[9], 609, 0, __PYX_ERR(9, 609, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_14PDFImageOutput_get(__pyx_v_self, __pyx_v_page_no, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImageOutput.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/imageoutput.pxi":580
 *     """
 *     cdef:
 *         readonly Document doc             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_3doc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_3doc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_3doc___get__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[9], 580, 0, __PYX_ERR(9, 580, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->doc));
  __pyx_r = ((PyObject *)__pyx_v_self->doc);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImageOutput.doc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_14PDFImageOutput_4__reduce_cython__[] = "PDFImageOutput.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_14PDFImageOutput_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_5__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_14PDFImageOutput_4__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_4__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__69)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(7, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImageOutput.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_14PDFImageOutput_6__setstate_cython__[] = "PDFImageOutput.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_14PDFImageOutput_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_7__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_14PDFImageOutput_6__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_6__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14PDFImageOutput_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__71)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 3, 0, __PYX_ERR(7, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFImageOutput.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":85
 *         list _pages_cache
 * 
 *     def __init__(self, pdf, ownerpass=None, userpass=None):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_8Document_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8Document___init__[] = "\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6pyxpdf_4xpdf_8Document___init__;
#endif
static int __pyx_pw_6pyxpdf_4xpdf_8Document_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_pdf = 0;
  CYTHON_UNUSED PyObject *__pyx_v_ownerpass = 0;
  CYTHON_UNUSED PyObject *__pyx_v_userpass = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pdf,&__pyx_n_s_ownerpass,&__pyx_n_s_userpass,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdf)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ownerpass);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_userpass);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(6, 85, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pdf = values[0];
    __pyx_v_ownerpass = values[1];
    __pyx_v_userpass = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 85, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document___init__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self), __pyx_v_pdf, __pyx_v_ownerpass, __pyx_v_userpass);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_8Document___init__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pdf, CYTHON_UNUSED PyObject *__pyx_v_ownerpass, CYTHON_UNUSED PyObject *__pyx_v_userpass) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[6], 85, 0, __PYX_ERR(6, 85, __pyx_L1_error));

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":89
 *         """
 * 
 *     def __cinit__(self, pdf, ownerpass=None, userpass=None):             # <<<<<<<<<<<<<<
 *         self.doc = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_8Document_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_8Document_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pdf = 0;
  PyObject *__pyx_v_ownerpass = 0;
  PyObject *__pyx_v_userpass = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pdf,&__pyx_n_s_ownerpass,&__pyx_n_s_userpass,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdf)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ownerpass);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_userpass);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(6, 89, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pdf = values[0];
    __pyx_v_ownerpass = values[1];
    __pyx_v_userpass = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 89, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_2__cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self), __pyx_v_pdf, __pyx_v_ownerpass, __pyx_v_userpass);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_8Document_2__cinit__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, PyObject *__pyx_v_pdf, PyObject *__pyx_v_ownerpass, PyObject *__pyx_v_userpass) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  GString *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[6], 89, 0, __PYX_ERR(6, 89, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":90
 * 
 *     def __cinit__(self, pdf, ownerpass=None, userpass=None):
 *         self.doc = NULL             # <<<<<<<<<<<<<<
 * 
 *         # Type casting NULL to prebent MSVC/C14 errors
 */
  __Pyx_TraceLine(90,0,__PYX_ERR(6, 90, __pyx_L1_error))
  __pyx_v_self->doc = NULL;

  /* "src/pyxpdf/document.pxi":93
 * 
 *         # Type casting NULL to prebent MSVC/C14 errors
 *         self.ownerpass = <GString*> NULL if ownerpass == None else to_GString(ownerpass)             # <<<<<<<<<<<<<<
 *         self.userpass = <GString*> NULL if userpass == None else to_GString(userpass)
 * 
 */
  __Pyx_TraceLine(93,0,__PYX_ERR(6, 93, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_ownerpass, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 93, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(6, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = ((GString *)NULL);
  } else {
    __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_ownerpass);
  }
  __pyx_v_self->ownerpass = __pyx_t_1;

  /* "src/pyxpdf/document.pxi":94
 *         # Type casting NULL to prebent MSVC/C14 errors
 *         self.ownerpass = <GString*> NULL if ownerpass == None else to_GString(ownerpass)
 *         self.userpass = <GString*> NULL if userpass == None else to_GString(userpass)             # <<<<<<<<<<<<<<
 * 
 *         # pdf file path
 */
  __Pyx_TraceLine(94,0,__PYX_ERR(6, 94, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_userpass, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 94, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(6, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_1 = ((GString *)NULL);
  } else {
    __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_userpass);
  }
  __pyx_v_self->userpass = __pyx_t_1;

  /* "src/pyxpdf/document.pxi":97
 * 
 *         # pdf file path
 *         if isinstance(pdf, basestring):             # <<<<<<<<<<<<<<
 *             self._load_from_file(to_GString(pdf))
 *         # file-like object
 */
  __Pyx_TraceLine(97,0,__PYX_ERR(6, 97, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyBaseString_Check(__pyx_v_pdf); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "src/pyxpdf/document.pxi":98
 *         # pdf file path
 *         if isinstance(pdf, basestring):
 *             self._load_from_file(to_GString(pdf))             # <<<<<<<<<<<<<<
 *         # file-like object
 *         elif callable(getattr(pdf, 'read', None)):
 */
    __Pyx_TraceLine(98,0,__PYX_ERR(6, 98, __pyx_L1_error))
    __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->_load_from_file(__pyx_v_self, __pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_pdf)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/document.pxi":97
 * 
 *         # pdf file path
 *         if isinstance(pdf, basestring):             # <<<<<<<<<<<<<<
 *             self._load_from_file(to_GString(pdf))
 *         # file-like object
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/document.pxi":100
 *             self._load_from_file(to_GString(pdf))
 *         # file-like object
 *         elif callable(getattr(pdf, 'read', None)):             # <<<<<<<<<<<<<<
 *             # copy buffer
 *             self.doc_data = pdf.read()
 */
  __Pyx_TraceLine(100,0,__PYX_ERR(6, 100, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetAttr3(__pyx_v_pdf, __pyx_n_u_read, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyCallable_Check(__pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(6, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (likely(__pyx_t_3)) {

    /* "src/pyxpdf/document.pxi":102
 *         elif callable(getattr(pdf, 'read', None)):
 *             # copy buffer
 *             self.doc_data = pdf.read()             # <<<<<<<<<<<<<<
 *             self._load_from_char_array(self.doc_data, len(self.doc_data))
 *         else:
 */
    __Pyx_TraceLine(102,0,__PYX_ERR(6, 102, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_pdf, __pyx_n_s_read); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(6, 102, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->doc_data);
    __Pyx_DECREF(__pyx_v_self->doc_data);
    __pyx_v_self->doc_data = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/pyxpdf/document.pxi":103
 *             # copy buffer
 *             self.doc_data = pdf.read()
 *             self._load_from_char_array(self.doc_data, len(self.doc_data))             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"pdf argument must be a string or a file-like object.")
 */
    __Pyx_TraceLine(103,0,__PYX_ERR(6, 103, __pyx_L1_error))
    if (unlikely(__pyx_v_self->doc_data == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(6, 103, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->doc_data); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(6, 103, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_self->doc_data;
    __Pyx_INCREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(6, 103, __pyx_L1_error)
    }
    __pyx_t_8 = PyBytes_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(6, 103, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->_load_from_char_array(__pyx_v_self, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/document.pxi":100
 *             self._load_from_file(to_GString(pdf))
 *         # file-like object
 *         elif callable(getattr(pdf, 'read', None)):             # <<<<<<<<<<<<<<
 *             # copy buffer
 *             self.doc_data = pdf.read()
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/document.pxi":105
 *             self._load_from_char_array(self.doc_data, len(self.doc_data))
 *         else:
 *             raise ValueError(f"pdf argument must be a string or a file-like object.")             # <<<<<<<<<<<<<<
 * 
 *         # check PDFDoc
 */
  __Pyx_TraceLine(105,0,__PYX_ERR(6, 105, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(6, 105, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "src/pyxpdf/document.pxi":108
 * 
 *         # check PDFDoc
 *         self.check()             # <<<<<<<<<<<<<<
 * 
 *         # build empty cache
 */
  __Pyx_TraceLine(108,0,__PYX_ERR(6, 108, __pyx_L1_error))
  __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->check(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/document.pxi":111
 * 
 *         # build empty cache
 *         self._pages_cache = [None] * self.num_pages             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_TraceLine(111,0,__PYX_ERR(6, 111, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyList_SET_ITEM(__pyx_t_5, 0, Py_None);
  { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_temp)) __PYX_ERR(6, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_temp);
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = __pyx_temp;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_pages_cache);
  __Pyx_DECREF(__pyx_v_self->_pages_cache);
  __pyx_v_self->_pages_cache = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "src/pyxpdf/document.pxi":89
 *         """
 * 
 *     def __cinit__(self, pdf, ownerpass=None, userpass=None):             # <<<<<<<<<<<<<<
 *         self.doc = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":113
 *         self._pages_cache = [None] * self.num_pages
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.doc
 *         del self.ownerpass
 */

/* Python wrapper */
static void __pyx_pw_6pyxpdf_4xpdf_8Document_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pyxpdf_4xpdf_8Document_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pyxpdf_4xpdf_8Document_4__dealloc__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pyxpdf_4xpdf_8Document_4__dealloc__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[6], 113, 0, __PYX_ERR(6, 113, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":114
 * 
 *     def __dealloc__(self):
 *         del self.doc             # <<<<<<<<<<<<<<
 *         del self.ownerpass
 *         del self.userpass
 */
  __Pyx_TraceLine(114,0,__PYX_ERR(6, 114, __pyx_L1_error))
  delete __pyx_v_self->doc;

  /* "src/pyxpdf/document.pxi":115
 *     def __dealloc__(self):
 *         del self.doc
 *         del self.ownerpass             # <<<<<<<<<<<<<<
 *         del self.userpass
 * 
 */
  __Pyx_TraceLine(115,0,__PYX_ERR(6, 115, __pyx_L1_error))
  delete __pyx_v_self->ownerpass;

  /* "src/pyxpdf/document.pxi":116
 *         del self.doc
 *         del self.ownerpass
 *         del self.userpass             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(116,0,__PYX_ERR(6, 116, __pyx_L1_error))
  delete __pyx_v_self->userpass;

  /* "src/pyxpdf/document.pxi":113
 *         self._pages_cache = [None] * self.num_pages
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.doc
 *         del self.ownerpass
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.Document.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "src/pyxpdf/document.pxi":119
 * 
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         fname = "Stream" if self.filename == "" else self.filename
 *         return "<Document [{fname}]>".format(fname=fname)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_7__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_7__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_6__repr__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_6__repr__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[6], 119, 0, __PYX_ERR(6, 119, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":120
 * 
 *     def __repr__(self):
 *         fname = "Stream" if self.filename == "" else self.filename             # <<<<<<<<<<<<<<
 *         return "<Document [{fname}]>".format(fname=fname)
 * 
 */
  __Pyx_TraceLine(120,0,__PYX_ERR(6, 120, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filename); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_kp_u__4, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(6, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_n_u_Stream);
    __pyx_t_1 = __pyx_n_u_Stream;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filename); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_fname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":121
 *     def __repr__(self):
 *         fname = "Stream" if self.filename == "" else self.filename
 *         return "<Document [{fname}]>".format(fname=fname)             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_TraceLine(121,0,__PYX_ERR(6, 121, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Document_fname, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fname, __pyx_v_fname) < 0) __PYX_ERR(6, 121, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":119
 * 
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         fname = "Stream" if self.filename == "" else self.filename
 *         return "<Document [{fname}]>".format(fname=fname)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":123
 *         return "<Document [{fname}]>".format(fname=fname)
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         fname = "Stream" if self.filename == "" else self.filename
 *         return "<Document [{fname}] [{pages}]>".format(fname=fname, pages=self.num_pages)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_9__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_9__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_8__str__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_8__str__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_v_fname = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);
  __Pyx_TraceCall("__str__", __pyx_f[6], 123, 0, __PYX_ERR(6, 123, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":124
 * 
 *     def __str__(self):
 *         fname = "Stream" if self.filename == "" else self.filename             # <<<<<<<<<<<<<<
 *         return "<Document [{fname}] [{pages}]>".format(fname=fname, pages=self.num_pages)
 * 
 */
  __Pyx_TraceLine(124,0,__PYX_ERR(6, 124, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filename); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_kp_u__4, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(6, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_n_u_Stream);
    __pyx_t_1 = __pyx_n_u_Stream;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filename); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_fname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":125
 *     def __str__(self):
 *         fname = "Stream" if self.filename == "" else self.filename
 *         return "<Document [{fname}] [{pages}]>".format(fname=fname, pages=self.num_pages)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_TraceLine(125,0,__PYX_ERR(6, 125, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Document_fname_pages, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fname, __pyx_v_fname) < 0) __PYX_ERR(6, 125, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_pages, __pyx_t_4) < 0) __PYX_ERR(6, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":123
 *         return "<Document [{fname}]>".format(fname=fname)
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         fname = "Stream" if self.filename == "" else self.filename
 *         return "<Document [{fname}] [{pages}]>".format(fname=fname, pages=self.num_pages)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fname);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":127
 *         return "<Document [{fname}] [{pages}]>".format(fname=fname, pages=self.num_pages)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.num_pages
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6pyxpdf_4xpdf_8Document_11__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6pyxpdf_4xpdf_8Document_11__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_10__len__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6pyxpdf_4xpdf_8Document_10__len__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);
  __Pyx_TraceCall("__len__", __pyx_f[6], 127, 0, __PYX_ERR(6, 127, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":128
 * 
 *     def __len__(self):
 *         return self.num_pages             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
  __Pyx_TraceLine(128,0,__PYX_ERR(6, 128, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(6, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":127
 *         return "<Document [{fname}] [{pages}]>".format(fname=fname, pages=self.num_pages)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.num_pages
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":130
 *         return self.num_pages
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if isinstance(key, str):
 *             pgno = self.label_to_index(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_13__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_13__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_12__getitem__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_12__getitem__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_v_pgno;
  PyObject *__pyx_7genexpr__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_TraceCall("__getitem__", __pyx_f[6], 130, 0, __PYX_ERR(6, 130, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_key);

  /* "src/pyxpdf/document.pxi":131
 * 
 *     def __getitem__(self, key):
 *         if isinstance(key, str):             # <<<<<<<<<<<<<<
 *             pgno = self.label_to_index(key)
 *             if pgno == -1:
 */
  __Pyx_TraceLine(131,0,__PYX_ERR(6, 131, __pyx_L1_error))
  __pyx_t_1 = PyUnicode_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/document.pxi":132
 *     def __getitem__(self, key):
 *         if isinstance(key, str):
 *             pgno = self.label_to_index(key)             # <<<<<<<<<<<<<<
 *             if pgno == -1:
 *                 raise KeyError(
 */
    __Pyx_TraceLine(132,0,__PYX_ERR(6, 132, __pyx_L1_error))
    __pyx_v_pgno = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->label_to_index(__pyx_v_self, __pyx_v_key);

    /* "src/pyxpdf/document.pxi":133
 *         if isinstance(key, str):
 *             pgno = self.label_to_index(key)
 *             if pgno == -1:             # <<<<<<<<<<<<<<
 *                 raise KeyError(
 *                     "Could not find page with label '{key}'".format(key=key))
 */
    __Pyx_TraceLine(133,0,__PYX_ERR(6, 133, __pyx_L1_error))
    __pyx_t_2 = ((__pyx_v_pgno == -1L) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "src/pyxpdf/document.pxi":135
 *             if pgno == -1:
 *                 raise KeyError(
 *                     "Could not find page with label '{key}'".format(key=key))             # <<<<<<<<<<<<<<
 *             return self.get_page(pgno)
 *         elif isinstance(key, int):
 */
      __Pyx_TraceLine(135,0,__PYX_ERR(6, 135, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Could_not_find_page_with_label_k, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_key, __pyx_v_key) < 0) __PYX_ERR(6, 135, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "src/pyxpdf/document.pxi":134
 *             pgno = self.label_to_index(key)
 *             if pgno == -1:
 *                 raise KeyError(             # <<<<<<<<<<<<<<
 *                     "Could not find page with label '{key}'".format(key=key))
 *             return self.get_page(pgno)
 */
      __Pyx_TraceLine(134,0,__PYX_ERR(6, 134, __pyx_L1_error))
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(6, 134, __pyx_L1_error)

      /* "src/pyxpdf/document.pxi":133
 *         if isinstance(key, str):
 *             pgno = self.label_to_index(key)
 *             if pgno == -1:             # <<<<<<<<<<<<<<
 *                 raise KeyError(
 *                     "Could not find page with label '{key}'".format(key=key))
 */
    }

    /* "src/pyxpdf/document.pxi":136
 *                 raise KeyError(
 *                     "Could not find page with label '{key}'".format(key=key))
 *             return self.get_page(pgno)             # <<<<<<<<<<<<<<
 *         elif isinstance(key, int):
 *             # handle neg key
 */
    __Pyx_TraceLine(136,0,__PYX_ERR(6, 136, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->get_page(__pyx_v_self, __pyx_v_pgno); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/document.pxi":131
 * 
 *     def __getitem__(self, key):
 *         if isinstance(key, str):             # <<<<<<<<<<<<<<
 *             pgno = self.label_to_index(key)
 *             if pgno == -1:
 */
  }

  /* "src/pyxpdf/document.pxi":137
 *                     "Could not find page with label '{key}'".format(key=key))
 *             return self.get_page(pgno)
 *         elif isinstance(key, int):             # <<<<<<<<<<<<<<
 *             # handle neg key
 *             if key < 0:
 */
  __Pyx_TraceLine(137,0,__PYX_ERR(6, 137, __pyx_L1_error))
  __pyx_t_2 = PyInt_Check(__pyx_v_key); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":139
 *         elif isinstance(key, int):
 *             # handle neg key
 *             if key < 0:             # <<<<<<<<<<<<<<
 *                 key += self.num_pages
 *             return self.get_page(key)
 */
    __Pyx_TraceLine(139,0,__PYX_ERR(6, 139, __pyx_L1_error))
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_key, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 139, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 139, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "src/pyxpdf/document.pxi":140
 *             # handle neg key
 *             if key < 0:
 *                 key += self.num_pages             # <<<<<<<<<<<<<<
 *             return self.get_page(key)
 *         elif isinstance(key, slice):
 */
      __Pyx_TraceLine(140,0,__PYX_ERR(6, 140, __pyx_L1_error))
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_key, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "src/pyxpdf/document.pxi":139
 *         elif isinstance(key, int):
 *             # handle neg key
 *             if key < 0:             # <<<<<<<<<<<<<<
 *                 key += self.num_pages
 *             return self.get_page(key)
 */
    }

    /* "src/pyxpdf/document.pxi":141
 *             if key < 0:
 *                 key += self.num_pages
 *             return self.get_page(key)             # <<<<<<<<<<<<<<
 *         elif isinstance(key, slice):
 *             # Return the list of Pages
 */
    __Pyx_TraceLine(141,0,__PYX_ERR(6, 141, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_key); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 141, __pyx_L1_error)
    __pyx_t_5 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->get_page(__pyx_v_self, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/document.pxi":137
 *                     "Could not find page with label '{key}'".format(key=key))
 *             return self.get_page(pgno)
 *         elif isinstance(key, int):             # <<<<<<<<<<<<<<
 *             # handle neg key
 *             if key < 0:
 */
  }

  /* "src/pyxpdf/document.pxi":142
 *                 key += self.num_pages
 *             return self.get_page(key)
 *         elif isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             # Return the list of Pages
 *             return [self[i] for i in range(*key.indices(self.num_pages))]
 */
  __Pyx_TraceLine(142,0,__PYX_ERR(6, 142, __pyx_L1_error))
  __pyx_t_1 = PySlice_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "src/pyxpdf/document.pxi":144
 *         elif isinstance(key, slice):
 *             # Return the list of Pages
 *             return [self[i] for i in range(*key.indices(self.num_pages))]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Invalid Key type")
 */
    __Pyx_TraceLine(144,0,__PYX_ERR(6, 144, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 144, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 144, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 144, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_8, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 144, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 144, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 144, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 144, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(6, 144, __pyx_L8_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(6, 144, __pyx_L8_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 144, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(6, 144, __pyx_L8_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 144, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_10(__pyx_t_3);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(6, 144, __pyx_L8_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_i, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_7genexpr__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 144, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(6, 144, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
      goto __pyx_L11_exit_scope;
      __pyx_L8_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
      goto __pyx_L1_error;
      __pyx_L11_exit_scope:;
    } /* exit inner scope */
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/document.pxi":142
 *                 key += self.num_pages
 *             return self.get_page(key)
 *         elif isinstance(key, slice):             # <<<<<<<<<<<<<<
 *             # Return the list of Pages
 *             return [self[i] for i in range(*key.indices(self.num_pages))]
 */
  }

  /* "src/pyxpdf/document.pxi":146
 *             return [self[i] for i in range(*key.indices(self.num_pages))]
 *         else:
 *             raise TypeError("Invalid Key type")             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_TraceLine(146,0,__PYX_ERR(6, 146, __pyx_L1_error))
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(6, 146, __pyx_L1_error)
  }

  /* "src/pyxpdf/document.pxi":130
 *         return self.num_pages
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         if isinstance(key, str):
 *             pgno = self.label_to_index(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":148
 *             raise TypeError("Invalid Key type")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return DocumentPageIterator(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_15__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_15__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_14__iter__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_14__iter__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[6], 148, 0, __PYX_ERR(6, 148, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":149
 * 
 *     def __iter__(self):
 *         return DocumentPageIterator(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(149,0,__PYX_ERR(6, 149, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_DocumentPageIterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":148
 *             raise TypeError("Invalid Key type")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return DocumentPageIterator(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":152
 * 
 * 
 *     cdef Catalog *get_catalog(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getCatalog()
 * 
 */

static Catalog *__pyx_f_6pyxpdf_4xpdf_8Document_get_catalog(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  Catalog *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_catalog", 0);
  __Pyx_TraceCall("get_catalog", __pyx_f[6], 152, 0, __PYX_ERR(6, 152, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":153
 * 
 *     cdef Catalog *get_catalog(self):
 *         return self.doc.getCatalog()             # <<<<<<<<<<<<<<
 * 
 *     cdef display_pages(self, OutputDev* out, int first, int end,
 */
  __Pyx_TraceLine(153,0,__PYX_ERR(6, 153, __pyx_L1_error))
  __pyx_r = __pyx_v_self->doc->getCatalog();
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":152
 * 
 * 
 *     cdef Catalog *get_catalog(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getCatalog()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.Document.get_catalog", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":155
 *         return self.doc.getCatalog()
 * 
 *     cdef display_pages(self, OutputDev* out, int first, int end,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_display_pages(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, OutputDev *__pyx_v_out, int __pyx_v_first, int __pyx_v_end, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_display_pages *__pyx_optional_args) {
  double __pyx_v_hDPI = ((double)72.0);
  double __pyx_v_vDPI = ((double)72.0);
  int __pyx_v_rotate = ((int)0);
  GBool __pyx_v_use_media_box = __pyx_k__75;
  GBool __pyx_v_crop = __pyx_k__76;
  GBool __pyx_v_printing = __pyx_k__77;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("display_pages", 0);
  __Pyx_TraceCall("display_pages", __pyx_f[6], 155, 0, __PYX_ERR(6, 155, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hDPI = __pyx_optional_args->hDPI;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_vDPI = __pyx_optional_args->vDPI;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_rotate = __pyx_optional_args->rotate;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_use_media_box = __pyx_optional_args->use_media_box;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_crop = __pyx_optional_args->crop;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_printing = __pyx_optional_args->printing;
              }
            }
          }
        }
      }
    }
  }

  /* "src/pyxpdf/document.pxi":159
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 *                         GBool printing = gFalse):
 *         if first < 0 or first >= self.num_pages:             # <<<<<<<<<<<<<<
 *             first = 0
 *         if end < 0 or end >= self.num_pages:
 */
  __Pyx_TraceLine(159,0,__PYX_ERR(6, 159, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_first < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_first); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":160
 *                         GBool printing = gFalse):
 *         if first < 0 or first >= self.num_pages:
 *             first = 0             # <<<<<<<<<<<<<<
 *         if end < 0 or end >= self.num_pages:
 *             end = self.num_pages - 1
 */
    __Pyx_TraceLine(160,0,__PYX_ERR(6, 160, __pyx_L1_error))
    __pyx_v_first = 0;

    /* "src/pyxpdf/document.pxi":159
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 *                         GBool printing = gFalse):
 *         if first < 0 or first >= self.num_pages:             # <<<<<<<<<<<<<<
 *             first = 0
 *         if end < 0 or end >= self.num_pages:
 */
  }

  /* "src/pyxpdf/document.pxi":161
 *         if first < 0 or first >= self.num_pages:
 *             first = 0
 *         if end < 0 or end >= self.num_pages:             # <<<<<<<<<<<<<<
 *             end = self.num_pages - 1
 *         self.doc.displayPages(out, first + 1, end + 1, hDPI, vDPI, rotate,
 */
  __Pyx_TraceLine(161,0,__PYX_ERR(6, 161, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_end < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_end); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":162
 *             first = 0
 *         if end < 0 or end >= self.num_pages:
 *             end = self.num_pages - 1             # <<<<<<<<<<<<<<
 *         self.doc.displayPages(out, first + 1, end + 1, hDPI, vDPI, rotate,
 *                             use_media_box, crop, printing)
 */
    __Pyx_TraceLine(162,0,__PYX_ERR(6, 162, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_end = __pyx_t_6;

    /* "src/pyxpdf/document.pxi":161
 *         if first < 0 or first >= self.num_pages:
 *             first = 0
 *         if end < 0 or end >= self.num_pages:             # <<<<<<<<<<<<<<
 *             end = self.num_pages - 1
 *         self.doc.displayPages(out, first + 1, end + 1, hDPI, vDPI, rotate,
 */
  }

  /* "src/pyxpdf/document.pxi":163
 *         if end < 0 or end >= self.num_pages:
 *             end = self.num_pages - 1
 *         self.doc.displayPages(out, first + 1, end + 1, hDPI, vDPI, rotate,             # <<<<<<<<<<<<<<
 *                             use_media_box, crop, printing)
 * 
 */
  __Pyx_TraceLine(163,0,__PYX_ERR(6, 163, __pyx_L1_error))
  __pyx_v_self->doc->displayPages(__pyx_v_out, (__pyx_v_first + 1), (__pyx_v_end + 1), __pyx_v_hDPI, __pyx_v_vDPI, __pyx_v_rotate, __pyx_v_use_media_box, __pyx_v_crop, __pyx_v_printing, NULL);

  /* "src/pyxpdf/document.pxi":155
 *         return self.doc.getCatalog()
 * 
 *     cdef display_pages(self, OutputDev* out, int first, int end,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.display_pages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":166
 *                             use_media_box, crop, printing)
 * 
 *     cdef dict get_info_dict(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Object info
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_get_info_dict(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  Object __pyx_v_info;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_info_dict", 0);
  __Pyx_TraceCall("get_info_dict", __pyx_f[6], 166, 0, __PYX_ERR(6, 166, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":169
 *         cdef:
 *             Object info
 *             dict result = {}             # <<<<<<<<<<<<<<
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:
 *             Dict_to_pydict(info.getDict(), result)
 */
  __Pyx_TraceLine(169,0,__PYX_ERR(6, 169, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":170
 *             Object info
 *             dict result = {}
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:             # <<<<<<<<<<<<<<
 *             Dict_to_pydict(info.getDict(), result)
 *         info.free()
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(6, 170, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_self->doc->getDocInfo((&__pyx_v_info))->isDict() == gTrue) != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/document.pxi":171
 *             dict result = {}
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:
 *             Dict_to_pydict(info.getDict(), result)             # <<<<<<<<<<<<<<
 *         info.free()
 *         return result
 */
    __Pyx_TraceLine(171,0,__PYX_ERR(6, 171, __pyx_L1_error))
    __pyx_t_3.__pyx_n = 1;
    __pyx_t_3.pydict = __pyx_v_result;
    __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_Dict_to_pydict(__pyx_v_info.getDict(), &__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/pyxpdf/document.pxi":170
 *             Object info
 *             dict result = {}
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:             # <<<<<<<<<<<<<<
 *             Dict_to_pydict(info.getDict(), result)
 *         info.free()
 */
  }

  /* "src/pyxpdf/document.pxi":172
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:
 *             Dict_to_pydict(info.getDict(), result)
 *         info.free()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __Pyx_TraceLine(172,0,__PYX_ERR(6, 172, __pyx_L1_error))
  __pyx_v_info.free();

  /* "src/pyxpdf/document.pxi":173
 *             Dict_to_pydict(info.getDict(), result)
 *         info.free()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     cdef get_metadata(self):
 */
  __Pyx_TraceLine(173,0,__PYX_ERR(6, 173, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":166
 *                             use_media_box, crop, printing)
 * 
 *     cdef dict get_info_dict(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Object info
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.get_info_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":175
 *         return result
 * 
 *     cdef get_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_get_metadata(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  std::unique_ptr<GString>  __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_metadata", 0);
  __Pyx_TraceCall("get_metadata", __pyx_f[6], 175, 0, __PYX_ERR(6, 175, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":177
 *     cdef get_metadata(self):
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())             # <<<<<<<<<<<<<<
 *         if meta.get():
 *             return GString_to_unicode(meta.get())
 */
  __Pyx_TraceLine(177,0,__PYX_ERR(6, 177, __pyx_L1_error))
  __pyx_v_meta.reset(__pyx_v_self->doc->readMetadata());

  /* "src/pyxpdf/document.pxi":178
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 *         if meta.get():             # <<<<<<<<<<<<<<
 *             return GString_to_unicode(meta.get())
 *         return None
 */
  __Pyx_TraceLine(178,0,__PYX_ERR(6, 178, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_meta.get() != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":179
 *         meta.reset(self.doc.readMetadata())
 *         if meta.get():
 *             return GString_to_unicode(meta.get())             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_TraceLine(179,0,__PYX_ERR(6, 179, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_meta.get()); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/document.pxi":178
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 *         if meta.get():             # <<<<<<<<<<<<<<
 *             return GString_to_unicode(meta.get())
 *         return None
 */
  }

  /* "src/pyxpdf/document.pxi":180
 *         if meta.get():
 *             return GString_to_unicode(meta.get())
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef _load_from_file(self, GString *pdf):
 */
  __Pyx_TraceLine(180,0,__PYX_ERR(6, 180, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":175
 *         return result
 * 
 *     cdef get_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.get_metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":182
 *         return None
 * 
 *     cdef _load_from_file(self, GString *pdf):             # <<<<<<<<<<<<<<
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document__load_from_file(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, GString *__pyx_v_pdf) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_from_file", 0);
  __Pyx_TraceCall("_load_from_file", __pyx_f[6], 182, 0, __PYX_ERR(6, 182, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":183
 * 
 *     cdef _load_from_file(self, GString *pdf):
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)             # <<<<<<<<<<<<<<
 *         if self.doc == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")
 */
  __Pyx_TraceLine(183,0,__PYX_ERR(6, 183, __pyx_L1_error))
  __pyx_v_self->doc = new PDFDoc(__pyx_v_pdf, __pyx_v_self->ownerpass, __pyx_v_self->userpass);

  /* "src/pyxpdf/document.pxi":184
 *     cdef _load_from_file(self, GString *pdf):
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 */
  __Pyx_TraceLine(184,0,__PYX_ERR(6, 184, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_self->doc == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/document.pxi":185
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")             # <<<<<<<<<<<<<<
 * 
 *     cdef _load_from_char_array(self, char *pdf, int data_length):
 */
    __Pyx_TraceLine(185,0,__PYX_ERR(6, 185, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(6, 185, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":184
 *     cdef _load_from_file(self, GString *pdf):
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 */
  }

  /* "src/pyxpdf/document.pxi":182
 *         return None
 * 
 *     cdef _load_from_file(self, GString *pdf):             # <<<<<<<<<<<<<<
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document._load_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":187
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 *     cdef _load_from_char_array(self, char *pdf, int data_length):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Object *obj_null
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document__load_from_char_array(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, char *__pyx_v_pdf, int __pyx_v_data_length) {
  Object *__pyx_v_obj_null;
  MemStream *__pyx_v_mem_stream;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_from_char_array", 0);
  __Pyx_TraceCall("_load_from_char_array", __pyx_f[6], 187, 0, __PYX_ERR(6, 187, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":192
 *             MemStream *mem_stream
 * 
 *         obj_null = new Object()             # <<<<<<<<<<<<<<
 *         mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 * 
 */
  __Pyx_TraceLine(192,0,__PYX_ERR(6, 192, __pyx_L1_error))
  __pyx_v_obj_null = new Object();

  /* "src/pyxpdf/document.pxi":193
 * 
 *         obj_null = new Object()
 *         mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())             # <<<<<<<<<<<<<<
 * 
 *         if mem_stream == NULL:
 */
  __Pyx_TraceLine(193,0,__PYX_ERR(6, 193, __pyx_L1_error))
  __pyx_v_mem_stream = new MemStream(__pyx_v_pdf, 0, __pyx_v_data_length, __pyx_v_obj_null->initNull());

  /* "src/pyxpdf/document.pxi":195
 *         mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 * 
 *         if mem_stream == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for internal objects")
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 */
  __Pyx_TraceLine(195,0,__PYX_ERR(6, 195, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_mem_stream == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/document.pxi":196
 * 
 *         if mem_stream == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")             # <<<<<<<<<<<<<<
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 * 
 */
    __Pyx_TraceLine(196,0,__PYX_ERR(6, 196, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(6, 196, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":195
 *         mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 * 
 *         if mem_stream == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for internal objects")
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 */
  }

  /* "src/pyxpdf/document.pxi":197
 *         if mem_stream == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)             # <<<<<<<<<<<<<<
 * 
 *         del obj_null
 */
  __Pyx_TraceLine(197,0,__PYX_ERR(6, 197, __pyx_L1_error))
  __pyx_v_self->doc = new PDFDoc(__pyx_v_mem_stream, __pyx_v_self->ownerpass, __pyx_v_self->userpass);

  /* "src/pyxpdf/document.pxi":199
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 * 
 *         del obj_null             # <<<<<<<<<<<<<<
 * 
 *     cdef check(self):
 */
  __Pyx_TraceLine(199,0,__PYX_ERR(6, 199, __pyx_L1_error))
  delete __pyx_v_obj_null;

  /* "src/pyxpdf/document.pxi":187
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 *     cdef _load_from_char_array(self, char *pdf, int data_length):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Object *obj_null
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document._load_from_char_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":201
 *         del obj_null
 * 
 *     cdef check(self):             # <<<<<<<<<<<<<<
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_check(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  int __pyx_v_err_code;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check", 0);
  __Pyx_TraceCall("check", __pyx_f[6], 201, 0, __PYX_ERR(6, 201, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":202
 * 
 *     cdef check(self):
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:             # <<<<<<<<<<<<<<
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFPermissionError("PDF cannot be decrypted please provide correct passwords.")
 */
  __Pyx_TraceLine(202,0,__PYX_ERR(6, 202, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_self->doc->isOk() == gTrue) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->doc->getErrorCode() == errEncrypted) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":203
 *     cdef check(self):
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:             # <<<<<<<<<<<<<<
 *                 raise PDFPermissionError("PDF cannot be decrypted please provide correct passwords.")
 *         elif self.doc.getErrorCode() == errOpenFile:
 */
    __Pyx_TraceLine(203,0,__PYX_ERR(6, 203, __pyx_L1_error))
    __pyx_t_1 = ((__pyx_v_self->doc->getErrorCode() == errEncrypted) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "src/pyxpdf/document.pxi":204
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFPermissionError("PDF cannot be decrypted please provide correct passwords.")             # <<<<<<<<<<<<<<
 *         elif self.doc.getErrorCode() == errOpenFile:
 *             raise PDFIOError(f"Failed to load {self.filename}")
 */
      __Pyx_TraceLine(204,0,__PYX_ERR(6, 204, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError), __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(6, 204, __pyx_L1_error)

      /* "src/pyxpdf/document.pxi":203
 *     cdef check(self):
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:             # <<<<<<<<<<<<<<
 *                 raise PDFPermissionError("PDF cannot be decrypted please provide correct passwords.")
 *         elif self.doc.getErrorCode() == errOpenFile:
 */
    }

    /* "src/pyxpdf/document.pxi":202
 * 
 *     cdef check(self):
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:             # <<<<<<<<<<<<<<
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFPermissionError("PDF cannot be decrypted please provide correct passwords.")
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/document.pxi":205
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFPermissionError("PDF cannot be decrypted please provide correct passwords.")
 *         elif self.doc.getErrorCode() == errOpenFile:             # <<<<<<<<<<<<<<
 *             raise PDFIOError(f"Failed to load {self.filename}")
 *         else:
 */
  __Pyx_TraceLine(205,0,__PYX_ERR(6, 205, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_self->doc->getErrorCode() == errOpenFile) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/document.pxi":206
 *                 raise PDFPermissionError("PDF cannot be decrypted please provide correct passwords.")
 *         elif self.doc.getErrorCode() == errOpenFile:
 *             raise PDFIOError(f"Failed to load {self.filename}")             # <<<<<<<<<<<<<<
 *         else:
 *             err_code = self.doc.getErrorCode()
 */
    __Pyx_TraceLine(206,0,__PYX_ERR(6, 206, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filename); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Failed_to_load, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFIOError), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(6, 206, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":205
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFPermissionError("PDF cannot be decrypted please provide correct passwords.")
 *         elif self.doc.getErrorCode() == errOpenFile:             # <<<<<<<<<<<<<<
 *             raise PDFIOError(f"Failed to load {self.filename}")
 *         else:
 */
  }

  /* "src/pyxpdf/document.pxi":208
 *             raise PDFIOError(f"Failed to load {self.filename}")
 *         else:
 *             err_code = self.doc.getErrorCode()             # <<<<<<<<<<<<<<
 *             raise ErrorCodeMapping[err_code]
 * 
 */
  __Pyx_TraceLine(208,0,__PYX_ERR(6, 208, __pyx_L1_error))
  /*else*/ {
    __pyx_v_err_code = __pyx_v_self->doc->getErrorCode();

    /* "src/pyxpdf/document.pxi":209
 *         else:
 *             err_code = self.doc.getErrorCode()
 *             raise ErrorCodeMapping[err_code]             # <<<<<<<<<<<<<<
 * 
 *     cdef int label_to_index(self, label):
 */
    __Pyx_TraceLine(209,0,__PYX_ERR(6, 209, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ErrorCodeMapping); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_err_code, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(6, 209, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "src/pyxpdf/document.pxi":201
 *         del obj_null
 * 
 *     cdef check(self):             # <<<<<<<<<<<<<<
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":211
 *             raise ErrorCodeMapping[err_code]
 * 
 *     cdef int label_to_index(self, label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int pgno
 */

static int __pyx_f_6pyxpdf_4xpdf_8Document_label_to_index(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, PyObject *__pyx_v_label) {
  int __pyx_v_pgno;
  std::unique_ptr<TextString>  __pyx_v_tstr;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("label_to_index", 0);
  __Pyx_TraceCall("label_to_index", __pyx_f[6], 211, 0, __PYX_ERR(6, 211, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":216
 *             unique_ptr[TextString] tstr
 * 
 *         tstr.reset(to_TextString(label))             # <<<<<<<<<<<<<<
 *         pgno = self.get_catalog().getPageNumFromPageLabel(tstr.get())
 *         # xpdf page index start from 1 not 0
 */
  __Pyx_TraceLine(216,0,__PYX_ERR(6, 216, __pyx_L1_error))
  __pyx_v_tstr.reset(__pyx_f_6pyxpdf_4xpdf_to_TextString(__pyx_v_label));

  /* "src/pyxpdf/document.pxi":217
 * 
 *         tstr.reset(to_TextString(label))
 *         pgno = self.get_catalog().getPageNumFromPageLabel(tstr.get())             # <<<<<<<<<<<<<<
 *         # xpdf page index start from 1 not 0
 *         if pgno != -1:
 */
  __Pyx_TraceLine(217,0,__PYX_ERR(6, 217, __pyx_L1_error))
  __pyx_v_pgno = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->get_catalog(__pyx_v_self)->getPageNumFromPageLabel(__pyx_v_tstr.get());

  /* "src/pyxpdf/document.pxi":219
 *         pgno = self.get_catalog().getPageNumFromPageLabel(tstr.get())
 *         # xpdf page index start from 1 not 0
 *         if pgno != -1:             # <<<<<<<<<<<<<<
 *             pgno = pgno - 1
 *         return pgno
 */
  __Pyx_TraceLine(219,0,__PYX_ERR(6, 219, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_pgno != -1L) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":220
 *         # xpdf page index start from 1 not 0
 *         if pgno != -1:
 *             pgno = pgno - 1             # <<<<<<<<<<<<<<
 *         return pgno
 * 
 */
    __Pyx_TraceLine(220,0,__PYX_ERR(6, 220, __pyx_L1_error))
    __pyx_v_pgno = (__pyx_v_pgno - 1);

    /* "src/pyxpdf/document.pxi":219
 *         pgno = self.get_catalog().getPageNumFromPageLabel(tstr.get())
 *         # xpdf page index start from 1 not 0
 *         if pgno != -1:             # <<<<<<<<<<<<<<
 *             pgno = pgno - 1
 *         return pgno
 */
  }

  /* "src/pyxpdf/document.pxi":221
 *         if pgno != -1:
 *             pgno = pgno - 1
 *         return pgno             # <<<<<<<<<<<<<<
 * 
 *     cdef get_page(self, int idx):
 */
  __Pyx_TraceLine(221,0,__PYX_ERR(6, 221, __pyx_L1_error))
  __pyx_r = __pyx_v_pgno;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":211
 *             raise ErrorCodeMapping[err_code]
 * 
 *     cdef int label_to_index(self, label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int pgno
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.Document.label_to_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":223
 *         return pgno
 * 
 *     cdef get_page(self, int idx):             # <<<<<<<<<<<<<<
 *         if idx < 0 or idx >= self.num_pages:
 *             raise IndexError(
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_get_page(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, int __pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_page", 0);
  __Pyx_TraceCall("get_page", __pyx_f[6], 223, 0, __PYX_ERR(6, 223, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":224
 * 
 *     cdef get_page(self, int idx):
 *         if idx < 0 or idx >= self.num_pages:             # <<<<<<<<<<<<<<
 *             raise IndexError(
 *                 "The index {idx} is out of page range".format(idx=idx))
 */
  __Pyx_TraceLine(224,0,__PYX_ERR(6, 224, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_idx < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/document.pxi":226
 *         if idx < 0 or idx >= self.num_pages:
 *             raise IndexError(
 *                 "The index {idx} is out of page range".format(idx=idx))             # <<<<<<<<<<<<<<
 *         # load page in cache if not present
 *         if self._pages_cache[idx] == None:
 */
    __Pyx_TraceLine(226,0,__PYX_ERR(6, 226, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_The_index_idx_is_out_of_page_ran, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_idx, __pyx_t_3) < 0) __PYX_ERR(6, 226, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "src/pyxpdf/document.pxi":225
 *     cdef get_page(self, int idx):
 *         if idx < 0 or idx >= self.num_pages:
 *             raise IndexError(             # <<<<<<<<<<<<<<
 *                 "The index {idx} is out of page range".format(idx=idx))
 *         # load page in cache if not present
 */
    __Pyx_TraceLine(225,0,__PYX_ERR(6, 225, __pyx_L1_error))
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(6, 225, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":224
 * 
 *     cdef get_page(self, int idx):
 *         if idx < 0 or idx >= self.num_pages:             # <<<<<<<<<<<<<<
 *             raise IndexError(
 *                 "The index {idx} is out of page range".format(idx=idx))
 */
  }

  /* "src/pyxpdf/document.pxi":228
 *                 "The index {idx} is out of page range".format(idx=idx))
 *         # load page in cache if not present
 *         if self._pages_cache[idx] == None:             # <<<<<<<<<<<<<<
 *             self._pages_cache[idx] = Page(self, idx)
 *         return self._pages_cache[idx]
 */
  __Pyx_TraceLine(228,0,__PYX_ERR(6, 228, __pyx_L1_error))
  if (unlikely(__pyx_v_self->_pages_cache == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(6, 228, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_self->_pages_cache, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":229
 *         # load page in cache if not present
 *         if self._pages_cache[idx] == None:
 *             self._pages_cache[idx] = Page(self, idx)             # <<<<<<<<<<<<<<
 *         return self._pages_cache[idx]
 * 
 */
    __Pyx_TraceLine(229,0,__PYX_ERR(6, 229, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_Page), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_v_self->_pages_cache == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(6, 229, __pyx_L1_error)
    }
    if (unlikely(__Pyx_SetItemInt(__pyx_v_self->_pages_cache, __pyx_v_idx, __pyx_t_3, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) __PYX_ERR(6, 229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyxpdf/document.pxi":228
 *                 "The index {idx} is out of page range".format(idx=idx))
 *         # load page in cache if not present
 *         if self._pages_cache[idx] == None:             # <<<<<<<<<<<<<<
 *             self._pages_cache[idx] = Page(self, idx)
 *         return self._pages_cache[idx]
 */
  }

  /* "src/pyxpdf/document.pxi":230
 *         if self._pages_cache[idx] == None:
 *             self._pages_cache[idx] = Page(self, idx)
 *         return self._pages_cache[idx]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(230,0,__PYX_ERR(6, 230, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->_pages_cache == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(6, 230, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_self->_pages_cache, __pyx_v_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":223
 *         return pgno
 * 
 *     cdef get_page(self, int idx):             # <<<<<<<<<<<<<<
 *         if idx < 0 or idx >= self.num_pages:
 *             raise IndexError(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.get_page", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":235
 * 
 *     @property
 *     def filename(self):             # <<<<<<<<<<<<<<
 *         """str: name of the file from which pdf document was loaded.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_8filename_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_8filename_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_8filename___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_8filename___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 235, 0, __PYX_ERR(6, 235, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":241
 *         empty `str`.
 *         """
 *         return GString_to_unicode(self.doc.getFileName())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(241,0,__PYX_ERR(6, 241, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_self->doc->getFileName()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":235
 * 
 *     @property
 *     def filename(self):             # <<<<<<<<<<<<<<
 *         """str: name of the file from which pdf document was loaded.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.filename.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":244
 * 
 *     @property
 *     def has_page_labels(self):             # <<<<<<<<<<<<<<
 *         """bool: whether pdf has page labels or not
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_15has_page_labels_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_15has_page_labels_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_15has_page_labels___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_15has_page_labels___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 244, 0, __PYX_ERR(6, 244, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":247
 *         """bool: whether pdf has page labels or not
 *         """
 *         return GBool_to_bool(self.get_catalog().hasPageLabels())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(247,0,__PYX_ERR(6, 247, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->get_catalog(__pyx_v_self)->hasPageLabels()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":244
 * 
 *     @property
 *     def has_page_labels(self):             # <<<<<<<<<<<<<<
 *         """bool: whether pdf has page labels or not
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.has_page_labels.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":250
 * 
 *     @property
 *     def num_pages(self):             # <<<<<<<<<<<<<<
 *         """int: total pages in pdf
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_9num_pages_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_9num_pages_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_9num_pages___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_9num_pages___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 250, 0, __PYX_ERR(6, 250, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":253
 *         """int: total pages in pdf
 *         """
 *         return self.doc.getNumPages()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(253,0,__PYX_ERR(6, 253, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->doc->getNumPages()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":250
 * 
 *     @property
 *     def num_pages(self):             # <<<<<<<<<<<<<<
 *         """int: total pages in pdf
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.num_pages.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":256
 * 
 *     @property
 *     def pdf_version(self):             # <<<<<<<<<<<<<<
 *         """float: version of PDF standard pdf comply with
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_11pdf_version_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_11pdf_version_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_11pdf_version___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_11pdf_version___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 256, 0, __PYX_ERR(6, 256, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":259
 *         """float: version of PDF standard pdf comply with
 *         """
 *         return self.doc.getPDFVersion()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(259,0,__PYX_ERR(6, 259, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->doc->getPDFVersion()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":256
 * 
 *     @property
 *     def pdf_version(self):             # <<<<<<<<<<<<<<
 *         """float: version of PDF standard pdf comply with
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.pdf_version.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":262
 * 
 *     @property
 *     def is_linearized(self):             # <<<<<<<<<<<<<<
 *         """bool: whether pdf is lineralised or not
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_13is_linearized_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_13is_linearized_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_13is_linearized___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_13is_linearized___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 262, 0, __PYX_ERR(6, 262, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":265
 *         """bool: whether pdf is lineralised or not
 *         """
 *         return GBool_to_bool(self.doc.isLinearized())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(265,0,__PYX_ERR(6, 265, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->isLinearized()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":262
 * 
 *     @property
 *     def is_linearized(self):             # <<<<<<<<<<<<<<
 *         """bool: whether pdf is lineralised or not
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.is_linearized.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":268
 * 
 *     @property
 *     def is_encrypted(self):             # <<<<<<<<<<<<<<
 *         """bool: whether pdf is encrypted or not
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_12is_encrypted_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_12is_encrypted_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_12is_encrypted___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_12is_encrypted___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 268, 0, __PYX_ERR(6, 268, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":276
 *         PDF documents return :obj:`True`
 *         """
 *         return GBool_to_bool(self.doc.isEncrypted())             # <<<<<<<<<<<<<<
 * 
 *     # PDF Permissions
 */
  __Pyx_TraceLine(276,0,__PYX_ERR(6, 276, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->isEncrypted()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":268
 * 
 *     @property
 *     def is_encrypted(self):             # <<<<<<<<<<<<<<
 *         """bool: whether pdf is encrypted or not
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.is_encrypted.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":280
 *     # PDF Permissions
 *     @property
 *     def ok_to_print(self):             # <<<<<<<<<<<<<<
 *         """bool: PDF print permission.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_11ok_to_print_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_11ok_to_print_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_11ok_to_print___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_11ok_to_print___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 280, 0, __PYX_ERR(6, 280, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":285
 *         Whether document can be printed or not.
 *         """
 *         return GBool_to_bool(self.doc.okToPrint(ignoreOwnerPW=gFalse))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(285,0,__PYX_ERR(6, 285, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->okToPrint(gFalse)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":280
 *     # PDF Permissions
 *     @property
 *     def ok_to_print(self):             # <<<<<<<<<<<<<<
 *         """bool: PDF print permission.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.ok_to_print.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":288
 * 
 *     @property
 *     def ok_to_change(self):             # <<<<<<<<<<<<<<
 *         """bool: PDF change permission
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_12ok_to_change_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_12ok_to_change_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_12ok_to_change___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_12ok_to_change___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 288, 0, __PYX_ERR(6, 288, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":297
 * 
 *         """
 *         return GBool_to_bool(self.doc.okToChange(ignoreOwnerPW=gFalse))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(297,0,__PYX_ERR(6, 297, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->okToChange(gFalse)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":288
 * 
 *     @property
 *     def ok_to_change(self):             # <<<<<<<<<<<<<<
 *         """bool: PDF change permission
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.ok_to_change.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":300
 * 
 *     @property
 *     def ok_to_copy(self):             # <<<<<<<<<<<<<<
 *         """bool: PDF copy permission.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_10ok_to_copy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_10ok_to_copy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_10ok_to_copy___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_10ok_to_copy___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 300, 0, __PYX_ERR(6, 300, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":310
 *         from document.
 *         """
 *         return GBool_to_bool(self.doc.okToCopy(ignoreOwnerPW=gFalse))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(310,0,__PYX_ERR(6, 310, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->okToCopy(gFalse)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":300
 * 
 *     @property
 *     def ok_to_copy(self):             # <<<<<<<<<<<<<<
 *         """bool: PDF copy permission.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.ok_to_copy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":313
 * 
 *     @property
 *     def ok_to_add_notes(self):             # <<<<<<<<<<<<<<
 *         """bool: PDF add notes permission
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_15ok_to_add_notes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_15ok_to_add_notes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_15ok_to_add_notes___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_15ok_to_add_notes___get__(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 313, 0, __PYX_ERR(6, 313, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":316
 *         """bool: PDF add notes permission
 *         """
 *         return GBool_to_bool(self.doc.okToAddNotes(ignoreOwnerPW=gFalse))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(316,0,__PYX_ERR(6, 316, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->okToAddNotes(gFalse)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":313
 * 
 *     @property
 *     def ok_to_add_notes(self):             # <<<<<<<<<<<<<<
 *         """bool: PDF add notes permission
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.ok_to_add_notes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":319
 * 
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         """Get the PDF's info dictionary.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_17info(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8Document_16info[] = "Document.info(self)\nGet the PDF's info dictionary.\n\n        PDF info dictionary contains keys such as `Author`, `Creator`,\n        `ModDate`, etc.\n\n        Returns\n        -------\n        dict\n            PDf's information dictionary.\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8Document_17info = {"info", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8Document_17info, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8Document_16info};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_17info(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("info (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_16info(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_16info(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__80)
  __Pyx_RefNannySetupContext("info", 0);
  __Pyx_TraceCall("info", __pyx_f[6], 319, 0, __PYX_ERR(6, 319, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":330
 *             PDf's information dictionary.
 *         """
 *         return self.get_info_dict()             # <<<<<<<<<<<<<<
 * 
 *     def xmp_metadata(self):
 */
  __Pyx_TraceLine(330,0,__PYX_ERR(6, 330, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->get_info_dict(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":319
 * 
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         """Get the PDF's info dictionary.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":332
 *         return self.get_info_dict()
 * 
 *     def xmp_metadata(self):             # <<<<<<<<<<<<<<
 *         """Get the PDF's xmp metadata.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_19xmp_metadata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8Document_18xmp_metadata[] = "Document.xmp_metadata(self)\nGet the PDF's xmp metadata.\n\n        Returns\n        -------\n        str\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8Document_19xmp_metadata = {"xmp_metadata", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8Document_19xmp_metadata, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8Document_18xmp_metadata};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_19xmp_metadata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xmp_metadata (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_18xmp_metadata(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_18xmp_metadata(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__81)
  __Pyx_RefNannySetupContext("xmp_metadata", 0);
  __Pyx_TraceCall("xmp_metadata", __pyx_f[6], 332, 0, __PYX_ERR(6, 332, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":339
 *         str
 *         """
 *         return self.get_metadata()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(339,0,__PYX_ERR(6, 339, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->get_metadata(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":332
 *         return self.get_info_dict()
 * 
 *     def xmp_metadata(self):             # <<<<<<<<<<<<<<
 *         """Get the PDF's xmp metadata.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.xmp_metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":342
 * 
 * 
 *     cpdef text_bytes(self, int start=0, int end=-1, TextControl control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract text from given page range.
 * 
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_21text_bytes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_text_bytes(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text_bytes *__pyx_optional_args) {
  int __pyx_v_start = ((int)0);
  int __pyx_v_end = ((int)-1);
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control = ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)Py_None);
  TextOutputControl __pyx_v_text_control;
  std::unique_ptr<std::string>  __pyx_v_out;
  std::unique_ptr<TextOutputDev>  __pyx_v_text_dev;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  TextOutputControl __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__82)
  __Pyx_RefNannySetupContext("text_bytes", 0);
  __Pyx_TraceCall("text_bytes", __pyx_f[6], 342, 0, __PYX_ERR(6, 342, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_end = __pyx_optional_args->end;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_control = __pyx_optional_args->control;
        }
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_text_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyxpdf_4xpdf_8Document_21text_bytes)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_end); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 342, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_control)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 342, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_control)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 342, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 342, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __Pyx_INCREF(((PyObject *)__pyx_v_control));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_control));
          PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, ((PyObject *)__pyx_v_control));
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 342, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "src/pyxpdf/document.pxi":376
 * 
 *         cdef:
 *             TextOutputControl text_control = deref(control.get_c_control()) if control else TextOutputControl()             # <<<<<<<<<<<<<<
 *             unique_ptr[string] out = make_unique[string]()
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string,
 */
  __Pyx_TraceLine(376,0,__PYX_ERR(6, 376, __pyx_L1_error))
  __pyx_t_10 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_control)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(6, 376, __pyx_L1_error)
  if (__pyx_t_10) {
    __pyx_t_9 = (*((struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextControl *)__pyx_v_control->__pyx_vtab)->get_c_control(__pyx_v_control));
  } else {
    __pyx_t_9 = TextOutputControl();
  }
  __pyx_v_text_control = __pyx_t_9;

  /* "src/pyxpdf/document.pxi":377
 *         cdef:
 *             TextOutputControl text_control = deref(control.get_c_control()) if control else TextOutputControl()
 *             unique_ptr[string] out = make_unique[string]()             # <<<<<<<<<<<<<<
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string,
 *                                                                             out.get(), &text_control)
 */
  __Pyx_TraceLine(377,0,__PYX_ERR(6, 377, __pyx_L1_error))
  __pyx_v_out = std::make_unique<std::string>();

  /* "src/pyxpdf/document.pxi":378
 *             TextOutputControl text_control = deref(control.get_c_control()) if control else TextOutputControl()
 *             unique_ptr[string] out = make_unique[string]()
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string,             # <<<<<<<<<<<<<<
 *                                                                             out.get(), &text_control)
 * 
 */
  __Pyx_TraceLine(378,0,__PYX_ERR(6, 378, __pyx_L1_error))
  __pyx_v_text_dev = std::make_unique<TextOutputDev>((&__pyx_f_6pyxpdf_4xpdf_append_to_cpp_string), __pyx_v_out.get(), (&__pyx_v_text_control));

  /* "src/pyxpdf/document.pxi":381
 *                                                                             out.get(), &text_control)
 * 
 *         self.display_pages(text_dev.get(), start, end)             # <<<<<<<<<<<<<<
 *         return deref(out)
 * 
 */
  __Pyx_TraceLine(381,0,__PYX_ERR(6, 381, __pyx_L1_error))
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->display_pages(__pyx_v_self, __pyx_v_text_dev.get(), __pyx_v_start, __pyx_v_end, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":382
 * 
 *         self.display_pages(text_dev.get(), start, end)
 *         return deref(out)             # <<<<<<<<<<<<<<
 * 
 *     cpdef text(self, start=0, end=-1, control=None):
 */
  __Pyx_TraceLine(382,0,__PYX_ERR(6, 382, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_out)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":342
 * 
 * 
 *     cpdef text_bytes(self, int start=0, int end=-1, TextControl control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract text from given page range.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.text_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_21text_bytes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8Document_20text_bytes[] = "Document.text_bytes(self, int start=0, int end=-1, TextControl control=None)\nParse and extract text from given page range.\n\n        Extracted text can be adjusted using `control` parameter.\n        This method should be use when text encoding (:attr:`Config.text_encoding`)\n        is different than `UTF-8` or when you to control decoding of bytes\n        by yourself.\n\n        Parameters\n        ----------\n        start : int\n            index of first page to extract\n        end : int\n            index of last page to extract\n        control : :class:`~pyxpdf.xpdf.TextControl`\n            An :class:`~pyxpdf.xpdf.TextControl` object, use to control the format of\n            extacted text. (default is :obj:`None` which implies text\n            will be extracted using default values from `TextOutput` class)\n\n        Returns\n        -------\n        bytes\n            a :attr:`Config.text_encoding` encoded bytes object containing all\n            the extracted text.\n\n        See Also\n        --------\n        Page.text_bytes\n        TextOutput\n            PDF to Text output device with caching support.\n\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8Document_21text_bytes = {"text_bytes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_8Document_21text_bytes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_8Document_20text_bytes};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_21text_bytes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_start;
  int __pyx_v_end;
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_bytes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_end,&__pyx_n_s_control,0};
    PyObject* values[3] = {0,0,0};
    values[2] = (PyObject *)((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_control);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "text_bytes") < 0)) __PYX_ERR(6, 342, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_start = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 342, __pyx_L3_error)
    } else {
      __pyx_v_start = ((int)0);
    }
    if (values[1]) {
      __pyx_v_end = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_end == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 342, __pyx_L3_error)
    } else {
      __pyx_v_end = ((int)-1);
    }
    __pyx_v_control = ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("text_bytes", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 342, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.text_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_control), __pyx_ptype_6pyxpdf_4xpdf_TextControl, 1, "control", 0))) __PYX_ERR(6, 342, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_20text_bytes(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self), __pyx_v_start, __pyx_v_end, __pyx_v_control);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_20text_bytes(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, int __pyx_v_start, int __pyx_v_end, struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text_bytes __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__82)
  __Pyx_RefNannySetupContext("text_bytes", 0);
  __Pyx_TraceCall("text_bytes (wrapper)", __pyx_f[6], 342, 0, __PYX_ERR(6, 342, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.start = __pyx_v_start;
  __pyx_t_2.end = __pyx_v_end;
  __pyx_t_2.control = __pyx_v_control;
  __pyx_t_1 = __pyx_vtabptr_6pyxpdf_4xpdf_Document->text_bytes(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.text_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":384
 *         return deref(out)
 * 
 *     cpdef text(self, start=0, end=-1, control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract UTF-8 decoded text from given page range.
 * 
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_23text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_8Document_text(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text *__pyx_optional_args) {
  PyObject *__pyx_v_start = ((PyObject *)__pyx_int_0);
  PyObject *__pyx_v_end = ((PyObject *)__pyx_int_neg_1);
  PyObject *__pyx_v_control = ((PyObject *)Py_None);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text_bytes __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__83)
  __Pyx_RefNannySetupContext("text", 0);
  __Pyx_TraceCall("text", __pyx_f[6], 384, 0, __PYX_ERR(6, 384, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_end = __pyx_optional_args->end;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_control = __pyx_optional_args->control;
        }
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 384, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyxpdf_4xpdf_8Document_23text)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_start, __pyx_v_end, __pyx_v_control};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 384, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_start, __pyx_v_end, __pyx_v_control};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 384, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 384, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_start);
          __Pyx_GIVEREF(__pyx_v_start);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_start);
          __Pyx_INCREF(__pyx_v_end);
          __Pyx_GIVEREF(__pyx_v_end);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_end);
          __Pyx_INCREF(__pyx_v_control);
          __Pyx_GIVEREF(__pyx_v_control);
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_control);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 384, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "src/pyxpdf/document.pxi":420
 * 
 * 
 *         return self.text_bytes(start=start, end=end, control=control             # <<<<<<<<<<<<<<
 *                                   ).decode('UTF-8', errors='ignore')
 * 
 */
  __Pyx_TraceLine(420,0,__PYX_ERR(6, 420, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_start); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 420, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_end); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 420, __pyx_L1_error)
  if (!(likely(((__pyx_v_control) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_control, __pyx_ptype_6pyxpdf_4xpdf_TextControl))))) __PYX_ERR(6, 420, __pyx_L1_error)
  __pyx_t_8.__pyx_n = 3;
  __pyx_t_8.start = __pyx_t_5;
  __pyx_t_8.end = __pyx_t_7;
  __pyx_t_8.control = ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)__pyx_v_control);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->__pyx_vtab)->text_bytes(__pyx_v_self, 0, &__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyxpdf/document.pxi":421
 * 
 *         return self.text_bytes(start=start, end=end, control=control
 *                                   ).decode('UTF-8', errors='ignore')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(421,0,__PYX_ERR(6, 421, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_errors, __pyx_n_u_ignore) < 0) __PYX_ERR(6, 421, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__3, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":384
 *         return deref(out)
 * 
 *     cpdef text(self, start=0, end=-1, control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract UTF-8 decoded text from given page range.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_23text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8Document_22text[] = "Document.text(self, start=0, end=-1, control=None)\nParse and extract UTF-8 decoded text from given page range.\n\n        Extracted text can be adjusted using `control` parameter.\n\n        Parameters\n        ----------\n        start : int\n            index of first page to extract\n        end : int\n            index of last page to extract\n        control : :class:`~pyxpdf.xpdf.TextControl`, optional\n            An :class:`~pyxpdf.xpdf.TextControl` object, use to control the format of\n            extacted text. (default is :obj:`None` which implies text\n            will be extracted using default values from `TextControl` class)\n\n        Returns\n        -------\n        str\n            a 'UTF-8' decoded str object containing all the extracted text.\n\n        Note\n        -----\n        This method is almost similar to :meth:`text_bytes`, the only difference\n        is that it decodes the extracted bytes in `UTF-8` with '`ignore`'\n        (:func:`codecs.ignore_errors`) decoding error handler.\n\n        See Also\n        --------\n        Page.text\n        TextOutput\n            PDF to Text output device with caching support.\n\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8Document_23text = {"text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_8Document_23text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_8Document_22text};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_23text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_end = 0;
  PyObject *__pyx_v_control = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,&__pyx_n_s_end,&__pyx_n_s_control,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_neg_1);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_control);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "text") < 0)) __PYX_ERR(6, 384, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start = values[0];
    __pyx_v_end = values[1];
    __pyx_v_control = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("text", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 384, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_22text(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self), __pyx_v_start, __pyx_v_end, __pyx_v_control);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_22text(struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, PyObject *__pyx_v_start, PyObject *__pyx_v_end, PyObject *__pyx_v_control) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__83)
  __Pyx_RefNannySetupContext("text", 0);
  __Pyx_TraceCall("text (wrapper)", __pyx_f[6], 384, 0, __PYX_ERR(6, 384, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.start = __pyx_v_start;
  __pyx_t_2.end = __pyx_v_end;
  __pyx_t_2.control = __pyx_v_control;
  __pyx_t_1 = __pyx_vtabptr_6pyxpdf_4xpdf_Document->text(__pyx_v_self, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8Document_24__reduce_cython__[] = "Document.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8Document_25__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8Document_25__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8Document_24__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_24__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__84)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(7, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8Document_26__setstate_cython__[] = "Document.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8Document_27__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8Document_27__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_8Document_26__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8Document_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8Document_26__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8Document_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__86)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 3, 0, __PYX_ERR(7, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Document.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":430
 *         int index
 * 
 *     def __init__(self, doc):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 *         self.index = -1
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_doc = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_doc,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_doc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(6, 430, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_doc = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 430, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.DocumentPageIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator___init__(((struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)__pyx_v_self), __pyx_v_doc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator___init__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self, PyObject *__pyx_v_doc) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[6], 430, 0, __PYX_ERR(6, 430, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":431
 * 
 *     def __init__(self, doc):
 *         self.doc = doc             # <<<<<<<<<<<<<<
 *         self.index = -1
 * 
 */
  __Pyx_TraceLine(431,0,__PYX_ERR(6, 431, __pyx_L1_error))
  if (!(likely(((__pyx_v_doc) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_doc, __pyx_ptype_6pyxpdf_4xpdf_Document))))) __PYX_ERR(6, 431, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_doc;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->doc);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->doc));
  __pyx_v_self->doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":432
 *     def __init__(self, doc):
 *         self.doc = doc
 *         self.index = -1             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_TraceLine(432,0,__PYX_ERR(6, 432, __pyx_L1_error))
  __pyx_v_self->index = -1;

  /* "src/pyxpdf/document.pxi":430
 *         int index
 * 
 *     def __init__(self, doc):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 *         self.index = -1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.DocumentPageIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":434
 *         self.index = -1
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_2__iter__(((struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_2__iter__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[6], 434, 0, __PYX_ERR(6, 434, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":435
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_TraceLine(435,0,__PYX_ERR(6, 435, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":434
 *         self.index = -1
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.DocumentPageIterator.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":437
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.index += 1
 *         if self.index >= len(self.doc):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_4__next__(((struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_4__next__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);
  __Pyx_TraceCall("__next__", __pyx_f[6], 437, 0, __PYX_ERR(6, 437, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":438
 * 
 *     def __next__(self):
 *         self.index += 1             # <<<<<<<<<<<<<<
 *         if self.index >= len(self.doc):
 *             raise StopIteration()
 */
  __Pyx_TraceLine(438,0,__PYX_ERR(6, 438, __pyx_L1_error))
  __pyx_v_self->index = (__pyx_v_self->index + 1);

  /* "src/pyxpdf/document.pxi":439
 *     def __next__(self):
 *         self.index += 1
 *         if self.index >= len(self.doc):             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         return self.doc[self.index]
 */
  __Pyx_TraceLine(439,0,__PYX_ERR(6, 439, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_v_self->doc);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(6, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_v_self->index >= __pyx_t_2) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "src/pyxpdf/document.pxi":440
 *         self.index += 1
 *         if self.index >= len(self.doc):
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 *         return self.doc[self.index]
 * 
 */
    __Pyx_TraceLine(440,0,__PYX_ERR(6, 440, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_StopIteration); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(6, 440, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":439
 *     def __next__(self):
 *         self.index += 1
 *         if self.index >= len(self.doc):             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         return self.doc[self.index]
 */
  }

  /* "src/pyxpdf/document.pxi":441
 *         if self.index >= len(self.doc):
 *             raise StopIteration()
 *         return self.doc[self.index]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(441,0,__PYX_ERR(6, 441, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self->doc), __pyx_v_self->index, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":437
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.index += 1
 *         if self.index >= len(self.doc):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.DocumentPageIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_20DocumentPageIterator_6__reduce_cython__[] = "DocumentPageIterator.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_20DocumentPageIterator_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_7__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_20DocumentPageIterator_6__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_6__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_6__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__88)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.doc, self.index)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->doc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->doc));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->doc));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.doc, self.index)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.doc, self.index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.doc is not None
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.doc, self.index)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.doc is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_t_4 = (((PyObject *)__pyx_v_self->doc) != Py_None);
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.doc is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self.doc is not None
 *     if use_setstate:
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_DocumentPageItera); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_107937227);
    __Pyx_GIVEREF(__pyx_int_107937227);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_107937227);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.doc is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, None), state
 *     else:
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_DocumentPageIterator__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_DocumentPageItera); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_107937227);
    __Pyx_GIVEREF(__pyx_int_107937227);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_107937227);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.DocumentPageIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DocumentPageIterator__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_20DocumentPageIterator_8__setstate_cython__[] = "DocumentPageIterator.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_20DocumentPageIterator_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_9__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_20DocumentPageIterator_8__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_8__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_20DocumentPageIterator_8__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__89)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_DocumentPageIterator__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_DocumentPageIterator__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DocumentPageIterator__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.DocumentPageIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":502
 * 
 * 
 *     def __init__(self, doc, index):             # <<<<<<<<<<<<<<
 *         """
 *         """
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_4Page_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_4Page___init__[] = "\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6pyxpdf_4xpdf_4Page___init__;
#endif
static int __pyx_pw_6pyxpdf_4xpdf_4Page_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_doc = 0;
  CYTHON_UNUSED PyObject *__pyx_v_index = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_doc,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_doc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(6, 502, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(6, 502, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_doc = values[0];
    __pyx_v_index = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 502, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page___init__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self), __pyx_v_doc, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_4Page___init__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_doc, CYTHON_UNUSED PyObject *__pyx_v_index) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[6], 502, 0, __PYX_ERR(6, 502, __pyx_L1_error));

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":506
 *         """
 * 
 *     def __cinit__(self, Document doc not None, int index):             # <<<<<<<<<<<<<<
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_4Page_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_4Page_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc = 0;
  int __pyx_v_index;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_doc,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_doc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(6, 506, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(6, 506, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)values[0]);
    __pyx_v_index = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 506, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 506, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_doc), __pyx_ptype_6pyxpdf_4xpdf_Document, 0, "doc", 0))) __PYX_ERR(6, 506, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_2__cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self), __pyx_v_doc, __pyx_v_index);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_4Page_2__cinit__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_Document *__pyx_v_doc, int __pyx_v_index) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[6], 506, 0, __PYX_ERR(6, 506, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":507
 * 
 *     def __cinit__(self, Document doc not None, int index):
 *         if index < 0 or index >= doc.num_pages:             # <<<<<<<<<<<<<<
 *             raise IndexError("Page index must be positive integer less than total pages")
 *         self.page = doc.get_catalog().getPage(index + 1)
 */
  __Pyx_TraceLine(507,0,__PYX_ERR(6, 507, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_doc), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/document.pxi":508
 *     def __cinit__(self, Document doc not None, int index):
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")             # <<<<<<<<<<<<<<
 *         self.page = doc.get_catalog().getPage(index + 1)
 *         # self.textpage.reset()
 */
    __Pyx_TraceLine(508,0,__PYX_ERR(6, 508, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__90, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(6, 508, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":507
 * 
 *     def __cinit__(self, Document doc not None, int index):
 *         if index < 0 or index >= doc.num_pages:             # <<<<<<<<<<<<<<
 *             raise IndexError("Page index must be positive integer less than total pages")
 *         self.page = doc.get_catalog().getPage(index + 1)
 */
  }

  /* "src/pyxpdf/document.pxi":509
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")
 *         self.page = doc.get_catalog().getPage(index + 1)             # <<<<<<<<<<<<<<
 *         # self.textpage.reset()
 *         self.doc = doc
 */
  __Pyx_TraceLine(509,0,__PYX_ERR(6, 509, __pyx_L1_error))
  __pyx_v_self->page = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_doc->__pyx_vtab)->get_catalog(__pyx_v_doc)->getPage((__pyx_v_index + 1));

  /* "src/pyxpdf/document.pxi":511
 *         self.page = doc.get_catalog().getPage(index + 1)
 *         # self.textpage.reset()
 *         self.doc = doc             # <<<<<<<<<<<<<<
 *         self.index = index
 *         self.label = self.get_label()
 */
  __Pyx_TraceLine(511,0,__PYX_ERR(6, 511, __pyx_L1_error))
  __Pyx_INCREF(((PyObject *)__pyx_v_doc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_doc));
  __Pyx_GOTREF(__pyx_v_self->doc);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->doc));
  __pyx_v_self->doc = __pyx_v_doc;

  /* "src/pyxpdf/document.pxi":512
 *         # self.textpage.reset()
 *         self.doc = doc
 *         self.index = index             # <<<<<<<<<<<<<<
 *         self.label = self.get_label()
 * 
 */
  __Pyx_TraceLine(512,0,__PYX_ERR(6, 512, __pyx_L1_error))
  __pyx_v_self->index = __pyx_v_index;

  /* "src/pyxpdf/document.pxi":513
 *         self.doc = doc
 *         self.index = index
 *         self.label = self.get_label()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_TraceLine(513,0,__PYX_ERR(6, 513, __pyx_L1_error))
  __pyx_t_5 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_self->__pyx_vtab)->get_label(__pyx_v_self); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->label);
  __Pyx_DECREF(__pyx_v_self->label);
  __pyx_v_self->label = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "src/pyxpdf/document.pxi":506
 *         """
 * 
 *     def __cinit__(self, Document doc not None, int index):             # <<<<<<<<<<<<<<
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":515
 *         self.label = self.get_label()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.label == None:
 *             return "<Page[{index}]>".format(index=self.index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_4__repr__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_4__repr__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_TraceCall("__repr__", __pyx_f[6], 515, 0, __PYX_ERR(6, 515, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":516
 * 
 *     def __repr__(self):
 *         if self.label == None:             # <<<<<<<<<<<<<<
 *             return "<Page[{index}]>".format(index=self.index)
 *         else:
 */
  __Pyx_TraceLine(516,0,__PYX_ERR(6, 516, __pyx_L1_error))
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_self->label, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 516, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pyxpdf/document.pxi":517
 *     def __repr__(self):
 *         if self.label == None:
 *             return "<Page[{index}]>".format(index=self.index)             # <<<<<<<<<<<<<<
 *         else:
 *             return "<Page[{index}](label='{label}')>".format(index=self.index, label=self.label)
 */
    __Pyx_TraceLine(517,0,__PYX_ERR(6, 517, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Page_index, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_index, __pyx_t_4) < 0) __PYX_ERR(6, 517, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/document.pxi":516
 * 
 *     def __repr__(self):
 *         if self.label == None:             # <<<<<<<<<<<<<<
 *             return "<Page[{index}]>".format(index=self.index)
 *         else:
 */
  }

  /* "src/pyxpdf/document.pxi":519
 *             return "<Page[{index}]>".format(index=self.index)
 *         else:
 *             return "<Page[{index}](label='{label}')>".format(index=self.index, label=self.label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(519,0,__PYX_ERR(6, 519, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Page_index_label_label, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_index, __pyx_t_1) < 0) __PYX_ERR(6, 519, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_label, __pyx_v_self->label) < 0) __PYX_ERR(6, 519, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "src/pyxpdf/document.pxi":515
 *         self.label = self.get_label()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.label == None:
 *             return "<Page[{index}]>".format(index=self.index)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":522
 * 
 * 
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page_display_slice(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, OutputDev *__pyx_v_out, int __pyx_v_x1, int __pyx_v_y1, int __pyx_v_hgt, int __pyx_v_wdt, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display_slice *__pyx_optional_args) {
  double __pyx_v_hDPI = ((double)72.0);
  double __pyx_v_vDPI = ((double)72.0);
  int __pyx_v_rotate = ((int)0);
  GBool __pyx_v_use_media_box = __pyx_k__91;
  GBool __pyx_v_crop = __pyx_k__92;
  GBool __pyx_v_printing = __pyx_k__93;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("display_slice", 0);
  __Pyx_TraceCall("display_slice", __pyx_f[6], 522, 0, __PYX_ERR(6, 522, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hDPI = __pyx_optional_args->hDPI;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_vDPI = __pyx_optional_args->vDPI;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_rotate = __pyx_optional_args->rotate;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_use_media_box = __pyx_optional_args->use_media_box;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_crop = __pyx_optional_args->crop;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_printing = __pyx_optional_args->printing;
              }
            }
          }
        }
      }
    }
  }

  /* "src/pyxpdf/document.pxi":526
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 *                         GBool printing = gFalse):
 *         self.page.displaySlice(out, hDPI, vDPI, rotate, use_media_box, crop,             # <<<<<<<<<<<<<<
 *                                 x1, y1, hgt, wdt, printing)
 * 
 */
  __Pyx_TraceLine(526,0,__PYX_ERR(6, 526, __pyx_L1_error))
  __pyx_v_self->page->displaySlice(__pyx_v_out, __pyx_v_hDPI, __pyx_v_vDPI, __pyx_v_rotate, __pyx_v_use_media_box, __pyx_v_crop, __pyx_v_x1, __pyx_v_y1, __pyx_v_hgt, __pyx_v_wdt, __pyx_v_printing, NULL);

  /* "src/pyxpdf/document.pxi":522
 * 
 * 
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.display_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":529
 *                                 x1, y1, hgt, wdt, printing)
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,             # <<<<<<<<<<<<<<
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page_display(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, OutputDev *__pyx_v_out, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display *__pyx_optional_args) {
  double __pyx_v_hDPI = ((double)72.0);
  double __pyx_v_vDPI = ((double)72.0);
  int __pyx_v_rotate = ((int)0);
  GBool __pyx_v_use_media_box = __pyx_k__94;
  GBool __pyx_v_crop = __pyx_k__95;
  GBool __pyx_v_printing = __pyx_k__96;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display_slice __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("display", 0);
  __Pyx_TraceCall("display", __pyx_f[6], 529, 0, __PYX_ERR(6, 529, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hDPI = __pyx_optional_args->hDPI;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_vDPI = __pyx_optional_args->vDPI;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_rotate = __pyx_optional_args->rotate;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_use_media_box = __pyx_optional_args->use_media_box;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_crop = __pyx_optional_args->crop;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_printing = __pyx_optional_args->printing;
              }
            }
          }
        }
      }
    }
  }

  /* "src/pyxpdf/document.pxi":532
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 *         self.display_slice(out, -1, -1, -1, -1, hDPI, vDPI, rotate,             # <<<<<<<<<<<<<<
 *                             use_media_box, crop, printing)
 * 
 */
  __Pyx_TraceLine(532,0,__PYX_ERR(6, 532, __pyx_L1_error))
  __pyx_t_2.__pyx_n = 6;
  __pyx_t_2.hDPI = __pyx_v_hDPI;
  __pyx_t_2.vDPI = __pyx_v_vDPI;
  __pyx_t_2.rotate = __pyx_v_rotate;
  __pyx_t_2.use_media_box = __pyx_v_use_media_box;
  __pyx_t_2.crop = __pyx_v_crop;
  __pyx_t_2.printing = __pyx_v_printing;
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_self->__pyx_vtab)->display_slice(__pyx_v_self, __pyx_v_out, -1, -1, -1, -1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":529
 *                                 x1, y1, hgt, wdt, printing)
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,             # <<<<<<<<<<<<<<
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.display", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":535
 *                             use_media_box, crop, printing)
 * 
 *     cdef _init_TextPage(self, int rotation):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[TextOutputControl] text_control
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page__init_TextPage(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, int __pyx_v_rotation) {
  std::unique_ptr<TextOutputControl>  __pyx_v_text_control;
  std::unique_ptr<TextOutputDev>  __pyx_v_td;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_TextPage", 0);
  __Pyx_TraceCall("_init_TextPage", __pyx_f[6], 535, 0, __PYX_ERR(6, 535, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":540
 *             unique_ptr[TextOutputDev] td
 * 
 *         text_control = make_unique[TextOutputControl]()             # <<<<<<<<<<<<<<
 *         td = make_unique[TextOutputDev](<char*>NULL, text_control.get(), gFalse)
 * 
 */
  __Pyx_TraceLine(540,0,__PYX_ERR(6, 540, __pyx_L1_error))
  __pyx_v_text_control = std::make_unique<TextOutputControl>();

  /* "src/pyxpdf/document.pxi":541
 * 
 *         text_control = make_unique[TextOutputControl]()
 *         td = make_unique[TextOutputDev](<char*>NULL, text_control.get(), gFalse)             # <<<<<<<<<<<<<<
 * 
 *         self.display(td.get(), 72, 72, rotation)
 */
  __Pyx_TraceLine(541,0,__PYX_ERR(6, 541, __pyx_L1_error))
  __pyx_v_td = std::make_unique<TextOutputDev>(((char *)NULL), __pyx_v_text_control.get(), gFalse);

  /* "src/pyxpdf/document.pxi":543
 *         td = make_unique[TextOutputDev](<char*>NULL, text_control.get(), gFalse)
 * 
 *         self.display(td.get(), 72, 72, rotation)             # <<<<<<<<<<<<<<
 *         self.textpage.reset(deref(td).takeText())
 * 
 */
  __Pyx_TraceLine(543,0,__PYX_ERR(6, 543, __pyx_L1_error))
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.hDPI = 72.0;
  __pyx_t_2.vDPI = 72.0;
  __pyx_t_2.rotate = __pyx_v_rotation;
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_self->__pyx_vtab)->display(__pyx_v_self, __pyx_v_td.get(), &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":544
 * 
 *         self.display(td.get(), 72, 72, rotation)
 *         self.textpage.reset(deref(td).takeText())             # <<<<<<<<<<<<<<
 * 
 *     cdef get_label(self):
 */
  __Pyx_TraceLine(544,0,__PYX_ERR(6, 544, __pyx_L1_error))
  __pyx_v_self->textpage.reset((*__pyx_v_td).takeText());

  /* "src/pyxpdf/document.pxi":535
 *                             use_media_box, crop, printing)
 * 
 *     cdef _init_TextPage(self, int rotation):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[TextOutputControl] text_control
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page._init_TextPage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":546
 *         self.textpage.reset(deref(td).takeText())
 * 
 *     cdef get_label(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[GString] glabel
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page_get_label(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  std::unique_ptr<GString>  __pyx_v_glabel;
  std::unique_ptr<TextString>  __pyx_v_txt_label;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_label", 0);
  __Pyx_TraceCall("get_label", __pyx_f[6], 546, 0, __PYX_ERR(6, 546, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":551
 *             unique_ptr[TextString] txt_label
 * 
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:             # <<<<<<<<<<<<<<
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:
 */
  __Pyx_TraceLine(551,0,__PYX_ERR(6, 551, __pyx_L1_error))
  __pyx_t_1 = ((((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->doc->__pyx_vtab)->get_catalog(__pyx_v_self->doc)->hasPageLabels() == gTrue) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":552
 * 
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))             # <<<<<<<<<<<<<<
 *             if txt_label != NULL:
 *                 glabel.reset(deref(txt_label).toPDFTextString())
 */
    __Pyx_TraceLine(552,0,__PYX_ERR(6, 552, __pyx_L1_error))
    __pyx_v_txt_label.reset(((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document *)__pyx_v_self->doc->__pyx_vtab)->get_catalog(__pyx_v_self->doc)->getPageLabel((__pyx_v_self->index + 1)));

    /* "src/pyxpdf/document.pxi":553
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:             # <<<<<<<<<<<<<<
 *                 glabel.reset(deref(txt_label).toPDFTextString())
 *                 return GString_to_unicode(glabel.get())
 */
    __Pyx_TraceLine(553,0,__PYX_ERR(6, 553, __pyx_L1_error))
    __pyx_t_1 = ((__pyx_v_txt_label != NULL) != 0);
    if (__pyx_t_1) {

      /* "src/pyxpdf/document.pxi":554
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:
 *                 glabel.reset(deref(txt_label).toPDFTextString())             # <<<<<<<<<<<<<<
 *                 return GString_to_unicode(glabel.get())
 *             else:
 */
      __Pyx_TraceLine(554,0,__PYX_ERR(6, 554, __pyx_L1_error))
      __pyx_v_glabel.reset((*__pyx_v_txt_label).toPDFTextString());

      /* "src/pyxpdf/document.pxi":555
 *             if txt_label != NULL:
 *                 glabel.reset(deref(txt_label).toPDFTextString())
 *                 return GString_to_unicode(glabel.get())             # <<<<<<<<<<<<<<
 *             else:
 *                 return None
 */
      __Pyx_TraceLine(555,0,__PYX_ERR(6, 555, __pyx_L1_error))
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_glabel.get()); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "src/pyxpdf/document.pxi":553
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:             # <<<<<<<<<<<<<<
 *                 glabel.reset(deref(txt_label).toPDFTextString())
 *                 return GString_to_unicode(glabel.get())
 */
    }

    /* "src/pyxpdf/document.pxi":557
 *                 return GString_to_unicode(glabel.get())
 *             else:
 *                 return None             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_TraceLine(557,0,__PYX_ERR(6, 557, __pyx_L1_error))
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;
    }

    /* "src/pyxpdf/document.pxi":551
 *             unique_ptr[TextString] txt_label
 * 
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:             # <<<<<<<<<<<<<<
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:
 */
  }

  /* "src/pyxpdf/document.pxi":558
 *             else:
 *                 return None
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef _find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,
 */
  __Pyx_TraceLine(558,0,__PYX_ERR(6, 558, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":546
 *         self.textpage.reset(deref(td).takeText())
 * 
 *     cdef get_label(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[GString] glabel
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.get_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":560
 *         return None
 * 
 *     cdef _find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,             # <<<<<<<<<<<<<<
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_4Page__find_text(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_text, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page__find_text *__pyx_optional_args) {
  PyObject *__pyx_v_search_box = ((PyObject *)Py_None);
  PyObject *__pyx_v_start_at_top = ((PyObject *)Py_True);
  PyObject *__pyx_v_stop_at_bottom = ((PyObject *)Py_True);
  PyObject *__pyx_v_start_at_last = ((PyObject *)Py_False);

  /* "src/pyxpdf/document.pxi":561
 * 
 *     cdef _find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):             # <<<<<<<<<<<<<<
 *         cdef double x_min = 0
 *         cdef double y_min = 0
 */
  PyObject *__pyx_v_stop_at_last = ((PyObject *)Py_False);
  PyObject *__pyx_v_case_sensitive = ((PyObject *)Py_False);
  PyObject *__pyx_v_backward = ((PyObject *)Py_False);
  PyObject *__pyx_v_wholeword = ((PyObject *)Py_False);
  PyObject *__pyx_v_rotation = ((PyObject *)__pyx_int_0);
  double __pyx_v_x_min;
  double __pyx_v_y_min;
  double __pyx_v_x_max;
  double __pyx_v_y_max;
  std::vector<Unicode>  __pyx_v_u;
  GBool __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_find_text", 0);
  __Pyx_TraceCall("_find_text", __pyx_f[6], 560, 0, __PYX_ERR(6, 560, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_search_box = __pyx_optional_args->search_box;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_start_at_top = __pyx_optional_args->start_at_top;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_stop_at_bottom = __pyx_optional_args->stop_at_bottom;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_start_at_last = __pyx_optional_args->start_at_last;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_stop_at_last = __pyx_optional_args->stop_at_last;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_case_sensitive = __pyx_optional_args->case_sensitive;
                if (__pyx_optional_args->__pyx_n > 6) {
                  __pyx_v_backward = __pyx_optional_args->backward;
                  if (__pyx_optional_args->__pyx_n > 7) {
                    __pyx_v_wholeword = __pyx_optional_args->wholeword;
                    if (__pyx_optional_args->__pyx_n > 8) {
                      __pyx_v_rotation = __pyx_optional_args->rotation;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  /* "src/pyxpdf/document.pxi":562
 *     cdef _find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0             # <<<<<<<<<<<<<<
 *         cdef double y_min = 0
 *         cdef double x_max = 0
 */
  __Pyx_TraceLine(562,0,__PYX_ERR(6, 562, __pyx_L1_error))
  __pyx_v_x_min = 0.0;

  /* "src/pyxpdf/document.pxi":563
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 *         cdef double y_min = 0             # <<<<<<<<<<<<<<
 *         cdef double x_max = 0
 *         cdef double y_max = 0
 */
  __Pyx_TraceLine(563,0,__PYX_ERR(6, 563, __pyx_L1_error))
  __pyx_v_y_min = 0.0;

  /* "src/pyxpdf/document.pxi":564
 *         cdef double x_min = 0
 *         cdef double y_min = 0
 *         cdef double x_max = 0             # <<<<<<<<<<<<<<
 *         cdef double y_max = 0
 *         if search_box:
 */
  __Pyx_TraceLine(564,0,__PYX_ERR(6, 564, __pyx_L1_error))
  __pyx_v_x_max = 0.0;

  /* "src/pyxpdf/document.pxi":565
 *         cdef double y_min = 0
 *         cdef double x_max = 0
 *         cdef double y_max = 0             # <<<<<<<<<<<<<<
 *         if search_box:
 *             x_min = search_box[0] or 0
 */
  __Pyx_TraceLine(565,0,__PYX_ERR(6, 565, __pyx_L1_error))
  __pyx_v_y_max = 0.0;

  /* "src/pyxpdf/document.pxi":566
 *         cdef double x_max = 0
 *         cdef double y_max = 0
 *         if search_box:             # <<<<<<<<<<<<<<
 *             x_min = search_box[0] or 0
 *             y_min = search_box[1] or 0
 */
  __Pyx_TraceLine(566,0,__PYX_ERR(6, 566, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_search_box); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 566, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":567
 *         cdef double y_max = 0
 *         if search_box:
 *             x_min = search_box[0] or 0             # <<<<<<<<<<<<<<
 *             y_min = search_box[1] or 0
 *             x_max = search_box[2] or 0
 */
    __Pyx_TraceLine(567,0,__PYX_ERR(6, 567, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 567, __pyx_L1_error)
    if (!__pyx_t_1) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 567, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = 0;
    __pyx_L4_bool_binop_done:;
    __pyx_v_x_min = __pyx_t_2;

    /* "src/pyxpdf/document.pxi":568
 *         if search_box:
 *             x_min = search_box[0] or 0
 *             y_min = search_box[1] or 0             # <<<<<<<<<<<<<<
 *             x_max = search_box[2] or 0
 *             y_max = search_box[3] or 0
 */
    __Pyx_TraceLine(568,0,__PYX_ERR(6, 568, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 568, __pyx_L1_error)
    if (!__pyx_t_1) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 568, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = 0;
    __pyx_L6_bool_binop_done:;
    __pyx_v_y_min = __pyx_t_2;

    /* "src/pyxpdf/document.pxi":569
 *             x_min = search_box[0] or 0
 *             y_min = search_box[1] or 0
 *             x_max = search_box[2] or 0             # <<<<<<<<<<<<<<
 *             y_max = search_box[3] or 0
 * 
 */
    __Pyx_TraceLine(569,0,__PYX_ERR(6, 569, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 569, __pyx_L1_error)
    if (!__pyx_t_1) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 569, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = 0;
    __pyx_L8_bool_binop_done:;
    __pyx_v_x_max = __pyx_t_2;

    /* "src/pyxpdf/document.pxi":570
 *             y_min = search_box[1] or 0
 *             x_max = search_box[2] or 0
 *             y_max = search_box[3] or 0             # <<<<<<<<<<<<<<
 * 
 *         # Convert python str to xpdf Unicode
 */
    __Pyx_TraceLine(570,0,__PYX_ERR(6, 570, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 570, __pyx_L1_error)
    if (!__pyx_t_1) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 570, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_2 = 0;
    __pyx_L10_bool_binop_done:;
    __pyx_v_y_max = __pyx_t_2;

    /* "src/pyxpdf/document.pxi":566
 *         cdef double x_max = 0
 *         cdef double y_max = 0
 *         if search_box:             # <<<<<<<<<<<<<<
 *             x_min = search_box[0] or 0
 *             y_min = search_box[1] or 0
 */
  }

  /* "src/pyxpdf/document.pxi":574
 *         # Convert python str to xpdf Unicode
 *         cdef vector[Unicode] u
 *         utf32_to_Unicode_vector(text, u)             # <<<<<<<<<<<<<<
 * 
 *         # Lazy load TextPage
 */
  __Pyx_TraceLine(574,0,__PYX_ERR(6, 574, __pyx_L1_error))
  __pyx_t_5 = __pyx_f_6pyxpdf_4xpdf_utf32_to_Unicode_vector(__pyx_v_text, __pyx_v_u); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(6, 574, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":577
 * 
 *         # Lazy load TextPage
 *         if self.textpage.get() == NULL:             # <<<<<<<<<<<<<<
 *             self._init_TextPage(rotation)
 * 
 */
  __Pyx_TraceLine(577,0,__PYX_ERR(6, 577, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_self->textpage.get() == NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":578
 *         # Lazy load TextPage
 *         if self.textpage.get() == NULL:
 *             self._init_TextPage(rotation)             # <<<<<<<<<<<<<<
 * 
 *         cdef GBool res = deref(self.textpage).findText(u.data(), u.size(), to_GBool(start_at_top),
 */
    __Pyx_TraceLine(578,0,__PYX_ERR(6, 578, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_rotation); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 578, __pyx_L1_error)
    __pyx_t_3 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_self->__pyx_vtab)->_init_TextPage(__pyx_v_self, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyxpdf/document.pxi":577
 * 
 *         # Lazy load TextPage
 *         if self.textpage.get() == NULL:             # <<<<<<<<<<<<<<
 *             self._init_TextPage(rotation)
 * 
 */
  }

  /* "src/pyxpdf/document.pxi":580
 *             self._init_TextPage(rotation)
 * 
 *         cdef GBool res = deref(self.textpage).findText(u.data(), u.size(), to_GBool(start_at_top),             # <<<<<<<<<<<<<<
 *                                         to_GBool(stop_at_bottom), to_GBool(start_at_last),
 *                                         to_GBool(stop_at_last), to_GBool(case_sensitive),
 */
  __Pyx_TraceLine(580,0,__PYX_ERR(6, 580, __pyx_L1_error))
  __pyx_v_res = (*__pyx_v_self->textpage).findText(__pyx_v_u.data(), __pyx_v_u.size(), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_start_at_top), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_stop_at_bottom), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_start_at_last), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_stop_at_last), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_case_sensitive), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_backward), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_wholeword), (&__pyx_v_x_min), (&__pyx_v_y_min), (&__pyx_v_x_max), (&__pyx_v_y_max));

  /* "src/pyxpdf/document.pxi":586
 *                                         &x_min, &y_min, &x_max, &y_max)
 * 
 *         return (x_min, y_min, x_max, y_max) if res == gTrue else None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(586,0,__PYX_ERR(6, 586, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (((__pyx_v_res == gTrue) != 0)) {
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_x_min); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_y_min); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_x_max); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_y_max); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyTuple_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(6, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_3 = __pyx_t_10;
    __pyx_t_10 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_3 = Py_None;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":560
 *         return None
 * 
 *     cdef _find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,             # <<<<<<<<<<<<<<
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page._find_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":591
 * 
 *     @property
 *     def rotation(self):             # <<<<<<<<<<<<<<
 *         """int: page rotation in degrees
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_8rotation_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_8rotation_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_8rotation___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_8rotation___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 591, 0, __PYX_ERR(6, 591, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":594
 *         """int: page rotation in degrees
 *         """
 *         return self.page.getRotate()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(594,0,__PYX_ERR(6, 594, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->page->getRotate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":591
 * 
 *     @property
 *     def rotation(self):             # <<<<<<<<<<<<<<
 *         """int: page rotation in degrees
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.rotation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":597
 * 
 *     @property
 *     def is_cropped(self):             # <<<<<<<<<<<<<<
 *         """bool: whether page is cropped or not
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_10is_cropped_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_10is_cropped_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_10is_cropped___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_10is_cropped___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 597, 0, __PYX_ERR(6, 597, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":600
 *         """bool: whether page is cropped or not
 *         """
 *         return GBool_to_bool(self.page.isCropped())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(600,0,__PYX_ERR(6, 600, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->page->isCropped()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":597
 * 
 *     @property
 *     def is_cropped(self):             # <<<<<<<<<<<<<<
 *         """bool: whether page is cropped or not
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.is_cropped.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":603
 * 
 *     @property
 *     def media_height(self):             # <<<<<<<<<<<<<<
 *         """float: page mediabox height
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_12media_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_12media_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_12media_height___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_12media_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 603, 0, __PYX_ERR(6, 603, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":606
 *         """float: page mediabox height
 *         """
 *         return self.page.getMediaHeight()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(606,0,__PYX_ERR(6, 606, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->page->getMediaHeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":603
 * 
 *     @property
 *     def media_height(self):             # <<<<<<<<<<<<<<
 *         """float: page mediabox height
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.media_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":609
 * 
 *     @property
 *     def media_width(self):             # <<<<<<<<<<<<<<
 *         """float: page mediabox width
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_11media_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_11media_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_11media_width___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_11media_width___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 609, 0, __PYX_ERR(6, 609, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":612
 *         """float: page mediabox width
 *         """
 *         return self.page.getMediaWidth()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(612,0,__PYX_ERR(6, 612, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->page->getMediaWidth()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":609
 * 
 *     @property
 *     def media_width(self):             # <<<<<<<<<<<<<<
 *         """float: page mediabox width
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.media_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":615
 * 
 *     @property
 *     def crop_height(self):             # <<<<<<<<<<<<<<
 *         """float: page cropbox width
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_11crop_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_11crop_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_11crop_height___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_11crop_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 615, 0, __PYX_ERR(6, 615, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":618
 *         """float: page cropbox width
 *         """
 *         return self.page.getCropHeight()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(618,0,__PYX_ERR(6, 618, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->page->getCropHeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":615
 * 
 *     @property
 *     def crop_height(self):             # <<<<<<<<<<<<<<
 *         """float: page cropbox width
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.crop_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":621
 * 
 *     @property
 *     def crop_width(self):             # <<<<<<<<<<<<<<
 *         """float: page cropbox width
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_10crop_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_10crop_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_10crop_width___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_10crop_width___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 621, 0, __PYX_ERR(6, 621, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":624
 *         """float: page cropbox width
 *         """
 *         return self.page.getCropWidth()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(624,0,__PYX_ERR(6, 624, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->page->getCropWidth()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":621
 * 
 *     @property
 *     def crop_width(self):             # <<<<<<<<<<<<<<
 *         """float: page cropbox width
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.crop_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":627
 * 
 *     @property
 *     def mediabox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's media box cordinates
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_8mediabox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_8mediabox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_8mediabox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_8mediabox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 627, 0, __PYX_ERR(6, 627, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":630
 *         """tuple of float, (x1, y1, x2, y2): Page's media box cordinates
 *         """
 *         return PDFRectangle_to_tuple(self.page.getMediaBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(630,0,__PYX_ERR(6, 630, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getMediaBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":627
 * 
 *     @property
 *     def mediabox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's media box cordinates
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.mediabox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":633
 * 
 *     @property
 *     def cropbox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's crop box cordinates
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_7cropbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_7cropbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_7cropbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_7cropbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 633, 0, __PYX_ERR(6, 633, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":636
 *         """tuple of float, (x1, y1, x2, y2): Page's crop box cordinates
 *         """
 *         return PDFRectangle_to_tuple(self.page.getCropBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(636,0,__PYX_ERR(6, 636, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getCropBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":633
 * 
 *     @property
 *     def cropbox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's crop box cordinates
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.cropbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":639
 * 
 *     @property
 *     def bleedbox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's bleed box cordinates
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_8bleedbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_8bleedbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_8bleedbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_8bleedbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 639, 0, __PYX_ERR(6, 639, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":642
 *         """tuple of float, (x1, y1, x2, y2): Page's bleed box cordinates
 *         """
 *         return PDFRectangle_to_tuple(self.page.getBleedBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(642,0,__PYX_ERR(6, 642, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getBleedBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":639
 * 
 *     @property
 *     def bleedbox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's bleed box cordinates
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.bleedbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":645
 * 
 *     @property
 *     def trimbox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's trim box cordinates
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_7trimbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_7trimbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_7trimbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_7trimbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 645, 0, __PYX_ERR(6, 645, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":648
 *         """tuple of float, (x1, y1, x2, y2): Page's trim box cordinates
 *         """
 *         return PDFRectangle_to_tuple(self.page.getTrimBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(648,0,__PYX_ERR(6, 648, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getTrimBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":645
 * 
 *     @property
 *     def trimbox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's trim box cordinates
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.trimbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":651
 * 
 *     @property
 *     def artbox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's art box cordinates
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_6artbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_6artbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_6artbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_6artbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 651, 0, __PYX_ERR(6, 651, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":654
 *         """tuple of float, (x1, y1, x2, y2): Page's art box cordinates
 *         """
 *         return PDFRectangle_to_tuple(self.page.getArtBox())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(654,0,__PYX_ERR(6, 654, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getArtBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":651
 * 
 *     @property
 *     def artbox(self):             # <<<<<<<<<<<<<<
 *         """tuple of float, (x1, y1, x2, y2): Page's art box cordinates
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.artbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":657
 * 
 * 
 *     def find_text(self, text, search_box=None, direction="top", case_sensitive=False,             # <<<<<<<<<<<<<<
 *                   wholeword=False, rotation=0):
 *         """Find the text in Page.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_7find_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_4Page_6find_text[] = "Page.find_text(self, text, search_box=None, direction=u'top', case_sensitive=False, wholeword=False, rotation=0)\nFind the text in Page.\n\n        Search for the `text` in given `search_box` (:term:`BBox`)\n        of page. If `wholeword` then try to match as a whole word.\n\n        if `direction` is 'top' then, start the search from top of page\n\n        if `direction` is 'next' then, get the next match from the page\n\n        if `direction` is 'previous' then, get the previous match from the page\n\n        Parameters\n        ----------\n        text : str\n            Text to search in page\n        search_box : tuple of float, optional\n            tuple of cordinates of :term:`BBox` to set the search area.\n            (default is :obj:`None`, means the whole page area)\n        direction : {'top', 'next', 'previous'}\n            style of search\n        case_sensitive : bool, optional\n            If :obj:`False`, match the `text` regardless of its case in page\n            (default is :obj:`True`)\n        wholeword : bool, optional\n            match the `text` as a whole word only.\n            (default is :obj:`True`)\n        rotation : int, optional\n            rotation of page\n            (default is `0`)\n\n        Returns\n        -------\n        tuple of float, None\n            If match is found then tuple of cordinates(x1, y1, x2, y2) of :term:`BBox`\n            of `text` in page else :obj:`None`\n\n        See Also\n        --------\n        find_all_text\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_4Page_7find_text = {"find_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_4Page_7find_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_4Page_6find_text};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_7find_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  PyObject *__pyx_v_search_box = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_case_sensitive = 0;
  PyObject *__pyx_v_wholeword = 0;
  PyObject *__pyx_v_rotation = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_search_box,&__pyx_n_s_direction,&__pyx_n_s_case_sensitive,&__pyx_n_s_wholeword,&__pyx_n_s_rotation,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_n_u_top);
    values[3] = ((PyObject *)Py_False);

    /* "src/pyxpdf/document.pxi":658
 * 
 *     def find_text(self, text, search_box=None, direction="top", case_sensitive=False,
 *                   wholeword=False, rotation=0):             # <<<<<<<<<<<<<<
 *         """Find the text in Page.
 * 
 */
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_search_box);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direction);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_case_sensitive);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wholeword);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rotation);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "find_text") < 0)) __PYX_ERR(6, 657, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = values[0];
    __pyx_v_search_box = values[1];
    __pyx_v_direction = values[2];
    __pyx_v_case_sensitive = values[3];
    __pyx_v_wholeword = values[4];
    __pyx_v_rotation = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_text", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 657, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.find_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_6find_text(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self), __pyx_v_text, __pyx_v_search_box, __pyx_v_direction, __pyx_v_case_sensitive, __pyx_v_wholeword, __pyx_v_rotation);

  /* "src/pyxpdf/document.pxi":657
 * 
 * 
 *     def find_text(self, text, search_box=None, direction="top", case_sensitive=False,             # <<<<<<<<<<<<<<
 *                   wholeword=False, rotation=0):
 *         """Find the text in Page.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_6find_text(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_text, PyObject *__pyx_v_search_box, PyObject *__pyx_v_direction, PyObject *__pyx_v_case_sensitive, PyObject *__pyx_v_wholeword, PyObject *__pyx_v_rotation) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_4Page__find_text __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__97)
  __Pyx_RefNannySetupContext("find_text", 0);
  __Pyx_TraceCall("find_text", __pyx_f[6], 657, 0, __PYX_ERR(6, 657, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":700
 *         """
 * 
 *         result = None             # <<<<<<<<<<<<<<
 *         if direction == "top":
 *             result = self._find_text(text, search_box, True, True, False, False,
 */
  __Pyx_TraceLine(700,0,__PYX_ERR(6, 700, __pyx_L1_error))
  __Pyx_INCREF(Py_None);
  __pyx_v_result = Py_None;

  /* "src/pyxpdf/document.pxi":701
 * 
 *         result = None
 *         if direction == "top":             # <<<<<<<<<<<<<<
 *             result = self._find_text(text, search_box, True, True, False, False,
 *                                           case_sensitive, False, wholeword, rotation)
 */
  __Pyx_TraceLine(701,0,__PYX_ERR(6, 701, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_direction, __pyx_n_u_top, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 701, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":702
 *         result = None
 *         if direction == "top":
 *             result = self._find_text(text, search_box, True, True, False, False,             # <<<<<<<<<<<<<<
 *                                           case_sensitive, False, wholeword, rotation)
 *         if direction == "next":
 */
    __Pyx_TraceLine(702,0,__PYX_ERR(6, 702, __pyx_L1_error))
    __pyx_t_3.__pyx_n = 9;
    __pyx_t_3.search_box = __pyx_v_search_box;
    __pyx_t_3.start_at_top = Py_True;
    __pyx_t_3.stop_at_bottom = Py_True;
    __pyx_t_3.start_at_last = Py_False;
    __pyx_t_3.stop_at_last = Py_False;
    __pyx_t_3.case_sensitive = __pyx_v_case_sensitive;
    __pyx_t_3.backward = Py_False;
    __pyx_t_3.wholeword = __pyx_v_wholeword;
    __pyx_t_3.rotation = __pyx_v_rotation;
    __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_self->__pyx_vtab)->_find_text(__pyx_v_self, __pyx_v_text, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/pyxpdf/document.pxi":701
 * 
 *         result = None
 *         if direction == "top":             # <<<<<<<<<<<<<<
 *             result = self._find_text(text, search_box, True, True, False, False,
 *                                           case_sensitive, False, wholeword, rotation)
 */
  }

  /* "src/pyxpdf/document.pxi":704
 *             result = self._find_text(text, search_box, True, True, False, False,
 *                                           case_sensitive, False, wholeword, rotation)
 *         if direction == "next":             # <<<<<<<<<<<<<<
 *             result = self._find_text(text, search_box, False, True, True, False,
 *                                           case_sensitive, False, wholeword, rotation)
 */
  __Pyx_TraceLine(704,0,__PYX_ERR(6, 704, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_direction, __pyx_n_u_next, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 704, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":705
 *                                           case_sensitive, False, wholeword, rotation)
 *         if direction == "next":
 *             result = self._find_text(text, search_box, False, True, True, False,             # <<<<<<<<<<<<<<
 *                                           case_sensitive, False, wholeword, rotation)
 *         if direction == "previous":
 */
    __Pyx_TraceLine(705,0,__PYX_ERR(6, 705, __pyx_L1_error))
    __pyx_t_3.__pyx_n = 9;
    __pyx_t_3.search_box = __pyx_v_search_box;
    __pyx_t_3.start_at_top = Py_False;
    __pyx_t_3.stop_at_bottom = Py_True;
    __pyx_t_3.start_at_last = Py_True;
    __pyx_t_3.stop_at_last = Py_False;
    __pyx_t_3.case_sensitive = __pyx_v_case_sensitive;
    __pyx_t_3.backward = Py_False;
    __pyx_t_3.wholeword = __pyx_v_wholeword;
    __pyx_t_3.rotation = __pyx_v_rotation;
    __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_self->__pyx_vtab)->_find_text(__pyx_v_self, __pyx_v_text, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/pyxpdf/document.pxi":704
 *             result = self._find_text(text, search_box, True, True, False, False,
 *                                           case_sensitive, False, wholeword, rotation)
 *         if direction == "next":             # <<<<<<<<<<<<<<
 *             result = self._find_text(text, search_box, False, True, True, False,
 *                                           case_sensitive, False, wholeword, rotation)
 */
  }

  /* "src/pyxpdf/document.pxi":707
 *             result = self._find_text(text, search_box, False, True, True, False,
 *                                           case_sensitive, False, wholeword, rotation)
 *         if direction == "previous":             # <<<<<<<<<<<<<<
 *             result = self._find_text(text, search_box, False, True, True, False,
 *                                           case_sensitive, True, wholeword, rotation)
 */
  __Pyx_TraceLine(707,0,__PYX_ERR(6, 707, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_direction, __pyx_n_u_previous, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(6, 707, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":708
 *                                           case_sensitive, False, wholeword, rotation)
 *         if direction == "previous":
 *             result = self._find_text(text, search_box, False, True, True, False,             # <<<<<<<<<<<<<<
 *                                           case_sensitive, True, wholeword, rotation)
 *         return result
 */
    __Pyx_TraceLine(708,0,__PYX_ERR(6, 708, __pyx_L1_error))
    __pyx_t_3.__pyx_n = 9;
    __pyx_t_3.search_box = __pyx_v_search_box;
    __pyx_t_3.start_at_top = Py_False;
    __pyx_t_3.stop_at_bottom = Py_True;
    __pyx_t_3.start_at_last = Py_True;
    __pyx_t_3.stop_at_last = Py_False;
    __pyx_t_3.case_sensitive = __pyx_v_case_sensitive;
    __pyx_t_3.backward = Py_True;
    __pyx_t_3.wholeword = __pyx_v_wholeword;
    __pyx_t_3.rotation = __pyx_v_rotation;
    __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_self->__pyx_vtab)->_find_text(__pyx_v_self, __pyx_v_text, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/pyxpdf/document.pxi":707
 *             result = self._find_text(text, search_box, False, True, True, False,
 *                                           case_sensitive, False, wholeword, rotation)
 *         if direction == "previous":             # <<<<<<<<<<<<<<
 *             result = self._find_text(text, search_box, False, True, True, False,
 *                                           case_sensitive, True, wholeword, rotation)
 */
  }

  /* "src/pyxpdf/document.pxi":710
 *             result = self._find_text(text, search_box, False, True, True, False,
 *                                           case_sensitive, True, wholeword, rotation)
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(710,0,__PYX_ERR(6, 710, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":657
 * 
 * 
 *     def find_text(self, text, search_box=None, direction="top", case_sensitive=False,             # <<<<<<<<<<<<<<
 *                   wholeword=False, rotation=0):
 *         """Find the text in Page.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.find_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyxpdf_4xpdf_4Page_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "src/pyxpdf/document.pxi":713
 * 
 * 
 *     def find_all_text(self, text, search_box=None, case_sensitive=False, wholeword=False,             # <<<<<<<<<<<<<<
 *                       rotation=0):
 *         """Find the `text` and get all the matches
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_9find_all_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_4Page_8find_all_text[] = "Page.find_all_text(self, text, search_box=None, case_sensitive=False, wholeword=False, rotation=0)\nFind the `text` and get all the matches\n\n        Same as :meth:`find_text`, but return all the matches.\n\n        Parameters\n        ----------\n        text : str\n            Text to search in page\n        search_box : tuple of float, optional\n            tuple of cordinates of :term:`BBox` to set the search area.\n            (default is :obj:`None`, means the whole page area)\n        case_sensitive : bool, optional\n            If :obj:`False`, match the `text` regardless of its case in page\n            (default is :obj:`True`)\n        wholeword : bool, optional\n            match the `text` as a whole word only.\n            (default is :obj:`True`)\n        rotation : int, optional\n            rotation of page\n            (default is `0`)\n\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_4Page_9find_all_text = {"find_all_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_4Page_9find_all_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_4Page_8find_all_text};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_9find_all_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  PyObject *__pyx_v_search_box = 0;
  PyObject *__pyx_v_case_sensitive = 0;
  PyObject *__pyx_v_wholeword = 0;
  CYTHON_UNUSED PyObject *__pyx_v_rotation = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_all_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_search_box,&__pyx_n_s_case_sensitive,&__pyx_n_s_wholeword,&__pyx_n_s_rotation,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_search_box);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_case_sensitive);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wholeword);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rotation);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "find_all_text") < 0)) __PYX_ERR(6, 713, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = values[0];
    __pyx_v_search_box = values[1];
    __pyx_v_case_sensitive = values[2];
    __pyx_v_wholeword = values[3];
    __pyx_v_rotation = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_all_text", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 713, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.find_all_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_8find_all_text(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self), __pyx_v_text, __pyx_v_search_box, __pyx_v_case_sensitive, __pyx_v_wholeword, __pyx_v_rotation);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_8find_all_text(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_text, PyObject *__pyx_v_search_box, PyObject *__pyx_v_case_sensitive, PyObject *__pyx_v_wholeword, CYTHON_UNUSED PyObject *__pyx_v_rotation) {
  struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_all_text", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *)__pyx_tp_new_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text(__pyx_ptype_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(6, 713, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_text = __pyx_v_text;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_text);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_text);
  __pyx_cur_scope->__pyx_v_search_box = __pyx_v_search_box;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_search_box);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_search_box);
  __pyx_cur_scope->__pyx_v_case_sensitive = __pyx_v_case_sensitive;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_case_sensitive);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_case_sensitive);
  __pyx_cur_scope->__pyx_v_wholeword = __pyx_v_wholeword;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_wholeword);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_wholeword);
  __pyx_cur_scope->__pyx_v_rotation = __pyx_v_rotation;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_rotation);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_rotation);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyxpdf_4xpdf_4Page_10generator, __pyx_codeobj__98, (PyObject *) __pyx_cur_scope, __pyx_n_s_find_all_text, __pyx_n_s_Page_find_all_text, __pyx_n_s_pyxpdf_xpdf); if (unlikely(!gen)) __PYX_ERR(6, 713, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.find_all_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyxpdf_4xpdf_4Page_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *__pyx_cur_scope = ((struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_all_text", 0);
  __Pyx_TraceFrameInit(__pyx_codeobj__98)
  __Pyx_TraceCall("find_all_text", __pyx_f[6], 713, 0, __PYX_ERR(6, 713, __pyx_L1_error));
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_TraceReturn(Py_None, 0);
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(6, 713, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":737
 * 
 *         """
 *         res = self.find_text(text, search_box, "top",             # <<<<<<<<<<<<<<
 *                              case_sensitive, wholeword)
 *         while res:
 */
  __Pyx_TraceLine(737,0,__PYX_ERR(6, 737, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_find_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "src/pyxpdf/document.pxi":738
 *         """
 *         res = self.find_text(text, search_box, "top",
 *                              case_sensitive, wholeword)             # <<<<<<<<<<<<<<
 *         while res:
 *             yield res
 */
  __Pyx_TraceLine(738,0,__PYX_ERR(6, 738, __pyx_L1_error))
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_text, __pyx_cur_scope->__pyx_v_search_box, __pyx_n_u_top, __pyx_cur_scope->__pyx_v_case_sensitive, __pyx_cur_scope->__pyx_v_wholeword};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 737, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_text, __pyx_cur_scope->__pyx_v_search_box, __pyx_n_u_top, __pyx_cur_scope->__pyx_v_case_sensitive, __pyx_cur_scope->__pyx_v_wholeword};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 737, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_text);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_text);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_cur_scope->__pyx_v_text);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_search_box);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_search_box);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_cur_scope->__pyx_v_search_box);
    __Pyx_INCREF(__pyx_n_u_top);
    __Pyx_GIVEREF(__pyx_n_u_top);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_n_u_top);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_case_sensitive);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_case_sensitive);
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, __pyx_cur_scope->__pyx_v_case_sensitive);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_wholeword);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_wholeword);
    PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_4, __pyx_cur_scope->__pyx_v_wholeword);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_res = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":739
 *         res = self.find_text(text, search_box, "top",
 *                              case_sensitive, wholeword)
 *         while res:             # <<<<<<<<<<<<<<
 *             yield res
 *             res = self.find_text(text, search_box, "next",
 */
  __Pyx_TraceLine(739,0,__PYX_ERR(6, 739, __pyx_L1_error))
  while (1) {
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_res); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(6, 739, __pyx_L1_error)
    if (!__pyx_t_6) break;

    /* "src/pyxpdf/document.pxi":740
 *                              case_sensitive, wholeword)
 *         while res:
 *             yield res             # <<<<<<<<<<<<<<
 *             res = self.find_text(text, search_box, "next",
 *                                  case_sensitive, wholeword)
 */
    __Pyx_TraceLine(740,0,__PYX_ERR(6, 740, __pyx_L1_error))
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_res);
    __pyx_r = __pyx_cur_scope->__pyx_v_res;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_TraceReturn(__pyx_r, 0);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(6, 740, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":741
 *         while res:
 *             yield res
 *             res = self.find_text(text, search_box, "next",             # <<<<<<<<<<<<<<
 *                                  case_sensitive, wholeword)
 * 
 */
    __Pyx_TraceLine(741,0,__PYX_ERR(6, 741, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_find_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "src/pyxpdf/document.pxi":742
 *             yield res
 *             res = self.find_text(text, search_box, "next",
 *                                  case_sensitive, wholeword)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(742,0,__PYX_ERR(6, 742, __pyx_L1_error))
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_text, __pyx_cur_scope->__pyx_v_search_box, __pyx_n_u_next, __pyx_cur_scope->__pyx_v_case_sensitive, __pyx_cur_scope->__pyx_v_wholeword};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[6] = {__pyx_t_5, __pyx_cur_scope->__pyx_v_text, __pyx_cur_scope->__pyx_v_search_box, __pyx_n_u_next, __pyx_cur_scope->__pyx_v_case_sensitive, __pyx_cur_scope->__pyx_v_wholeword};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_text);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_text);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, __pyx_cur_scope->__pyx_v_text);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_search_box);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_search_box);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, __pyx_cur_scope->__pyx_v_search_box);
      __Pyx_INCREF(__pyx_n_u_next);
      __Pyx_GIVEREF(__pyx_n_u_next);
      PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, __pyx_n_u_next);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_case_sensitive);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_case_sensitive);
      PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_4, __pyx_cur_scope->__pyx_v_case_sensitive);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_wholeword);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_wholeword);
      PyTuple_SET_ITEM(__pyx_t_3, 4+__pyx_t_4, __pyx_cur_scope->__pyx_v_wholeword);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_res);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_res, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "src/pyxpdf/document.pxi":713
 * 
 * 
 *     def find_all_text(self, text, search_box=None, case_sensitive=False, wholeword=False,             # <<<<<<<<<<<<<<
 *                       rotation=0):
 *         """Find the `text` and get all the matches
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("find_all_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":745
 * 
 * 
 *     def text_bytes(self, page_area=None, TextControl control = None):             # <<<<<<<<<<<<<<
 *         """Parse and extract text bytes from current page.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_12text_bytes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_4Page_11text_bytes[] = "Page.text_bytes(self, page_area=None, TextControl control=None)\nParse and extract text bytes from current page.\n\n        Extracted text can be adjusted using `control` parameter.\n        This method should be use when text encoding (:attr:`Config.text_encoding`)\n        is different than `UTF-8` or when you to control decoding of bytes\n        by yourself.\n\n        Parameters\n        ----------\n        page_area : tuple of float, optional\n            tuple of cordinates of :term:`BBox` to set the extraction area.\n            Only text which is inside provided `page_area` will be extracted.\n            (default is :obj:`None`, means the whole page area)\n\n        control : :class:`~pyxpdf.xpdf.TextControl`\n            An :class:`~pyxpdf.xpdf.TextControl` object, use to control the format of\n            extacted text. (default is :obj:`None` which implies text\n            will be extracted using default values from `TextOutput` class)\n\n        Returns\n        -------\n        bytes\n            a :attr:`Config.text_encoding` encoded bytes object containing all\n            the extracted text.\n\n        See Also\n        --------\n        TextOutput\n            PDF to Text output device with caching support.\n\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_4Page_12text_bytes = {"text_bytes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_4Page_12text_bytes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_4Page_11text_bytes};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_12text_bytes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_page_area = 0;
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_bytes (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_page_area,&__pyx_n_s_control,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = (PyObject *)((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_page_area);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_control);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "text_bytes") < 0)) __PYX_ERR(6, 745, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_page_area = values[0];
    __pyx_v_control = ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("text_bytes", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 745, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.text_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_control), __pyx_ptype_6pyxpdf_4xpdf_TextControl, 1, "control", 0))) __PYX_ERR(6, 745, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_11text_bytes(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self), __pyx_v_page_area, __pyx_v_control);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_11text_bytes(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_page_area, struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control) {
  TextOutputControl __pyx_v_text_control;
  std::unique_ptr<std::string>  __pyx_v_out;
  std::unique_ptr<TextOutputDev>  __pyx_v_text_dev;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  TextOutputControl __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__99)
  __Pyx_RefNannySetupContext("text_bytes", 0);
  __Pyx_TraceCall("text_bytes", __pyx_f[6], 745, 0, __PYX_ERR(6, 745, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":778
 *         """
 *         cdef:
 *             TextOutputControl text_control = deref(control.get_c_control()) if control else TextOutputControl()             # <<<<<<<<<<<<<<
 *             unique_ptr[string] out = make_unique[string]()
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)
 */
  __Pyx_TraceLine(778,0,__PYX_ERR(6, 778, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_control)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 778, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_1 = (*((struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextControl *)__pyx_v_control->__pyx_vtab)->get_c_control(__pyx_v_control));
  } else {
    __pyx_t_1 = TextOutputControl();
  }
  __pyx_v_text_control = __pyx_t_1;

  /* "src/pyxpdf/document.pxi":779
 *         cdef:
 *             TextOutputControl text_control = deref(control.get_c_control()) if control else TextOutputControl()
 *             unique_ptr[string] out = make_unique[string]()             # <<<<<<<<<<<<<<
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)
 * 
 */
  __Pyx_TraceLine(779,0,__PYX_ERR(6, 779, __pyx_L1_error))
  __pyx_v_out = std::make_unique<std::string>();

  /* "src/pyxpdf/document.pxi":780
 *             TextOutputControl text_control = deref(control.get_c_control()) if control else TextOutputControl()
 *             unique_ptr[string] out = make_unique[string]()
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)             # <<<<<<<<<<<<<<
 * 
 *         if page_area == None:
 */
  __Pyx_TraceLine(780,0,__PYX_ERR(6, 780, __pyx_L1_error))
  __pyx_v_text_dev = std::make_unique<TextOutputDev>((&__pyx_f_6pyxpdf_4xpdf_append_to_cpp_string), __pyx_v_out.get(), (&__pyx_v_text_control));

  /* "src/pyxpdf/document.pxi":782
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)
 * 
 *         if page_area == None:             # <<<<<<<<<<<<<<
 *             # Why crop=gTrue in displayPage?
 *             self.display(text_dev.get())
 */
  __Pyx_TraceLine(782,0,__PYX_ERR(6, 782, __pyx_L1_error))
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_page_area, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 782, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 782, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "src/pyxpdf/document.pxi":784
 *         if page_area == None:
 *             # Why crop=gTrue in displayPage?
 *             self.display(text_dev.get())             # <<<<<<<<<<<<<<
 *         else:
 *             self.display_slice(text_dev.get(), page_area[0], page_area[1],
 */
    __Pyx_TraceLine(784,0,__PYX_ERR(6, 784, __pyx_L1_error))
    __pyx_t_3 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_self->__pyx_vtab)->display(__pyx_v_self, __pyx_v_text_dev.get(), NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyxpdf/document.pxi":782
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)
 * 
 *         if page_area == None:             # <<<<<<<<<<<<<<
 *             # Why crop=gTrue in displayPage?
 *             self.display(text_dev.get())
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/document.pxi":786
 *             self.display(text_dev.get())
 *         else:
 *             self.display_slice(text_dev.get(), page_area[0], page_area[1],             # <<<<<<<<<<<<<<
 *                                 page_area[2], page_area[3])
 * 
 */
  __Pyx_TraceLine(786,0,__PYX_ERR(6, 786, __pyx_L1_error))
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_page_area, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 786, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_page_area, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 786, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyxpdf/document.pxi":787
 *         else:
 *             self.display_slice(text_dev.get(), page_area[0], page_area[1],
 *                                 page_area[2], page_area[3])             # <<<<<<<<<<<<<<
 * 
 *         return deref(out)
 */
    __Pyx_TraceLine(787,0,__PYX_ERR(6, 787, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_page_area, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 787, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_page_area, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 787, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyxpdf/document.pxi":786
 *             self.display(text_dev.get())
 *         else:
 *             self.display_slice(text_dev.get(), page_area[0], page_area[1],             # <<<<<<<<<<<<<<
 *                                 page_area[2], page_area[3])
 * 
 */
    __Pyx_TraceLine(786,0,__PYX_ERR(6, 786, __pyx_L1_error))
    __pyx_t_3 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page *)__pyx_v_self->__pyx_vtab)->display_slice(__pyx_v_self, __pyx_v_text_dev.get(), __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "src/pyxpdf/document.pxi":789
 *                                 page_area[2], page_area[3])
 * 
 *         return deref(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(789,0,__PYX_ERR(6, 789, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_out)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":745
 * 
 * 
 *     def text_bytes(self, page_area=None, TextControl control = None):             # <<<<<<<<<<<<<<
 *         """Parse and extract text bytes from current page.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.text_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":792
 * 
 * 
 *     def text(self, page_area=None, control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract UTF-8 decoded text from current page.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_14text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_4Page_13text[] = "Page.text(self, page_area=None, control=None)\nParse and extract UTF-8 decoded text from current page.\n\n        Extracted text can be adjusted using `control` parameter.\n\n        Parameters\n        ----------\n        page_area : tuple of float, optional\n            tuple of cordinates of :term:`BBox` to set the extraction area.\n            Only text which is inside provided `page_area` will be extracted.\n            (default is :obj:`None`, means the whole page area)\n\n        control : :class:`~pyxpdf.xpdf.TextControl`, optional\n            An :class:`~pyxpdf.xpdf.TextControl` object, use to control the format of\n            extacted text. (default is :obj:`None` which implies text\n            will be extracted using default values from `TextControl` class)\n\n        Returns\n        -------\n        str\n            a 'UTF-8' decoded str object containing all the extracted text.\n\n        Note\n        -----\n        This method is almost similar to :meth:`text_bytes`, the only difference\n        is that it decodes the extracted bytes in `UTF-8` with '`ignore`'\n        (:func:`codecs.ignore_errors`) decoding error handler.\n\n        See Also\n        --------\n        TextOutput\n            PDF to Text output device with caching support.\n\n        ";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_4Page_14text = {"text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_4Page_14text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_4Page_13text};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_14text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_page_area = 0;
  PyObject *__pyx_v_control = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_page_area,&__pyx_n_s_control,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_page_area);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_control);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "text") < 0)) __PYX_ERR(6, 792, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_page_area = values[0];
    __pyx_v_control = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("text", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 792, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_13text(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self), __pyx_v_page_area, __pyx_v_control);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_13text(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, PyObject *__pyx_v_page_area, PyObject *__pyx_v_control) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__100)
  __Pyx_RefNannySetupContext("text", 0);
  __Pyx_TraceCall("text", __pyx_f[6], 792, 0, __PYX_ERR(6, 792, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":826
 * 
 *         """
 *         return self.text_bytes(page_area, control).decode('UTF-8', errors='ignore')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(826,0,__PYX_ERR(6, 826, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_text_bytes); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_page_area, __pyx_v_control};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 826, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_page_area, __pyx_v_control};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 826, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_page_area);
    __Pyx_GIVEREF(__pyx_v_page_area);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_page_area);
    __Pyx_INCREF(__pyx_v_control);
    __Pyx_GIVEREF(__pyx_v_control);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_control);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_errors, __pyx_n_u_ignore) < 0) __PYX_ERR(6, 826, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":792
 * 
 * 
 *     def text(self, page_area=None, control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract UTF-8 decoded text from current page.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":497
 *     cdef c_Page *page
 *     cdef unique_ptr[TextPage] textpage
 *     cdef readonly int index             # <<<<<<<<<<<<<<
 *     cdef readonly object label
 *     cdef readonly Document doc
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_5index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_5index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_5index___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_5index___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 497, 0, __PYX_ERR(6, 497, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":498
 *     cdef unique_ptr[TextPage] textpage
 *     cdef readonly int index
 *     cdef readonly object label             # <<<<<<<<<<<<<<
 *     cdef readonly Document doc
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_5label___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_5label___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 498, 0, __PYX_ERR(6, 498, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->label);
  __pyx_r = __pyx_v_self->label;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":499
 *     cdef readonly int index
 *     cdef readonly object label
 *     cdef readonly Document doc             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_3doc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_3doc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_3doc___get__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[6], 499, 0, __PYX_ERR(6, 499, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->doc));
  __pyx_r = ((PyObject *)__pyx_v_self->doc);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.doc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_16__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_4Page_15__reduce_cython__[] = "Page.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_4Page_16__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_4Page_16__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_4Page_15__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_16__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_15__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_15__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__101)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(7, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__102, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_18__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_4Page_17__setstate_cython__[] = "Page.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_4Page_18__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_4Page_18__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_4Page_17__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_4Page_18__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4Page_17__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_Page *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4Page_17__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_Page *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__103)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 3, 0, __PYX_ERR(7, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(7, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.Page.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":861
 *         dict kwargs
 * 
 *     def __init__(self, output, **kwargs):             # <<<<<<<<<<<<<<
 *         self.output = output
 *         self.index = -1
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_13page_iterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_13page_iterator_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_output = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_output,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "__init__") < 0)) __PYX_ERR(6, 861, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_output = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 861, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pyxpdf.xpdf.page_iterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_13page_iterator___init__(((struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)__pyx_v_self), __pyx_v_output, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_13page_iterator___init__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self, PyObject *__pyx_v_output, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[6], 861, 0, __PYX_ERR(6, 861, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":862
 * 
 *     def __init__(self, output, **kwargs):
 *         self.output = output             # <<<<<<<<<<<<<<
 *         self.index = -1
 *         self.kwargs = kwargs
 */
  __Pyx_TraceLine(862,0,__PYX_ERR(6, 862, __pyx_L1_error))
  __Pyx_INCREF(__pyx_v_output);
  __Pyx_GIVEREF(__pyx_v_output);
  __Pyx_GOTREF(__pyx_v_self->output);
  __Pyx_DECREF(__pyx_v_self->output);
  __pyx_v_self->output = __pyx_v_output;

  /* "src/pyxpdf/document.pxi":863
 *     def __init__(self, output, **kwargs):
 *         self.output = output
 *         self.index = -1             # <<<<<<<<<<<<<<
 *         self.kwargs = kwargs
 * 
 */
  __Pyx_TraceLine(863,0,__PYX_ERR(6, 863, __pyx_L1_error))
  __pyx_v_self->index = -1;

  /* "src/pyxpdf/document.pxi":864
 *         self.output = output
 *         self.index = -1
 *         self.kwargs = kwargs             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_TraceLine(864,0,__PYX_ERR(6, 864, __pyx_L1_error))
  __Pyx_INCREF(__pyx_v_kwargs);
  __Pyx_GIVEREF(__pyx_v_kwargs);
  __Pyx_GOTREF(__pyx_v_self->kwargs);
  __Pyx_DECREF(__pyx_v_self->kwargs);
  __pyx_v_self->kwargs = __pyx_v_kwargs;

  /* "src/pyxpdf/document.pxi":861
 *         dict kwargs
 * 
 *     def __init__(self, output, **kwargs):             # <<<<<<<<<<<<<<
 *         self.output = output
 *         self.index = -1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.page_iterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":866
 *         self.kwargs = kwargs
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13page_iterator_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13page_iterator_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_13page_iterator_2__iter__(((struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_13page_iterator_2__iter__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __Pyx_TraceCall("__iter__", __pyx_f[6], 866, 0, __PYX_ERR(6, 866, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":867
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_TraceLine(867,0,__PYX_ERR(6, 867, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":866
 *         self.kwargs = kwargs
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.page_iterator.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":869
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.index += 1
 *         if self.index >= len(self.output.doc):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13page_iterator_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13page_iterator_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_13page_iterator_4__next__(((struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_13page_iterator_4__next__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);
  __Pyx_TraceCall("__next__", __pyx_f[6], 869, 0, __PYX_ERR(6, 869, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":870
 * 
 *     def __next__(self):
 *         self.index += 1             # <<<<<<<<<<<<<<
 *         if self.index >= len(self.output.doc):
 *             raise StopIteration()
 */
  __Pyx_TraceLine(870,0,__PYX_ERR(6, 870, __pyx_L1_error))
  __pyx_v_self->index = (__pyx_v_self->index + 1);

  /* "src/pyxpdf/document.pxi":871
 *     def __next__(self):
 *         self.index += 1
 *         if self.index >= len(self.output.doc):             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         return self.output.get(self.index, **self.kwargs)
 */
  __Pyx_TraceLine(871,0,__PYX_ERR(6, 871, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->output, __pyx_n_s_doc); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(6, 871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_v_self->index >= __pyx_t_2) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "src/pyxpdf/document.pxi":872
 *         self.index += 1
 *         if self.index >= len(self.output.doc):
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 *         return self.output.get(self.index, **self.kwargs)
 * 
 */
    __Pyx_TraceLine(872,0,__PYX_ERR(6, 872, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_StopIteration); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(6, 872, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":871
 *     def __next__(self):
 *         self.index += 1
 *         if self.index >= len(self.output.doc):             # <<<<<<<<<<<<<<
 *             raise StopIteration()
 *         return self.output.get(self.index, **self.kwargs)
 */
  }

  /* "src/pyxpdf/document.pxi":873
 *         if self.index >= len(self.output.doc):
 *             raise StopIteration()
 *         return self.output.get(self.index, **self.kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(873,0,__PYX_ERR(6, 873, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->output, __pyx_n_s_get); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  if (unlikely(__pyx_v_self->kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(6, 873, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_v_self->kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":869
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.index += 1
 *         if self.index >= len(self.output.doc):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.page_iterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13page_iterator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_13page_iterator_6__reduce_cython__[] = "page_iterator.__reduce_cython__(self)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_13page_iterator_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_13page_iterator_7__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_13page_iterator_6__reduce_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13page_iterator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_13page_iterator_6__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_13page_iterator_6__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__105)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.index, self.kwargs, self.output)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->kwargs);
  __Pyx_GIVEREF(__pyx_v_self->kwargs);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self->kwargs);
  __Pyx_INCREF(__pyx_v_self->output);
  __Pyx_GIVEREF(__pyx_v_self->output);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_self->output);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.index, self.kwargs, self.output)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.index, self.kwargs, self.output)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.kwargs is not None or self.output is not None
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.index, self.kwargs, self.output)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.kwargs is not None or self.output is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->kwargs != ((PyObject*)Py_None));
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_self->output != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.kwargs is not None or self.output is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self.kwargs is not None or self.output is not None
 *     if use_setstate:
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_page_iterator); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_113232382);
    __Pyx_GIVEREF(__pyx_int_113232382);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_113232382);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.kwargs is not None or self.output is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, None), state
 *     else:
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_page_iterator__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(7, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_page_iterator); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_113232382);
    __Pyx_GIVEREF(__pyx_int_113232382);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_113232382);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf.page_iterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_page_iterator__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13page_iterator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_13page_iterator_8__setstate_cython__[] = "page_iterator.__setstate_cython__(self, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_13page_iterator_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_13page_iterator_9__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_13page_iterator_8__setstate_cython__};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13page_iterator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_13page_iterator_8__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_13page_iterator_8__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__106)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[7], 16, 0, __PYX_ERR(7, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_page_iterator__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(7, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_page_iterator__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_page_iterator__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.page_iterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_2__pyx_unpickle_PDFError[] = "__pyx_unpickle_PDFError(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError = {"__pyx_unpickle_PDFError", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_2__pyx_unpickle_PDFError};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFError", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFError", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PDFError") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFError", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_2__pyx_unpickle_PDFError(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_2__pyx_unpickle_PDFError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__107)
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFError", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFError", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFError.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFError.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFError__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_PDFError *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFError__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFError__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFError__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_XPDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5__pyx_unpickle_XPDFError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_4__pyx_unpickle_XPDFError[] = "__pyx_unpickle_XPDFError(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_5__pyx_unpickle_XPDFError = {"__pyx_unpickle_XPDFError", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_5__pyx_unpickle_XPDFError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_4__pyx_unpickle_XPDFError};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5__pyx_unpickle_XPDFError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFError", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFError", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_XPDFError") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFError", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_4__pyx_unpickle_XPDFError(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_4__pyx_unpickle_XPDFError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__108)
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFError", 0);
  __Pyx_TraceCall("__pyx_unpickle_XPDFError", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFError.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = XPDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFError.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFError__set_state(<XPDFError> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_XPDFError__set_state(<XPDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = XPDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFError__set_state(<XPDFError> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFError__set_state(XPDFError __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFError__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_XPDFError__set_state(<XPDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFError__set_state(<XPDFError> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_XPDFError__set_state(XPDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_XPDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_XPDFError__set_state(<XPDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFError__set_state(XPDFError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_XPDFError *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFError__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_XPDFError__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFError__set_state(XPDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_XPDFError__set_state(XPDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFError__set_state(XPDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_XPDFError__set_state(<XPDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFError__set_state(XPDFError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFError__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PDFSyntaxError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7__pyx_unpickle_PDFSyntaxError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_6__pyx_unpickle_PDFSyntaxError[] = "__pyx_unpickle_PDFSyntaxError(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_7__pyx_unpickle_PDFSyntaxError = {"__pyx_unpickle_PDFSyntaxError", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_7__pyx_unpickle_PDFSyntaxError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_6__pyx_unpickle_PDFSyntaxError};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7__pyx_unpickle_PDFSyntaxError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFSyntaxError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFSyntaxError", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFSyntaxError", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PDFSyntaxError") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFSyntaxError", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFSyntaxError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_6__pyx_unpickle_PDFSyntaxError(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_6__pyx_unpickle_PDFSyntaxError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__109)
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFSyntaxError", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFSyntaxError", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFSyntaxError.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PDFSyntaxError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFSyntaxError.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFSyntaxError__set_state(<PDFSyntaxError> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFSyntaxError), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFSyntaxError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFSyntaxError__set_state(<PDFSyntaxError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PDFSyntaxError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFSyntaxError__set_state(<PDFSyntaxError> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFSyntaxError__set_state(PDFSyntaxError __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFSyntaxError__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFSyntaxError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFSyntaxError__set_state(<PDFSyntaxError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFSyntaxError__set_state(<PDFSyntaxError> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PDFSyntaxError__set_state(PDFSyntaxError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFSyntaxError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFSyntaxError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PDFSyntaxError__set_state(<PDFSyntaxError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFSyntaxError__set_state(PDFSyntaxError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFSyntaxError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFSyntaxError__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFSyntaxError__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFSyntaxError__set_state(PDFSyntaxError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PDFSyntaxError__set_state(PDFSyntaxError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFSyntaxError__set_state(PDFSyntaxError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFSyntaxError__set_state(<PDFSyntaxError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFSyntaxError__set_state(PDFSyntaxError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFSyntaxError__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_XPDFConfigError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_9__pyx_unpickle_XPDFConfigError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_8__pyx_unpickle_XPDFConfigError[] = "__pyx_unpickle_XPDFConfigError(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_9__pyx_unpickle_XPDFConfigError = {"__pyx_unpickle_XPDFConfigError", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_9__pyx_unpickle_XPDFConfigError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_8__pyx_unpickle_XPDFConfigError};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_9__pyx_unpickle_XPDFConfigError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFConfigError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFConfigError", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFConfigError", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_XPDFConfigError") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFConfigError", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFConfigError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8__pyx_unpickle_XPDFConfigError(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8__pyx_unpickle_XPDFConfigError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__110)
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFConfigError", 0);
  __Pyx_TraceCall("__pyx_unpickle_XPDFConfigError", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFConfigError.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = XPDFConfigError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFConfigError.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFConfigError__set_state(<XPDFConfigError> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFConfigError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_XPDFConfigError__set_state(<XPDFConfigError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = XPDFConfigError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFConfigError__set_state(<XPDFConfigError> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFConfigError__set_state(XPDFConfigError __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFConfigError__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFConfigError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_XPDFConfigError__set_state(<XPDFConfigError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFConfigError__set_state(<XPDFConfigError> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_XPDFConfigError__set_state(XPDFConfigError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_XPDFConfigError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFConfigError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_XPDFConfigError__set_state(<XPDFConfigError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFConfigError__set_state(XPDFConfigError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFConfigError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFConfigError__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_XPDFConfigError__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFConfigError__set_state(XPDFConfigError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_XPDFConfigError__set_state(XPDFConfigError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFConfigError__set_state(XPDFConfigError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_XPDFConfigError__set_state(<XPDFConfigError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFConfigError__set_state(XPDFConfigError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFConfigError__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PDFIOError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11__pyx_unpickle_PDFIOError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_10__pyx_unpickle_PDFIOError[] = "__pyx_unpickle_PDFIOError(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_11__pyx_unpickle_PDFIOError = {"__pyx_unpickle_PDFIOError", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_11__pyx_unpickle_PDFIOError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_10__pyx_unpickle_PDFIOError};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11__pyx_unpickle_PDFIOError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFIOError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFIOError", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFIOError", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PDFIOError") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFIOError", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFIOError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_10__pyx_unpickle_PDFIOError(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_10__pyx_unpickle_PDFIOError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__111)
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFIOError", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFIOError", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFIOError.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PDFIOError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFIOError.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFIOError__set_state(<PDFIOError> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFIOError), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFIOError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFIOError__set_state(<PDFIOError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PDFIOError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFIOError__set_state(<PDFIOError> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFIOError__set_state(PDFIOError __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFIOError__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFIOError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFIOError__set_state(<PDFIOError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFIOError__set_state(<PDFIOError> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PDFIOError__set_state(PDFIOError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFIOError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFIOError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PDFIOError__set_state(<PDFIOError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFIOError__set_state(PDFIOError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFIOError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFIOError__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFIOError__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFIOError__set_state(PDFIOError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PDFIOError__set_state(PDFIOError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFIOError__set_state(PDFIOError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFIOError__set_state(<PDFIOError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFIOError__set_state(PDFIOError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFIOError__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PDFPermissionError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13__pyx_unpickle_PDFPermissionError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_12__pyx_unpickle_PDFPermissionError[] = "__pyx_unpickle_PDFPermissionError(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_13__pyx_unpickle_PDFPermissionError = {"__pyx_unpickle_PDFPermissionError", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_13__pyx_unpickle_PDFPermissionError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_12__pyx_unpickle_PDFPermissionError};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_13__pyx_unpickle_PDFPermissionError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFPermissionError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFPermissionError", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFPermissionError", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PDFPermissionError") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFPermissionError", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFPermissionError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_12__pyx_unpickle_PDFPermissionError(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_12__pyx_unpickle_PDFPermissionError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__112)
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFPermissionError", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFPermissionError", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFPermissionError.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PDFPermissionError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFPermissionError.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFPermissionError__set_state(<PDFPermissionError> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFPermissionError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFPermissionError__set_state(<PDFPermissionError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PDFPermissionError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFPermissionError__set_state(<PDFPermissionError> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFPermissionError__set_state(PDFPermissionError __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFPermissionError__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFPermissionError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFPermissionError__set_state(<PDFPermissionError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFPermissionError__set_state(<PDFPermissionError> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PDFPermissionError__set_state(PDFPermissionError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFPermissionError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFPermissionError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PDFPermissionError__set_state(<PDFPermissionError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFPermissionError__set_state(PDFPermissionError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFPermissionError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFPermissionError__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFPermissionError__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFPermissionError__set_state(PDFPermissionError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PDFPermissionError__set_state(PDFPermissionError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFPermissionError__set_state(PDFPermissionError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFPermissionError__set_state(<PDFPermissionError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFPermissionError__set_state(PDFPermissionError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFPermissionError__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_XPDFInternalError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15__pyx_unpickle_XPDFInternalError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_14__pyx_unpickle_XPDFInternalError[] = "__pyx_unpickle_XPDFInternalError(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_15__pyx_unpickle_XPDFInternalError = {"__pyx_unpickle_XPDFInternalError", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_15__pyx_unpickle_XPDFInternalError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_14__pyx_unpickle_XPDFInternalError};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_15__pyx_unpickle_XPDFInternalError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFInternalError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFInternalError", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFInternalError", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_XPDFInternalError") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFInternalError", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFInternalError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_14__pyx_unpickle_XPDFInternalError(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_14__pyx_unpickle_XPDFInternalError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__113)
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFInternalError", 0);
  __Pyx_TraceCall("__pyx_unpickle_XPDFInternalError", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFInternalError.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = XPDFInternalError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFInternalError.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFInternalError__set_state(<XPDFInternalError> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFInternalError), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFInternalError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_XPDFInternalError__set_state(<XPDFInternalError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = XPDFInternalError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFInternalError__set_state(<XPDFInternalError> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFInternalError__set_state(XPDFInternalError __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFInternalError__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFInternalError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_XPDFInternalError__set_state(<XPDFInternalError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFInternalError__set_state(<XPDFInternalError> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_XPDFInternalError__set_state(XPDFInternalError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_XPDFInternalError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFInternalError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_XPDFInternalError__set_state(<XPDFInternalError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFInternalError__set_state(XPDFInternalError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFInternalError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFInternalError__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_XPDFInternalError__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFInternalError__set_state(XPDFInternalError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_XPDFInternalError__set_state(XPDFInternalError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFInternalError__set_state(XPDFInternalError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_XPDFInternalError__set_state(<XPDFInternalError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFInternalError__set_state(XPDFInternalError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFInternalError__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_XPDFNotInplementedError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_17__pyx_unpickle_XPDFNotInplementedError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_16__pyx_unpickle_XPDFNotInplementedError[] = "__pyx_unpickle_XPDFNotInplementedError(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_17__pyx_unpickle_XPDFNotInplementedError = {"__pyx_unpickle_XPDFNotInplementedError", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_17__pyx_unpickle_XPDFNotInplementedError, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_16__pyx_unpickle_XPDFNotInplementedError};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_17__pyx_unpickle_XPDFNotInplementedError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFNotInplementedError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFNotInplementedError", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFNotInplementedError", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_XPDFNotInplementedError") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_XPDFNotInplementedError", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFNotInplementedError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_16__pyx_unpickle_XPDFNotInplementedError(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_16__pyx_unpickle_XPDFNotInplementedError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__114)
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFNotInplementedError", 0);
  __Pyx_TraceCall("__pyx_unpickle_XPDFNotInplementedError", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFNotInplementedError.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = XPDFNotInplementedError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFNotInplementedError.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFNotInplementedError__set_state(<XPDFNotInplementedError> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFNotInplementedError), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFNotInplementedError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_XPDFNotInplementedError__set_state(<XPDFNotInplementedError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = XPDFNotInplementedError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFNotInplementedError__set_state(<XPDFNotInplementedError> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFNotInplementedError__set_state(XPDFNotInplementedError __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFNotInplementedError__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = XPDFNotInplementedError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_XPDFNotInplementedError__set_state(<XPDFNotInplementedError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_XPDFNotInplementedError__set_state(<XPDFNotInplementedError> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_XPDFNotInplementedError__set_state(XPDFNotInplementedError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_XPDFNotInplementedError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFNotInplementedError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_XPDFNotInplementedError__set_state(<XPDFNotInplementedError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFNotInplementedError__set_state(XPDFNotInplementedError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_XPDFNotInplementedError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_XPDFNotInplementedError__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_XPDFNotInplementedError__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFNotInplementedError__set_state(XPDFNotInplementedError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_XPDFNotInplementedError__set_state(XPDFNotInplementedError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFNotInplementedError__set_state(XPDFNotInplementedError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_XPDFNotInplementedError__set_state(<XPDFNotInplementedError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFNotInplementedError__set_state(XPDFNotInplementedError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_XPDFNotInplementedError__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PDFOutputDevice(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19__pyx_unpickle_PDFOutputDevice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_18__pyx_unpickle_PDFOutputDevice[] = "__pyx_unpickle_PDFOutputDevice(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_19__pyx_unpickle_PDFOutputDevice = {"__pyx_unpickle_PDFOutputDevice", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_19__pyx_unpickle_PDFOutputDevice, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_18__pyx_unpickle_PDFOutputDevice};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_19__pyx_unpickle_PDFOutputDevice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFOutputDevice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFOutputDevice", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFOutputDevice", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PDFOutputDevice") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFOutputDevice", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFOutputDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18__pyx_unpickle_PDFOutputDevice(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18__pyx_unpickle_PDFOutputDevice(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__115)
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFOutputDevice", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFOutputDevice", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFOutputDevice.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PDFOutputDevice.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFOutputDevice.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFOutputDevice__set_state(<PDFOutputDevice> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFOutputDevice.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFOutputDevice__set_state(<PDFOutputDevice> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PDFOutputDevice.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFOutputDevice__set_state(<PDFOutputDevice> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFOutputDevice__set_state(PDFOutputDevice __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFOutputDevice__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFOutputDevice.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFOutputDevice__set_state(<PDFOutputDevice> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFOutputDevice__set_state(<PDFOutputDevice> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PDFOutputDevice__set_state(PDFOutputDevice __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFOutputDevice(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFOutputDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PDFOutputDevice__set_state(<PDFOutputDevice> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFOutputDevice__set_state(PDFOutputDevice __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFOutputDevice__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFOutputDevice__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFOutputDevice__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFOutputDevice__set_state(PDFOutputDevice __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PDFOutputDevice__set_state(PDFOutputDevice __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFOutputDevice__set_state(PDFOutputDevice __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFOutputDevice__set_state(<PDFOutputDevice> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFOutputDevice__set_state(PDFOutputDevice __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFOutputDevice__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_RawImageControl(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_21__pyx_unpickle_RawImageControl(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_20__pyx_unpickle_RawImageControl[] = "__pyx_unpickle_RawImageControl(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_21__pyx_unpickle_RawImageControl = {"__pyx_unpickle_RawImageControl", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_21__pyx_unpickle_RawImageControl, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_20__pyx_unpickle_RawImageControl};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_21__pyx_unpickle_RawImageControl(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_RawImageControl (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RawImageControl", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RawImageControl", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_RawImageControl") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RawImageControl", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_RawImageControl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_20__pyx_unpickle_RawImageControl(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_20__pyx_unpickle_RawImageControl(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__116)
  __Pyx_RefNannySetupContext("__pyx_unpickle_RawImageControl", 0);
  __Pyx_TraceCall("__pyx_unpickle_RawImageControl", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = RawImageControl.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = RawImageControl.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = RawImageControl.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RawImageControl__set_state(<RawImageControl> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_RawImageControl), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = RawImageControl.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RawImageControl__set_state(<RawImageControl> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = RawImageControl.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RawImageControl__set_state(<RawImageControl> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_RawImageControl__set_state(RawImageControl __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_RawImageControl__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = RawImageControl.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RawImageControl__set_state(<RawImageControl> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RawImageControl__set_state(<RawImageControl> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_RawImageControl__set_state(RawImageControl __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RawImageControl(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_RawImageControl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_RawImageControl__set_state(<RawImageControl> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RawImageControl__set_state(RawImageControl __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_RawImageControl__set_state(struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RawImageControl__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_RawImageControl__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_RawImageControl__set_state(RawImageControl __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_RawImageControl__set_state(RawImageControl __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_RawImageControl__set_state(RawImageControl __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_RawImageControl__set_state(<RawImageControl> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RawImageControl__set_state(RawImageControl __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_RawImageControl__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PDFImage(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_23__pyx_unpickle_PDFImage(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_22__pyx_unpickle_PDFImage[] = "__pyx_unpickle_PDFImage(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_23__pyx_unpickle_PDFImage = {"__pyx_unpickle_PDFImage", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_23__pyx_unpickle_PDFImage, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_22__pyx_unpickle_PDFImage};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_23__pyx_unpickle_PDFImage(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFImage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFImage", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFImage", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PDFImage") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFImage", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_22__pyx_unpickle_PDFImage(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_22__pyx_unpickle_PDFImage(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__117)
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFImage", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFImage", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb108fe2:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb108fe2 = (bbox, colorspace, compression, hDPI, image, image_type, interpolate, is_inline, page_index, vDPI))" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb108fe2) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb108fe2:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb108fe2 = (bbox, colorspace, compression, hDPI, image, image_type, interpolate, is_inline, page_index, vDPI))" % __pyx_checksum)
 *     __pyx_result = PDFImage.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xb108fe2:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb108fe2 = (bbox, colorspace, compression, hDPI, image, image_type, interpolate, is_inline, page_index, vDPI))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PDFImage.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb108fe2:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb108fe2 = (bbox, colorspace, compression, hDPI, image, image_type, interpolate, is_inline, page_index, vDPI))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb108fe2 = (bbox, colorspace, compression, hDPI, image, image_type, interpolate, is_inline, page_index, vDPI))" % __pyx_checksum)
 *     __pyx_result = PDFImage.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFImage__set_state(<PDFImage> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFImage), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb108fe2 = (bbox, colorspace, compression, hDPI, image, image_type, interpolate, is_inline, page_index, vDPI))" % __pyx_checksum)
 *     __pyx_result = PDFImage.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFImage__set_state(<PDFImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PDFImage.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFImage__set_state(<PDFImage> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFImage__set_state(PDFImage __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFImage__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb108fe2 = (bbox, colorspace, compression, hDPI, image, image_type, interpolate, is_inline, page_index, vDPI))" % __pyx_checksum)
 *     __pyx_result = PDFImage.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFImage__set_state(<PDFImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFImage__set_state(<PDFImage> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PDFImage__set_state(PDFImage __pyx_result, tuple __pyx_state):
 *     __pyx_result.bbox = __pyx_state[0]; __pyx_result.colorspace = __pyx_state[1]; __pyx_result.compression = __pyx_state[2]; __pyx_result.hDPI = __pyx_state[3]; __pyx_result.image = __pyx_state[4]; __pyx_result.image_type = __pyx_state[5]; __pyx_result.interpolate = __pyx_state[6]; __pyx_result.is_inline = __pyx_state[7]; __pyx_result.page_index = __pyx_state[8]; __pyx_result.vDPI = __pyx_state[9]
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFImage(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PDFImage__set_state(<PDFImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFImage__set_state(PDFImage __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.bbox = __pyx_state[0]; __pyx_result.colorspace = __pyx_state[1]; __pyx_result.compression = __pyx_state[2]; __pyx_result.hDPI = __pyx_state[3]; __pyx_result.image = __pyx_state[4]; __pyx_result.image_type = __pyx_state[5]; __pyx_result.interpolate = __pyx_state[6]; __pyx_result.is_inline = __pyx_state[7]; __pyx_result.page_index = __pyx_state[8]; __pyx_result.vDPI = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFImage__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFImage__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFImage__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFImage__set_state(PDFImage __pyx_result, tuple __pyx_state):
 *     __pyx_result.bbox = __pyx_state[0]; __pyx_result.colorspace = __pyx_state[1]; __pyx_result.compression = __pyx_state[2]; __pyx_result.hDPI = __pyx_state[3]; __pyx_result.image = __pyx_state[4]; __pyx_result.image_type = __pyx_state[5]; __pyx_result.interpolate = __pyx_state[6]; __pyx_result.is_inline = __pyx_state[7]; __pyx_result.page_index = __pyx_state[8]; __pyx_result.vDPI = __pyx_state[9]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[10])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->bbox);
  __Pyx_DECREF(__pyx_v___pyx_result->bbox);
  __pyx_v___pyx_result->bbox = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->colorspace);
  __Pyx_DECREF(__pyx_v___pyx_result->colorspace);
  __pyx_v___pyx_result->colorspace = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->compression);
  __Pyx_DECREF(__pyx_v___pyx_result->compression);
  __pyx_v___pyx_result->compression = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->hDPI = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->image);
  __Pyx_DECREF(__pyx_v___pyx_result->image);
  __pyx_v___pyx_result->image = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->image_type);
  __Pyx_DECREF(__pyx_v___pyx_result->image_type);
  __pyx_v___pyx_result->image_type = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->interpolate = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->is_inline = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->page_index = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->vDPI = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_PDFImage__set_state(PDFImage __pyx_result, tuple __pyx_state):
 *     __pyx_result.bbox = __pyx_state[0]; __pyx_result.colorspace = __pyx_state[1]; __pyx_result.compression = __pyx_state[2]; __pyx_result.hDPI = __pyx_state[3]; __pyx_result.image = __pyx_state[4]; __pyx_result.image_type = __pyx_state[5]; __pyx_result.interpolate = __pyx_state[6]; __pyx_result.is_inline = __pyx_state[7]; __pyx_result.page_index = __pyx_state[8]; __pyx_result.vDPI = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[10])
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 13, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_5 > 10) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_3 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_3 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.bbox = __pyx_state[0]; __pyx_result.colorspace = __pyx_state[1]; __pyx_result.compression = __pyx_state[2]; __pyx_result.hDPI = __pyx_state[3]; __pyx_result.image = __pyx_state[4]; __pyx_result.image_type = __pyx_state[5]; __pyx_result.interpolate = __pyx_state[6]; __pyx_result.is_inline = __pyx_state[7]; __pyx_result.page_index = __pyx_state[8]; __pyx_result.vDPI = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[10])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(14,0,__PYX_ERR(7, 14, __pyx_L1_error))
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_8)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 14, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PDFImage__set_state(PDFImage __pyx_result, tuple __pyx_state):
 *     __pyx_result.bbox = __pyx_state[0]; __pyx_result.colorspace = __pyx_state[1]; __pyx_result.compression = __pyx_state[2]; __pyx_result.hDPI = __pyx_state[3]; __pyx_result.image = __pyx_state[4]; __pyx_result.image_type = __pyx_state[5]; __pyx_result.interpolate = __pyx_state[6]; __pyx_result.is_inline = __pyx_state[7]; __pyx_result.page_index = __pyx_state[8]; __pyx_result.vDPI = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[10])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFImage__set_state(<PDFImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFImage__set_state(PDFImage __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.bbox = __pyx_state[0]; __pyx_result.colorspace = __pyx_state[1]; __pyx_result.compression = __pyx_state[2]; __pyx_result.hDPI = __pyx_state[3]; __pyx_result.image = __pyx_state[4]; __pyx_result.image_type = __pyx_state[5]; __pyx_result.interpolate = __pyx_state[6]; __pyx_result.is_inline = __pyx_state[7]; __pyx_result.page_index = __pyx_state[8]; __pyx_result.vDPI = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFImage__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_DocumentPageIterator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_25__pyx_unpickle_DocumentPageIterator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_24__pyx_unpickle_DocumentPageIterator[] = "__pyx_unpickle_DocumentPageIterator(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_25__pyx_unpickle_DocumentPageIterator = {"__pyx_unpickle_DocumentPageIterator", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_25__pyx_unpickle_DocumentPageIterator, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_24__pyx_unpickle_DocumentPageIterator};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_25__pyx_unpickle_DocumentPageIterator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_DocumentPageIterator (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DocumentPageIterator", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DocumentPageIterator", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_DocumentPageIterator") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_DocumentPageIterator", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_DocumentPageIterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_24__pyx_unpickle_DocumentPageIterator(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_24__pyx_unpickle_DocumentPageIterator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__118)
  __Pyx_RefNannySetupContext("__pyx_unpickle_DocumentPageIterator", 0);
  __Pyx_TraceCall("__pyx_unpickle_DocumentPageIterator", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x66efdcb:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x66efdcb = (doc, index))" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x66efdcb) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x66efdcb:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x66efdcb = (doc, index))" % __pyx_checksum)
 *     __pyx_result = DocumentPageIterator.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x66efdcb:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x66efdcb = (doc, index))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = DocumentPageIterator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x66, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x66efdcb:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x66efdcb = (doc, index))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x66efdcb = (doc, index))" % __pyx_checksum)
 *     __pyx_result = DocumentPageIterator.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DocumentPageIterator__set_state(<DocumentPageIterator> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_DocumentPageIterator), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x66efdcb = (doc, index))" % __pyx_checksum)
 *     __pyx_result = DocumentPageIterator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_DocumentPageIterator__set_state(<DocumentPageIterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = DocumentPageIterator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DocumentPageIterator__set_state(<DocumentPageIterator> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_DocumentPageIterator__set_state(DocumentPageIterator __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_DocumentPageIterator__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x66efdcb = (doc, index))" % __pyx_checksum)
 *     __pyx_result = DocumentPageIterator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_DocumentPageIterator__set_state(<DocumentPageIterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_DocumentPageIterator__set_state(<DocumentPageIterator> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_DocumentPageIterator__set_state(DocumentPageIterator __pyx_result, tuple __pyx_state):
 *     __pyx_result.doc = __pyx_state[0]; __pyx_result.index = __pyx_state[1]
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_DocumentPageIterator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_DocumentPageIterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_DocumentPageIterator__set_state(<DocumentPageIterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_DocumentPageIterator__set_state(DocumentPageIterator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.doc = __pyx_state[0]; __pyx_result.index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_DocumentPageIterator__set_state(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_DocumentPageIterator__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_DocumentPageIterator__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_DocumentPageIterator__set_state(DocumentPageIterator __pyx_result, tuple __pyx_state):
 *     __pyx_result.doc = __pyx_state[0]; __pyx_result.index = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6pyxpdf_4xpdf_Document))))) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->doc);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->doc));
  __pyx_v___pyx_result->doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->index = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_DocumentPageIterator__set_state(DocumentPageIterator __pyx_result, tuple __pyx_state):
 *     __pyx_result.doc = __pyx_state[0]; __pyx_result.index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 2) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.doc = __pyx_state[0]; __pyx_result.index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(14,0,__PYX_ERR(7, 14, __pyx_L1_error))
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_DocumentPageIterator__set_state(DocumentPageIterator __pyx_result, tuple __pyx_state):
 *     __pyx_result.doc = __pyx_state[0]; __pyx_result.index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_DocumentPageIterator__set_state(<DocumentPageIterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_DocumentPageIterator__set_state(DocumentPageIterator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.doc = __pyx_state[0]; __pyx_result.index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_DocumentPageIterator__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_page_iterator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_27__pyx_unpickle_page_iterator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyxpdf_4xpdf_26__pyx_unpickle_page_iterator[] = "__pyx_unpickle_page_iterator(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_27__pyx_unpickle_page_iterator = {"__pyx_unpickle_page_iterator", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_27__pyx_unpickle_page_iterator, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_26__pyx_unpickle_page_iterator};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_27__pyx_unpickle_page_iterator(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_page_iterator (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_page_iterator", 1, 3, 3, 1); __PYX_ERR(7, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_page_iterator", 1, 3, 3, 2); __PYX_ERR(7, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_page_iterator") < 0)) __PYX_ERR(7, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(7, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_page_iterator", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(7, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_page_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_26__pyx_unpickle_page_iterator(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_26__pyx_unpickle_page_iterator(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__119)
  __Pyx_RefNannySetupContext("__pyx_unpickle_page_iterator", 0);
  __Pyx_TraceCall("__pyx_unpickle_page_iterator", __pyx_f[7], 1, 0, __PYX_ERR(7, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x6bfc9fe:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6bfc9fe = (index, kwargs, output))" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(7, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0x6bfc9fe) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x6bfc9fe:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6bfc9fe = (index, kwargs, output))" % __pyx_checksum)
 *     __pyx_result = page_iterator.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(7, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0x6bfc9fe:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6bfc9fe = (index, kwargs, output))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = page_iterator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(7, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0x6b, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(7, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0x6bfc9fe:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6bfc9fe = (index, kwargs, output))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6bfc9fe = (index, kwargs, output))" % __pyx_checksum)
 *     __pyx_result = page_iterator.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_page_iterator__set_state(<page_iterator> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(7, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_page_iterator), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6bfc9fe = (index, kwargs, output))" % __pyx_checksum)
 *     __pyx_result = page_iterator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_page_iterator__set_state(<page_iterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(7, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = page_iterator.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_page_iterator__set_state(<page_iterator> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_page_iterator__set_state(page_iterator __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(7, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(7, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_page_iterator__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0x6bfc9fe = (index, kwargs, output))" % __pyx_checksum)
 *     __pyx_result = page_iterator.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_page_iterator__set_state(<page_iterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_page_iterator__set_state(<page_iterator> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_page_iterator__set_state(page_iterator __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.kwargs = __pyx_state[1]; __pyx_result.output = __pyx_state[2]
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(7, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_page_iterator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_page_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_page_iterator__set_state(<page_iterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_page_iterator__set_state(page_iterator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.kwargs = __pyx_state[1]; __pyx_result.output = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_page_iterator__set_state(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_page_iterator__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_page_iterator__set_state", __pyx_f[7], 11, 0, __PYX_ERR(7, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_page_iterator__set_state(page_iterator __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.kwargs = __pyx_state[1]; __pyx_result.output = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(7, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->index = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->kwargs);
  __Pyx_DECREF(__pyx_v___pyx_result->kwargs);
  __pyx_v___pyx_result->kwargs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(7, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->output);
  __Pyx_DECREF(__pyx_v___pyx_result->output);
  __pyx_v___pyx_result->output = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_page_iterator__set_state(page_iterator __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.kwargs = __pyx_state[1]; __pyx_result.output = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(7, 13, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(7, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(7, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.kwargs = __pyx_state[1]; __pyx_result.output = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(14,0,__PYX_ERR(7, 14, __pyx_L1_error))
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(7, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_page_iterator__set_state(page_iterator __pyx_result, tuple __pyx_state):
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.kwargs = __pyx_state[1]; __pyx_result.output = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_page_iterator__set_state(<page_iterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_page_iterator__set_state(page_iterator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.kwargs = __pyx_state[1]; __pyx_result.output = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_page_iterator__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_f[7], 31, 0, __PYX_ERR(7, 31, __pyx_L1_error));

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(7, 32, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_f[7], 37, 0, __PYX_ERR(7, 37, __pyx_L1_error));

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(38,0,__PYX_ERR(7, 38, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_f[7], 43, 0, __PYX_ERR(7, 43, __pyx_L1_error));

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(44,0,__PYX_ERR(7, 44, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_f[7], 49, 0, __PYX_ERR(7, 49, __pyx_L1_error));

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(7, 50, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_f[7], 55, 0, __PYX_ERR(7, 55, __pyx_L1_error));

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_TraceLine(56,0,__PYX_ERR(7, 56, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (&((PyTypeObject*)PyExc_Exception)[0])->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  (&((PyTypeObject*)PyExc_Exception)[0])->tp_dealloc(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError(PyObject *o, visitproc v, void *a) {
  int e;
  if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse); else { e = (&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse(o,v,a); if (e) return e; }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_PDFError(PyObject *o) {
  if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_clear); else (&((PyTypeObject*)PyExc_Exception)[0])->tp_clear(o);
  return 0;
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_PDFError[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8PDFError_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_8PDFError_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_PDFError = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.PDFError", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_PDFError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "PDFError(message)\nMain exception base class for pyxpdf.  All other exceptions inherit from\n    this one.\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_PDFError, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pyxpdf_4xpdf_8PDFError_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_PDFError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6pyxpdf_4xpdf_PDFError(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_XPDFError[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_9XPDFError_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_9XPDFError_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_9XPDFError_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_9XPDFError_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_XPDFError = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.XPDFError", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_XPDFError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "XPDFError(message=None)\nBase exception class for all ``xpdf`` errors.\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_XPDFError, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pyxpdf_4xpdf_9XPDFError_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_XPDFError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFSyntaxError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6pyxpdf_4xpdf_XPDFError(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_PDFSyntaxError[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14PDFSyntaxError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_14PDFSyntaxError___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14PDFSyntaxError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_14PDFSyntaxError_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_PDFSyntaxError = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.PDFSyntaxError", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_PDFSyntaxError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Problem in parsing PDF file.\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_PDFSyntaxError, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6pyxpdf_4xpdf_9XPDFError_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_PDFSyntaxError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFConfigError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6pyxpdf_4xpdf_XPDFError(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_XPDFConfigError[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15XPDFConfigError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_15XPDFConfigError___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15XPDFConfigError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_15XPDFConfigError_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_XPDFConfigError = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.XPDFConfigError", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_XPDFConfigError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrong or unsupported ``xpdf`` configuration setting.\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_XPDFConfigError, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6pyxpdf_4xpdf_9XPDFError_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_XPDFConfigError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFIOError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6pyxpdf_4xpdf_XPDFError(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_PDFIOError[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10PDFIOError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_10PDFIOError___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10PDFIOError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_10PDFIOError_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_PDFIOError = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.PDFIOError", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_PDFIOError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Error r/w file\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_PDFIOError, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6pyxpdf_4xpdf_9XPDFError_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_PDFIOError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFPermissionError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6pyxpdf_4xpdf_XPDFError(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_PDFPermissionError[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18PDFPermissionError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_18PDFPermissionError___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18PDFPermissionError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_18PDFPermissionError_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_PDFPermissionError = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.PDFPermissionError", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_PDFPermissionError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "PDF does not have required permissions or is encrypted.\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_PDFPermissionError, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6pyxpdf_4xpdf_9XPDFError_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_PDFPermissionError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFInternalError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6pyxpdf_4xpdf_XPDFError(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_XPDFInternalError[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_17XPDFInternalError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_17XPDFInternalError___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_17XPDFInternalError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_17XPDFInternalError_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_XPDFInternalError = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.XPDFInternalError", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_XPDFInternalError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "``xpdf`` inernal errors.\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_XPDFInternalError, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6pyxpdf_4xpdf_9XPDFError_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_XPDFInternalError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFNotInplementedError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6pyxpdf_4xpdf_XPDFError(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_XPDFNotInplementedError[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_23XPDFNotInplementedError_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_23XPDFNotInplementedError___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_23XPDFNotInplementedError_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_23XPDFNotInplementedError_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.XPDFNotInplementedError", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_XPDFNotInplementedError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "NotImplemented in ``xpdf`` sources\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_XPDFNotInplementedError, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6pyxpdf_4xpdf_9XPDFError_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_XPDFNotInplementedError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf__GlobalParamsConfig __pyx_vtable_6pyxpdf_4xpdf__GlobalParamsConfig;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf__GlobalParamsConfig(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf__GlobalParamsConfig;
  p->cfg_path = Py_None; Py_INCREF(Py_None);
  p->__doc__ = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_5__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf__GlobalParamsConfig(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *p = (struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->cfg_path);
  Py_CLEAR(p->__doc__);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf__GlobalParamsConfig(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *p = (struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)o;
  if (p->cfg_path) {
    e = (*v)(p->cfg_path, a); if (e) return e;
  }
  if (p->__doc__) {
    e = (*v)(p->__doc__, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf__GlobalParamsConfig(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *p = (struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *)o;
  Py_CLEAR(p->cfg_path);
  Py_CLEAR(p->__doc__);
  return 0;
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_base_dir(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_base_dir(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8base_dir_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_ps_paper_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_ps_paper_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14ps_paper_width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_ps_paper_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_ps_paper_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15ps_paper_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_enable_freetype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_enable_freetype(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15enable_freetype_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_anti_alias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_anti_alias(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_10anti_alias_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_vector_anti_alias(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_vector_anti_alias(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17vector_anti_alias_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_encoding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_encoding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13text_encoding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_eol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_eol(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_8text_eol_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_page_breaks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_page_breaks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_16text_page_breaks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_keep_tiny(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_keep_tiny(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14text_keep_tiny_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_print_commands(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_print_commands(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_14print_commands_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_error_quiet(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_error_quiet(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11error_quiet_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_default_text_encoding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_21default_text_encoding_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig___doc__(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig___doc__(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___3__set__(o, v);
  }
  else {
    return __pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_7__doc___5__del__(o);
  }
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf__GlobalParamsConfig[] = {
  {"load_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_1load_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_load_file},
  {"reset", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_3reset, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_2reset},
  {"setup_base_fonts", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_9setup_base_fonts, METH_O, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_8setup_base_fonts},
  {"add_font_file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_11add_font_file, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_10add_font_file},
  {"map_name_to_unicode", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_13map_name_to_unicode, METH_O, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_12map_name_to_unicode},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_15__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_14__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_19_GlobalParamsConfig_17__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_19_GlobalParamsConfig_16__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf__GlobalParamsConfig[] = {
  {(char *)"base_dir", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_base_dir, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_base_dir, (char *)0, 0},
  {(char *)"ps_paper_width", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_ps_paper_width, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_ps_paper_width, (char *)0, 0},
  {(char *)"ps_paper_height", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_ps_paper_height, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_ps_paper_height, (char *)0, 0},
  {(char *)"enable_freetype", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_enable_freetype, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_enable_freetype, (char *)0, 0},
  {(char *)"anti_alias", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_anti_alias, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_anti_alias, (char *)0, 0},
  {(char *)"vector_anti_alias", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_vector_anti_alias, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_vector_anti_alias, (char *)0, 0},
  {(char *)"text_encoding", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_encoding, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_encoding, (char *)0, 0},
  {(char *)"text_eol", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_eol, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_eol, (char *)0, 0},
  {(char *)"text_page_breaks", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_page_breaks, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_page_breaks, (char *)0, 0},
  {(char *)"text_keep_tiny", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_keep_tiny, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_text_keep_tiny, (char *)0, 0},
  {(char *)"print_commands", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_print_commands, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_print_commands, (char *)0, 0},
  {(char *)"error_quiet", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_error_quiet, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_error_quiet, (char *)0, 0},
  {(char *)"default_text_encoding", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig_default_text_encoding, 0, (char *)0, 0},
  {(char *)"__doc__", __pyx_getprop_6pyxpdf_4xpdf_19_GlobalParamsConfig___doc__, __pyx_setprop_6pyxpdf_4xpdf_19_GlobalParamsConfig___doc__, (char *)"__doc__: object", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf._GlobalParamsConfig", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf__GlobalParamsConfig, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf__GlobalParamsConfig, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf__GlobalParamsConfig, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf__GlobalParamsConfig, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf__GlobalParamsConfig, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf__GlobalParamsConfig, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFOutputDevice(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFOutputDevice(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_PDFOutputDevice[] = {
  {"get", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_1get, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_15PDFOutputDevice_get},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_15PDFOutputDevice_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15PDFOutputDevice_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_15PDFOutputDevice_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_PDFOutputDevice = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.PDFOutputDevice", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_PDFOutputDevice), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFOutputDevice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Generic PDF Output Device\n\n    All PDF Output Device inherit from this.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_PDFOutputDevice, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_PDFOutputDevice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextControl __pyx_vtable_6pyxpdf_4xpdf_TextControl;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_TextControl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf_TextControl;
  new((void*)&(p->_c_control)) TextOutputControl();
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_11TextControl_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_TextControl(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *p = (struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->_c_control);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_TextControl[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_11TextControl_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_11TextControl_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_TextControl = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.TextControl", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_TextControl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_TextControl, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Parameters for Text extraction and layout analysis\n\n    Text layout modes:\n        - **reading**\n            Keep the text in reading order. It 'undo' physical layout (columns,\n            hyphenation, etc.) and output the text in reading order.\n        - **physical**\n            Maintain (as best as possible) the original physical layout of\n            the text. If the `fixed_pitch` option is given, character spacing \n            within each line will be determined by the specified character pitch.\n        - **table**\n            It is similar to `physical` layout mode, but optimized for\n            tabular data, with the goal of keeping rows and columns  aligned\n            (at the expense of inserting extra whitespace). If the `fixed_pitch`\n            option is given, character spacing  within  each  line  will  be\n            determined by the specified character pitch.\n        - **simple**\n            Similar to `physical` layout, but optimized for simple one-column\n            pages. This mode will do a better job of maintaining horizontal\n            spacing, but it will only work properly with a single column\n            of text.\n        - **lineprinter**\n            Line printer mode uses a strict fixed character pitch and height\n            layout. That is, the page is broken into a grid, and characters\n            are placed into that grid. If the grid spacing is too small for the\n            actual characters, the result is extra  whitespace. If the grid\n            spacing is too large, the result is missing whitespace.  The\n            grid spacing can be specified using the  `fixed_pitch` and\n            `fixed_line_spacing` options. If one or both are not given on the\n            xpdf will attempt to compute appropriate value(s).\n        - **raw**\n            Keep the text in content stream order. Depending on how the PDF\n            file was generated, this may or may not be useful.\n\n    Parameters\n    ----------""\n    mode : {\"reading\", \"table\", \"simple\", \"physical\", \"lineprinter\", \"raw\"}\n        text analysis/extraction layout mode\n    fixed_pitch : float, optional\n        Specify the character pitch (character width), for\n        `physical` , `table` ,or `lineprinter` mode. This is ignored\n        in all other modes.\n        (default is 0, means approximate characters' pitch will be calculated)\n    fixed_line_spacing : float, optional\n        Specify the line spacing, in  points, for `lineprinter` mode.\n        This is ignored in all other modes.\n        (default is `0`, means approximate line spacing will be calculated)\n    enable_html : bool, optional\n        enable extra proccessing for html. (default is :obj:`False`)\n    clip_text : bool, optional\n        Text which is hidden because of clipping is removed before doing\n        layout, and then added back in. This can be helpful for tables\n        where clipped (invisible) text would overlap the next column.\n        (default is :obj:`False`)\n    discard_clipped : bool, optional\n        discard all clipped characters\n        (default is :obj:`False`)\n    discard_diagonal : bool, optional\n        Diagonal text, i.e., text that is not close to one of the 0, 90,\n        180, or 270 degree axes, is discarded. This is useful to skip\n        watermarks drawn on top of body text, etc.\n        (default is :obj:`False`)\n    discard_invisible : bool, optional\n        discard all invinsible characters\n        (default is :obj:`False`)\n    insert_bom : bool, optional\n        Insert a Unicode byte order marker (BOM) at the start of the\n        text output.\n    margin_left : float, optional\n        Specifies the left margin. Text in the left margin\n        (i.e., within that many points of the left edge of the page) is\n        discarded.\n        (default is `0`)\n    margin_right : float, optional\n        Specifies the right margin. Text in the right margin\n        (i.e., within that ""many points of the right edge of the page) is\n        discarded.\n        (default is `0`)\n    margin_top : float, optional\n        Specifies the top margin. Text in the top margin\n        (i.e., within that many points of the top edge of the page) is\n        discarded.\n        (default is `0`)\n    margin_bottom : float, optional\n        Specifies the bottom margin. Text in the bottom margin\n        (i.e., within that many points of the bottom edge of the page) is\n        discarded.\n        (default is `0`)\n\n    Raises\n    ------\n    ValueError\n        If `mode` invalid\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_TextControl, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_TextControl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_TextOutput __pyx_vtable_6pyxpdf_4xpdf_TextOutput;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_TextOutput(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *p;
  PyObject *o = __pyx_tp_new_6pyxpdf_4xpdf_PDFOutputDevice(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf_TextOutput;
  new((void*)&(p->_c_textdev)) std::unique_ptr<TextOutputDev> ();
  new((void*)&(p->_out_str)) std::unique_ptr<std::string> ();
  new((void*)&(p->_c_text_pages)) std::vector<std::unique_ptr<TextPage> > ();
  p->doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)Py_None); Py_INCREF(Py_None);
  p->control = ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)Py_None); Py_INCREF(Py_None);
  p->_cache_texts = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_10TextOutput_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_TextOutput(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *p = (struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_c_textdev);
  __Pyx_call_destructor(p->_out_str);
  __Pyx_call_destructor(p->_c_text_pages);
  Py_CLEAR(p->doc);
  Py_CLEAR(p->control);
  Py_CLEAR(p->_cache_texts);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFOutputDevice(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_TextOutput(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *p = (struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)o;
  e = ((likely(__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice)) ? ((__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_traverse) ? __pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6pyxpdf_4xpdf_TextOutput)); if (e) return e;
  if (p->doc) {
    e = (*v)(((PyObject *)p->doc), a); if (e) return e;
  }
  if (p->control) {
    e = (*v)(((PyObject *)p->control), a); if (e) return e;
  }
  if (p->_cache_texts) {
    e = (*v)(p->_cache_texts, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_TextOutput(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *p = (struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *)o;
  if (likely(__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice)) { if (__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_clear) __pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6pyxpdf_4xpdf_TextOutput);
  Py_CLEAR(p->doc);
  Py_CLEAR(p->control);
  Py_CLEAR(p->_cache_texts);
  return 0;
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_10TextOutput_doc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_10TextOutput_3doc_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_10TextOutput_control(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_10TextOutput_7control_1__get__(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_TextOutput[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_11__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_10TextOutput_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_10TextOutput_13__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_10TextOutput_12__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf_TextOutput[] = {
  {(char *)"doc", __pyx_getprop_6pyxpdf_4xpdf_10TextOutput_doc, 0, (char *)0, 0},
  {(char *)"control", __pyx_getprop_6pyxpdf_4xpdf_10TextOutput_control, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_TextOutput = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.TextOutput", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_TextOutput, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pyxpdf_4xpdf_10TextOutput_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Text extract/analysis PDF Output device\n\n    Extract text and do layout analysis on from PDF :class:`Document`\n    while caching results. Page texts are cached for faster access.\n    Page texts are lazy loaded, they are loaded only when you first\n    access them.\n\n    Parameters\n    ----------\n    doc : Document\n        PDF Document for this output device\n    control : TextControl, optional\n        An :class:`TextControl` object for settings to adjust TextControl\n        extraction/analysis.\n        (default is :obj:`None`)\n    kwargs\n        :class:`TextControl` parameters which will be used if `control` is\n        not provided.\n\n    Attributes\n    ----------\n    doc : Document, readonly\n        Parent PDF Document\n    control : TextControl\n        Layout settings for output device\n\n    Raises\n    ------\n    XPDFInternalError\n        If cannot initialize internal `xpdf` objects will settings provided\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_TextOutput, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_TextOutput, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_TextOutput, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf_TextOutput, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_TextOutput, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_RawImageControl(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_RawImageControl(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_RawImageControl[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15RawImageControl_1__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_15RawImageControl___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_15RawImageControl_3__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_15RawImageControl_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_RawImageControl = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.RawImageControl", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_RawImageControl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_RawImageControl, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_RawImageControl, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_RawImageControl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_RawImageOutput __pyx_vtable_6pyxpdf_4xpdf_RawImageOutput;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_RawImageOutput(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *p;
  PyObject *o = __pyx_tp_new_6pyxpdf_4xpdf_PDFOutputDevice(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf_RawImageOutput;
  new((void*)&(p->_c_splash_dev)) std::unique_ptr<SplashOutputDev> ();
  p->mode = Py_None; Py_INCREF(Py_None);
  p->doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_RawImageOutput(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *p = (struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_c_splash_dev);
  Py_CLEAR(p->mode);
  Py_CLEAR(p->doc);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFOutputDevice(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_RawImageOutput(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *p = (struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)o;
  e = ((likely(__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice)) ? ((__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_traverse) ? __pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6pyxpdf_4xpdf_RawImageOutput)); if (e) return e;
  if (p->mode) {
    e = (*v)(p->mode, a); if (e) return e;
  }
  if (p->doc) {
    e = (*v)(((PyObject *)p->doc), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_RawImageOutput(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *p = (struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *)o;
  if (likely(__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice)) { if (__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_clear) __pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6pyxpdf_4xpdf_RawImageOutput);
  Py_CLEAR(p->mode);
  Py_CLEAR(p->doc);
  return 0;
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_use_cropbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_14RawImageOutput_use_cropbox(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_11use_cropbox_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_scale_before_rotation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_14RawImageOutput_scale_before_rotation(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_21scale_before_rotation_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_resolution_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_14RawImageOutput_resolution_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_resolution_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_14RawImageOutput_resolution_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_12resolution_x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_mode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_4mode_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_doc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_3doc_1__get__(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_RawImageOutput[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_5__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_14RawImageOutput_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14RawImageOutput_7__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_14RawImageOutput_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf_RawImageOutput[] = {
  {(char *)"use_cropbox", __pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_use_cropbox, __pyx_setprop_6pyxpdf_4xpdf_14RawImageOutput_use_cropbox, (char *)"use_cropbox: 'bool'", 0},
  {(char *)"scale_before_rotation", __pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_scale_before_rotation, __pyx_setprop_6pyxpdf_4xpdf_14RawImageOutput_scale_before_rotation, (char *)"scale_before_rotation: 'bool'", 0},
  {(char *)"resolution_y", __pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_resolution_y, __pyx_setprop_6pyxpdf_4xpdf_14RawImageOutput_resolution_y, (char *)"resolution_y: 'double'", 0},
  {(char *)"resolution_x", __pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_resolution_x, __pyx_setprop_6pyxpdf_4xpdf_14RawImageOutput_resolution_x, (char *)"resolution_x: 'double'", 0},
  {(char *)"mode", __pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_mode, 0, (char *)0, 0},
  {(char *)"doc", __pyx_getprop_6pyxpdf_4xpdf_14RawImageOutput_doc, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_RawImageOutput = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.RawImageOutput", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_RawImageOutput, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Render PDF page as `Image`.\n\n    Convert the PDF page to uncompressed raw image.\n\n    `paper_color` depends on the color mode of image, if\n    color mode is `RGB` or `RGBA` than `paper_color` should\n    be a 3 int(0-255) tuple of RGB values, similarly for `CMYK`\n    it should be 4 int(0-255) tuple of CMYK color values.\n\n    If you are using image mode with alpha channel and want transparent\n    background then set `no_composite` to `True`\n\n    Parameters\n    ----------\n    doc : Document\n        PDF Document for this output device\n    mode : {\"RGB\", \"RGBA\", \"L\", \"LA\", \"1\", \"CMYK\"}, optional\n        image modes for output rendered image,\n        equivalent to Pillow's image modes.\n        (default is 'RGB')\n    paper_color : tuple of int, optional\n        paper color for rendered pdf page\n        (default is :obj:`None`, means 'white' paper color)\n    resolution : float, optional\n        X and Y resolution of output image in DPI\n        (default is 150)\n    resolution_x : float, optional\n        X resolution in DPI\n        (default is 150)\n    resolution_y : float, optional\n        X resolution in DPI\n        (default is 150)\n    anti_alias : bool, optional\n        enable font anti-aliasing for rendering\n        (default is `True`)\n    no_composite : bool, optional\n        disables the final composite (with the opaque paper color),\n        resulting in transparent output.\n        (default is `False`)\n    use_cropbox : bool, optional\n        use the crop box rather than media box\n        (default is `False`)\n    scale_before_rotation : bool, optional\n        resize dimensions before rotation of rotated pdfs\n        (default is `False`)\n\n    Note\n    ----\n    Additionally you can enable :attr:`Config.vector_anti_alias` for better\n    anti-alias effect.\n\n    Warning\n    -------\n    Avoid '1' image mode, as of now its quite buggy and fonts are not rendered properly\n    in it. Instead use 'L' for black and ""white.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_RawImageOutput, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_RawImageOutput, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_RawImageOutput, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf_RawImageOutput, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_RawImageOutput, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImage __pyx_vtable_6pyxpdf_4xpdf_PDFImage;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFImage(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf_PDFImage;
  p->bbox = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->colorspace = Py_None; Py_INCREF(Py_None);
  p->image_type = Py_None; Py_INCREF(Py_None);
  p->compression = Py_None; Py_INCREF(Py_None);
  p->image = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFImage(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *p = (struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->bbox);
  Py_CLEAR(p->colorspace);
  Py_CLEAR(p->image_type);
  Py_CLEAR(p->compression);
  Py_CLEAR(p->image);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_PDFImage(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *p = (struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)o;
  if (p->bbox) {
    e = (*v)(p->bbox, a); if (e) return e;
  }
  if (p->colorspace) {
    e = (*v)(p->colorspace, a); if (e) return e;
  }
  if (p->image_type) {
    e = (*v)(p->image_type, a); if (e) return e;
  }
  if (p->compression) {
    e = (*v)(p->compression, a); if (e) return e;
  }
  if (p->image) {
    e = (*v)(p->image, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_PDFImage(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *p = (struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *)o;
  Py_CLEAR(p->bbox);
  Py_CLEAR(p->colorspace);
  Py_CLEAR(p->image_type);
  Py_CLEAR(p->compression);
  Py_CLEAR(p->image);
  return 0;
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_bbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_4bbox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_page_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_10page_index_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_interpolate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_11interpolate_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_is_inline(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_9is_inline_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_hDPI(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_4hDPI_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_vDPI(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_4vDPI_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_colorspace(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_10colorspace_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_image_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_10image_type_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_compression(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_11compression_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8PDFImage_image(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8PDFImage_5image_1__get__(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_PDFImage[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFImage_3__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8PDFImage_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFImage_5__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_8PDFImage_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf_PDFImage[] = {
  {(char *)"bbox", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_bbox, 0, (char *)0, 0},
  {(char *)"page_index", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_page_index, 0, (char *)0, 0},
  {(char *)"interpolate", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_interpolate, 0, (char *)0, 0},
  {(char *)"is_inline", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_is_inline, 0, (char *)0, 0},
  {(char *)"hDPI", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_hDPI, 0, (char *)0, 0},
  {(char *)"vDPI", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_vDPI, 0, (char *)0, 0},
  {(char *)"colorspace", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_colorspace, 0, (char *)0, 0},
  {(char *)"image_type", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_image_type, 0, (char *)0, 0},
  {(char *)"compression", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_compression, 0, (char *)0, 0},
  {(char *)"image", __pyx_getprop_6pyxpdf_4xpdf_8PDFImage_image, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_PDFImage = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.PDFImage", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_PDFImage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFImage, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pyxpdf_4xpdf_8PDFImage_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFImage, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFImage, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_PDFImage, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf_PDFImage, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_PDFImage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_PDFImageOutput __pyx_vtable_6pyxpdf_4xpdf_PDFImageOutput;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFImageOutput(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf_PDFImageOutput;
  p->doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFImageOutput(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *p = (struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->doc);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_PDFImageOutput(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *p = (struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *)o;
  if (p->doc) {
    e = (*v)(((PyObject *)p->doc), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_PDFImageOutput(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *p = (struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *)o;
  Py_CLEAR(p->doc);
  return 0;
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_14PDFImageOutput_doc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_3doc_1__get__(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_PDFImageOutput[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_5__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_14PDFImageOutput_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_14PDFImageOutput_7__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_14PDFImageOutput_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf_PDFImageOutput[] = {
  {(char *)"doc", __pyx_getprop_6pyxpdf_4xpdf_14PDFImageOutput_doc, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_PDFImageOutput = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.PDFImageOutput", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFImageOutput, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Extract the images from PDF Document\n\n    Extract and decode images inside a PDF and output them as\n    :class:`~PIL.Image.Image` object.\n\n    Parameters\n    ----------\n    doc : Document\n        PDF Document for this output device\n\n    Note\n    ----\n    Requires Optional dependency ``Pillow`` module\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFImageOutput, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFImageOutput, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_PDFImageOutput, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf_PDFImageOutput, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_PDFImageOutput, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_Document __pyx_vtable_6pyxpdf_4xpdf_Document;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_Document(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_Document *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf_Document;
  p->doc_data = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_pages_cache = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_8Document_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_Document(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_Document *p = (struct __pyx_obj_6pyxpdf_4xpdf_Document *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_6pyxpdf_4xpdf_8Document_5__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->doc_data);
  Py_CLEAR(p->_pages_cache);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_Document(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf_Document *p = (struct __pyx_obj_6pyxpdf_4xpdf_Document *)o;
  if (p->_pages_cache) {
    e = (*v)(p->_pages_cache, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_Document(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_Document *p = (struct __pyx_obj_6pyxpdf_4xpdf_Document *)o;
  Py_CLEAR(p->_pages_cache);
  return 0;
}
static PyObject *__pyx_sq_item_6pyxpdf_4xpdf_Document(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_filename(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_8filename_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_has_page_labels(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_15has_page_labels_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_num_pages(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_9num_pages_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_pdf_version(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_11pdf_version_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_is_linearized(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_13is_linearized_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_is_encrypted(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_12is_encrypted_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_ok_to_print(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_11ok_to_print_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_ok_to_change(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_12ok_to_change_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_ok_to_copy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_10ok_to_copy_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_8Document_ok_to_add_notes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_8Document_15ok_to_add_notes_1__get__(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_Document[] = {
  {"info", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8Document_17info, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8Document_16info},
  {"xmp_metadata", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8Document_19xmp_metadata, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8Document_18xmp_metadata},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8Document_25__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_8Document_24__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8Document_27__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_8Document_26__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf_Document[] = {
  {(char *)"filename", __pyx_getprop_6pyxpdf_4xpdf_8Document_filename, 0, (char *)"str: name of the file from which pdf document was loaded.\n\n        If pdf was loaded from :term:`file-like` object then it will be a\n        empty `str`.\n        ", 0},
  {(char *)"has_page_labels", __pyx_getprop_6pyxpdf_4xpdf_8Document_has_page_labels, 0, (char *)"bool: whether pdf has page labels or not\n        ", 0},
  {(char *)"num_pages", __pyx_getprop_6pyxpdf_4xpdf_8Document_num_pages, 0, (char *)"int: total pages in pdf\n        ", 0},
  {(char *)"pdf_version", __pyx_getprop_6pyxpdf_4xpdf_8Document_pdf_version, 0, (char *)"float: version of PDF standard pdf comply with\n        ", 0},
  {(char *)"is_linearized", __pyx_getprop_6pyxpdf_4xpdf_8Document_is_linearized, 0, (char *)"bool: whether pdf is lineralised or not\n        ", 0},
  {(char *)"is_encrypted", __pyx_getprop_6pyxpdf_4xpdf_8Document_is_encrypted, 0, (char *)"bool: whether pdf is encrypted or not\n\n        Warning\n        -------\n        Due to a bug in xpdf sources sometimes even non-encrypted\n        PDF documents return :obj:`True`\n        ", 0},
  {(char *)"ok_to_print", __pyx_getprop_6pyxpdf_4xpdf_8Document_ok_to_print, 0, (char *)"bool: PDF print permission.\n\n        Whether document can be printed or not.\n        ", 0},
  {(char *)"ok_to_change", __pyx_getprop_6pyxpdf_4xpdf_8Document_ok_to_change, 0, (char *)"bool: PDF change permission\n\n        Whether PDF can be modified or not. Modifications include:\n         - Inserting, Deleting, Rotating pages.\n         - Commenting, filling in form fields, and signing existing\n           signature fields.\n\n        ", 0},
  {(char *)"ok_to_copy", __pyx_getprop_6pyxpdf_4xpdf_8Document_ok_to_copy, 0, (char *)"bool: PDF copy permission.\n\n        Whether pdf content can be copied or not.\n\n        Note\n        ----\n        PDF copy permission is required for extraction of text and images\n        from document.\n        ", 0},
  {(char *)"ok_to_add_notes", __pyx_getprop_6pyxpdf_4xpdf_8Document_ok_to_add_notes, 0, (char *)"bool: PDF add notes permission\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Document = {
  __pyx_pw_6pyxpdf_4xpdf_8Document_11__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6pyxpdf_4xpdf_Document, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Document = {
  __pyx_pw_6pyxpdf_4xpdf_8Document_11__len__, /*mp_length*/
  __pyx_pw_6pyxpdf_4xpdf_8Document_13__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_Document = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.Document", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_Document), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_Document, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pyxpdf_4xpdf_8Document_7__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Document, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Document, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6pyxpdf_4xpdf_8Document_9__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Document(pdf, ownerpass=None, userpass=None)\nThis class represents a PDF Document.\n\n    :class:`Page` objects can be accessed though indexing, slicing.\n\n    If `pdf` parameter is a :term:`file-like` object then make sure that\n    it is open in 'b' binary mode as `Document` does not check for it.\n\n    Examples\n    --------\n    >>> doc = Document(\"~/sample.pdf\")\n\n    Total pages in Document\n\n    >>> len(doc)\n    17\n\n    Access page by index\n\n    >>> page1 = doc[0]\n    <Page[0]>\n\n    Access page by label\n\n    >>> cover_page = doc['Cover1']\n    <Page[0](label='Cover1')>\n\n    Get pages slice (all even number pages)\n\n    >>> even_pages = doc[0::2]\n    [<Page[0]>, <Page[2]>, <Page[4]>, ...]\n\n    Iterate over pages\n\n    >>> for page in doc:\n    ...     print(page)\n    <Page[0]>\n    <Page[1]>\n    <Page[2]>\n    ...\n\n\n    Parameters\n    ----------\n    pdf : str or :term:`file-like`\n        Path of pdf file to load or a :term:`file-like` object.\n    ownerpass : str, optional\n        Owner password of pdf file, if encrypted (default :obj:`None`)\n    userpass : str, optional\n        User password of pdf file, if encrypted (default :obj:`None`)\n\n    Raises\n    ------\n    PDFPermissionError\n        If failed to decrypt encrypted PDF using given passwords\n    PDFIOError\n        If failed to load file from given file path\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_Document, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_Document, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pyxpdf_4xpdf_8Document_15__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_Document, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf_Document, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pyxpdf_4xpdf_8Document_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_Document, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_DocumentPageIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)o);
  p->doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_DocumentPageIterator(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *p = (struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->doc);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_DocumentPageIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *p = (struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)o;
  if (p->doc) {
    e = (*v)(((PyObject *)p->doc), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_DocumentPageIterator(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *p = (struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator *)o;
  Py_CLEAR(p->doc);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_5__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_5__next__(self);}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_DocumentPageIterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_7__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_20DocumentPageIterator_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_9__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_20DocumentPageIterator_8__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_DocumentPageIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.DocumentPageIterator", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_DocumentPageIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_DocumentPageIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "DocumentPageIterator(doc)", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_DocumentPageIterator, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_DocumentPageIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_3__iter__, /*tp_iter*/
  __pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_5__next__, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_DocumentPageIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pyxpdf_4xpdf_20DocumentPageIterator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_DocumentPageIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_Page __pyx_vtable_6pyxpdf_4xpdf_Page;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_Page(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_Page *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_Page *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf_Page;
  new((void*)&(p->textpage)) std::unique_ptr<TextPage> ();
  p->label = Py_None; Py_INCREF(Py_None);
  p->doc = ((struct __pyx_obj_6pyxpdf_4xpdf_Document *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_4Page_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_Page(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_Page *p = (struct __pyx_obj_6pyxpdf_4xpdf_Page *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->textpage);
  Py_CLEAR(p->label);
  Py_CLEAR(p->doc);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_Page(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf_Page *p = (struct __pyx_obj_6pyxpdf_4xpdf_Page *)o;
  if (p->label) {
    e = (*v)(p->label, a); if (e) return e;
  }
  if (p->doc) {
    e = (*v)(((PyObject *)p->doc), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_Page(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_Page *p = (struct __pyx_obj_6pyxpdf_4xpdf_Page *)o;
  Py_CLEAR(p->label);
  Py_CLEAR(p->doc);
  return 0;
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_rotation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_8rotation_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_is_cropped(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_10is_cropped_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_media_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_12media_height_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_media_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_11media_width_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_crop_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_11crop_height_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_crop_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_10crop_width_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_mediabox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_8mediabox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_cropbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_7cropbox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_bleedbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_8bleedbox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_trimbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_7trimbox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_artbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_6artbox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_5index_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_5label_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_4Page_doc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_4Page_3doc_1__get__(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_Page[] = {
  {"find_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_4Page_7find_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_4Page_6find_text},
  {"find_all_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_4Page_9find_all_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_4Page_8find_all_text},
  {"text_bytes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_4Page_12text_bytes, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_4Page_11text_bytes},
  {"text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_4Page_14text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyxpdf_4xpdf_4Page_13text},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_4Page_16__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_4Page_15__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_4Page_18__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_4Page_17__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf_Page[] = {
  {(char *)"rotation", __pyx_getprop_6pyxpdf_4xpdf_4Page_rotation, 0, (char *)"int: page rotation in degrees\n        ", 0},
  {(char *)"is_cropped", __pyx_getprop_6pyxpdf_4xpdf_4Page_is_cropped, 0, (char *)"bool: whether page is cropped or not\n        ", 0},
  {(char *)"media_height", __pyx_getprop_6pyxpdf_4xpdf_4Page_media_height, 0, (char *)"float: page mediabox height\n        ", 0},
  {(char *)"media_width", __pyx_getprop_6pyxpdf_4xpdf_4Page_media_width, 0, (char *)"float: page mediabox width\n        ", 0},
  {(char *)"crop_height", __pyx_getprop_6pyxpdf_4xpdf_4Page_crop_height, 0, (char *)"float: page cropbox width\n        ", 0},
  {(char *)"crop_width", __pyx_getprop_6pyxpdf_4xpdf_4Page_crop_width, 0, (char *)"float: page cropbox width\n        ", 0},
  {(char *)"mediabox", __pyx_getprop_6pyxpdf_4xpdf_4Page_mediabox, 0, (char *)"tuple of float, (x1, y1, x2, y2): Page's media box cordinates\n        ", 0},
  {(char *)"cropbox", __pyx_getprop_6pyxpdf_4xpdf_4Page_cropbox, 0, (char *)"tuple of float, (x1, y1, x2, y2): Page's crop box cordinates\n        ", 0},
  {(char *)"bleedbox", __pyx_getprop_6pyxpdf_4xpdf_4Page_bleedbox, 0, (char *)"tuple of float, (x1, y1, x2, y2): Page's bleed box cordinates\n        ", 0},
  {(char *)"trimbox", __pyx_getprop_6pyxpdf_4xpdf_4Page_trimbox, 0, (char *)"tuple of float, (x1, y1, x2, y2): Page's trim box cordinates\n        ", 0},
  {(char *)"artbox", __pyx_getprop_6pyxpdf_4xpdf_4Page_artbox, 0, (char *)"tuple of float, (x1, y1, x2, y2): Page's art box cordinates\n        ", 0},
  {(char *)"index", __pyx_getprop_6pyxpdf_4xpdf_4Page_index, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_6pyxpdf_4xpdf_4Page_label, 0, (char *)0, 0},
  {(char *)"doc", __pyx_getprop_6pyxpdf_4xpdf_4Page_doc, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_Page = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.Page", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_Page), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_Page, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6pyxpdf_4xpdf_4Page_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Page(doc, index)\nRepresents a PDF page\n\n    Examples\n    --------\n    >>> page1 = doc[1]\n\n    Page index and label (if any)\n\n    >>> page1.index\n    1\n    >>> page1.label\n    'Cover1'\n\n    Page BBox(s)\n\n    >>> page1.mediabox\n    (0.0, 0.0, 612.0, 792.0)\n    >>> page1.cropbox\n    (0.0, 0.0, 612.0, 792.0)\n    >>> page1.mediabox\n    (0.0, 0.0, 612.0, 792.0)\n\n    Find text location in Page\n\n    >>> page1.find_text(\"Hello\")\n    (100.0, 74.768, 117.328, 96.968)\n\n\n    Parameters\n    ----------\n    doc : Document\n        Parent pdf Document\n    index : int\n        index of pdf Page\n\n    Raises\n    ------\n    IndexError\n        If `index` parameter is outside page range\n\n    Attributes\n    ----------\n    doc : Document, readonly\n        Parent pdf document\n\n    index : int, readonly\n    label : str, readonly\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_Page, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_Page, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_Page, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf_Page, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pyxpdf_4xpdf_4Page_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_Page, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_page_iterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)o);
  p->output = Py_None; Py_INCREF(Py_None);
  p->kwargs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_page_iterator(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *p = (struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->output);
  Py_CLEAR(p->kwargs);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_page_iterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *p = (struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)o;
  if (p->output) {
    e = (*v)(p->output, a); if (e) return e;
  }
  if (p->kwargs) {
    e = (*v)(p->kwargs, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_page_iterator(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *p = (struct __pyx_obj_6pyxpdf_4xpdf_page_iterator *)o;
  Py_CLEAR(p->output);
  Py_CLEAR(p->kwargs);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_6pyxpdf_4xpdf_13page_iterator_5__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_6pyxpdf_4xpdf_13page_iterator_5__next__(self);}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_page_iterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_6pyxpdf_4xpdf_13page_iterator_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_13page_iterator_7__reduce_cython__, METH_NOARGS, __pyx_doc_6pyxpdf_4xpdf_13page_iterator_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_13page_iterator_9__setstate_cython__, METH_O, __pyx_doc_6pyxpdf_4xpdf_13page_iterator_8__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_page_iterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.page_iterator", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_page_iterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_page_iterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "page_iterator(output, **kwargs)\nIterate over PDF output devices by page.\n\n    Parameters\n    ----------\n    output\n        PDF output device to iterate over\n    kwargs\n        All the optional arguments to pass to `get()` method of output device\n\n    Examples\n    --------\n    Iterate pages text from :class:`TextOutput`\n\n    >>> text_out = TextOutput(doc)\n    >>> for page_text in page_iterator(text_out)\n    ...     print(page_text)\n\n    Iterate images from :class:`RawImageOutput` with specific `crop_box`\n\n    >>> image_out = RawImageOutput(doc)\n    >>> for image in page_iterator(image_out, crop_box=(0,0,500,500)):\n    ...     image.show()    # pillow image\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_page_iterator, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_page_iterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6pyxpdf_4xpdf_13page_iterator_3__iter__, /*tp_iter*/
  __pyx_pw_6pyxpdf_4xpdf_13page_iterator_5__next__, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_page_iterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pyxpdf_4xpdf_13page_iterator_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_page_iterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *__pyx_freelist_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text[8];
static int __pyx_freecount_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text = 0;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text)))) {
    o = (PyObject*)__pyx_freelist_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text[--__pyx_freecount_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text];
    memset(o, 0, sizeof(struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *p = (struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_case_sensitive);
  Py_CLEAR(p->__pyx_v_res);
  Py_CLEAR(p->__pyx_v_rotation);
  Py_CLEAR(p->__pyx_v_search_box);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_text);
  Py_CLEAR(p->__pyx_v_wholeword);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text)))) {
    __pyx_freelist_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text[__pyx_freecount_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text++] = ((struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *p = (struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text *)o;
  if (p->__pyx_v_case_sensitive) {
    e = (*v)(p->__pyx_v_case_sensitive, a); if (e) return e;
  }
  if (p->__pyx_v_res) {
    e = (*v)(p->__pyx_v_res, a); if (e) return e;
  }
  if (p->__pyx_v_rotation) {
    e = (*v)(p->__pyx_v_rotation, a); if (e) return e;
  }
  if (p->__pyx_v_search_box) {
    e = (*v)(p->__pyx_v_search_box, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_text) {
    e = (*v)(p->__pyx_v_text, a); if (e) return e;
  }
  if (p->__pyx_v_wholeword) {
    e = (*v)(p->__pyx_v_wholeword, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.__pyx_scope_struct__find_all_text", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_xpdf(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_xpdf},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "xpdf",
    __pyx_k_XPDF_objects_warpper_module_This, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    (freefunc)__pyx_module_cleanup /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {&__pyx_n_u_BGR, __pyx_k_BGR, sizeof(__pyx_k_BGR), 0, 1, 0, 1},
  {&__pyx_n_u_BGRA, __pyx_k_BGRA, sizeof(__pyx_k_BGRA), 0, 1, 0, 1},
  {&__pyx_n_u_CMYK, __pyx_k_CMYK, sizeof(__pyx_k_CMYK), 0, 1, 0, 1},
  {&__pyx_kp_u_Cannot_allocate_memory_for_TextO, __pyx_k_Cannot_allocate_memory_for_TextO, sizeof(__pyx_k_Cannot_allocate_memory_for_TextO), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_allocate_memory_for_inter, __pyx_k_Cannot_allocate_memory_for_inter, sizeof(__pyx_k_Cannot_allocate_memory_for_inter), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_create_GlobalParamsConfig, __pyx_k_Cannot_create_GlobalParamsConfig, sizeof(__pyx_k_Cannot_create_GlobalParamsConfig), 0, 1, 0, 0},
  {&__pyx_n_s_Config, __pyx_k_Config, sizeof(__pyx_k_Config), 0, 0, 1, 1},
  {&__pyx_n_u_Config, __pyx_k_Config, sizeof(__pyx_k_Config), 0, 1, 0, 1},
  {&__pyx_kp_u_Copying_of_text_from_this_docume, __pyx_k_Copying_of_text_from_this_docume, sizeof(__pyx_k_Copying_of_text_from_this_docume), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_convert_to_utf_32_byte, __pyx_k_Could_not_convert_to_utf_32_byte, sizeof(__pyx_k_Could_not_convert_to_utf_32_byte), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_find_page_with_label_k, __pyx_k_Could_not_find_page_with_label_k, sizeof(__pyx_k_Could_not_find_page_with_label_k), 0, 1, 0, 0},
  {&__pyx_n_s_Document, __pyx_k_Document, sizeof(__pyx_k_Document), 0, 0, 1, 1},
  {&__pyx_n_u_Document, __pyx_k_Document, sizeof(__pyx_k_Document), 0, 1, 0, 1},
  {&__pyx_n_s_DocumentPageIterator, __pyx_k_DocumentPageIterator, sizeof(__pyx_k_DocumentPageIterator), 0, 0, 1, 1},
  {&__pyx_n_s_DocumentPageIterator___reduce_cy, __pyx_k_DocumentPageIterator___reduce_cy, sizeof(__pyx_k_DocumentPageIterator___reduce_cy), 0, 0, 1, 1},
  {&__pyx_n_s_DocumentPageIterator___setstate, __pyx_k_DocumentPageIterator___setstate, sizeof(__pyx_k_DocumentPageIterator___setstate), 0, 0, 1, 1},
  {&__pyx_n_s_Document___reduce_cython, __pyx_k_Document___reduce_cython, sizeof(__pyx_k_Document___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_Document___setstate_cython, __pyx_k_Document___setstate_cython, sizeof(__pyx_k_Document___setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_u_Document_fname, __pyx_k_Document_fname, sizeof(__pyx_k_Document_fname), 0, 1, 0, 0},
  {&__pyx_kp_u_Document_fname_pages, __pyx_k_Document_fname_pages, sizeof(__pyx_k_Document_fname_pages), 0, 1, 0, 0},
  {&__pyx_n_s_Document_info, __pyx_k_Document_info, sizeof(__pyx_k_Document_info), 0, 0, 1, 1},
  {&__pyx_n_s_Document_text, __pyx_k_Document_text, sizeof(__pyx_k_Document_text), 0, 0, 1, 1},
  {&__pyx_n_s_Document_text_bytes, __pyx_k_Document_text_bytes, sizeof(__pyx_k_Document_text_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_Document_xmp_metadata, __pyx_k_Document_xmp_metadata, sizeof(__pyx_k_Document_xmp_metadata), 0, 0, 1, 1},
  {&__pyx_n_s_ErrorCodeMapping, __pyx_k_ErrorCodeMapping, sizeof(__pyx_k_ErrorCodeMapping), 0, 0, 1, 1},
  {&__pyx_n_s_ErrorCodesDict, __pyx_k_ErrorCodesDict, sizeof(__pyx_k_ErrorCodesDict), 0, 0, 1, 1},
  {&__pyx_kp_u_Error_Bad_PDF_Page_Number, __pyx_k_Error_Bad_PDF_Page_Number, sizeof(__pyx_k_Error_Bad_PDF_Page_Number), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Bad_Printer, __pyx_k_Error_Bad_Printer, sizeof(__pyx_k_Error_Bad_Printer), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_File_Highlight, __pyx_k_Error_File_Highlight, sizeof(__pyx_k_Error_File_Highlight), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_None, __pyx_k_Error_None, sizeof(__pyx_k_Error_None), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Opening_file, __pyx_k_Error_Opening_file, sizeof(__pyx_k_Error_Opening_file), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_PDF_Permissions, __pyx_k_Error_PDF_Permissions, sizeof(__pyx_k_Error_PDF_Permissions), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Parsing_PDF_Catalog, __pyx_k_Error_Parsing_PDF_Catalog, sizeof(__pyx_k_Error_Parsing_PDF_Catalog), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Parsing_PDF_File_File_migh, __pyx_k_Error_Parsing_PDF_File_File_migh, sizeof(__pyx_k_Error_Parsing_PDF_File_File_migh), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_Printing, __pyx_k_Error_Printing, sizeof(__pyx_k_Error_Printing), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_decrypting_PDF_File, __pyx_k_Error_decrypting_PDF_File, sizeof(__pyx_k_Error_decrypting_PDF_File), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_while_r_w_File, __pyx_k_Error_while_r_w_File, sizeof(__pyx_k_Error_while_r_w_File), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_create_TextOutputDev_w, __pyx_k_Failed_to_create_TextOutputDev_w, sizeof(__pyx_k_Failed_to_create_TextOutputDev_w), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_load, __pyx_k_Failed_to_load, sizeof(__pyx_k_Failed_to_load), 0, 1, 0, 0},
  {&__pyx_n_s_GlobalParamsConfig, __pyx_k_GlobalParamsConfig, sizeof(__pyx_k_GlobalParamsConfig), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig___reduce_cyt, __pyx_k_GlobalParamsConfig___reduce_cyt, sizeof(__pyx_k_GlobalParamsConfig___reduce_cyt), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig___setstate_c, __pyx_k_GlobalParamsConfig___setstate_c, sizeof(__pyx_k_GlobalParamsConfig___setstate_c), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig_add_font_fil, __pyx_k_GlobalParamsConfig_add_font_fil, sizeof(__pyx_k_GlobalParamsConfig_add_font_fil), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig_load_file, __pyx_k_GlobalParamsConfig_load_file, sizeof(__pyx_k_GlobalParamsConfig_load_file), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig_map_name_to, __pyx_k_GlobalParamsConfig_map_name_to, sizeof(__pyx_k_GlobalParamsConfig_map_name_to), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig_reset, __pyx_k_GlobalParamsConfig_reset, sizeof(__pyx_k_GlobalParamsConfig_reset), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig_setup_base_f, __pyx_k_GlobalParamsConfig_setup_base_f, sizeof(__pyx_k_GlobalParamsConfig_setup_base_f), 0, 0, 1, 1},
  {&__pyx_kp_u_Global_XPDF_config_object_Metho, __pyx_k_Global_XPDF_config_object_Metho, sizeof(__pyx_k_Global_XPDF_config_object_Metho), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x66, __pyx_k_Incompatible_checksums_s_vs_0x66, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x66), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0x6b, __pyx_k_Incompatible_checksums_s_vs_0x6b, sizeof(__pyx_k_Incompatible_checksums_s_vs_0x6b), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb1, __pyx_k_Incompatible_checksums_s_vs_0xb1, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb1), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_u_Invalid_EOL_type, __pyx_k_Invalid_EOL_type, sizeof(__pyx_k_Invalid_EOL_type), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_Key_type, __pyx_k_Invalid_Key_type, sizeof(__pyx_k_Invalid_Key_type), 0, 1, 0, 0},
  {&__pyx_kp_u_Invalid_TexOutput_Mode, __pyx_k_Invalid_TexOutput_Mode, sizeof(__pyx_k_Invalid_TexOutput_Mode), 0, 1, 0, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_u_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 1, 0, 1},
  {&__pyx_n_u_LA, __pyx_k_LA, sizeof(__pyx_k_LA), 0, 1, 0, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_u_No_UnicodeMap_file_associated_wi, __pyx_k_No_UnicodeMap_file_associated_wi, sizeof(__pyx_k_No_UnicodeMap_file_associated_wi), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_PDFError, __pyx_k_PDFError, sizeof(__pyx_k_PDFError), 0, 0, 1, 1},
  {&__pyx_n_u_PDFError, __pyx_k_PDFError, sizeof(__pyx_k_PDFError), 0, 1, 0, 1},
  {&__pyx_n_s_PDFError___reduce_cython, __pyx_k_PDFError___reduce_cython, sizeof(__pyx_k_PDFError___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFError___setstate_cython, __pyx_k_PDFError___setstate_cython, sizeof(__pyx_k_PDFError___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFIOError, __pyx_k_PDFIOError, sizeof(__pyx_k_PDFIOError), 0, 0, 1, 1},
  {&__pyx_n_u_PDFIOError, __pyx_k_PDFIOError, sizeof(__pyx_k_PDFIOError), 0, 1, 0, 1},
  {&__pyx_n_s_PDFIOError___reduce_cython, __pyx_k_PDFIOError___reduce_cython, sizeof(__pyx_k_PDFIOError___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFIOError___setstate_cython, __pyx_k_PDFIOError___setstate_cython, sizeof(__pyx_k_PDFIOError___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFImage, __pyx_k_PDFImage, sizeof(__pyx_k_PDFImage), 0, 0, 1, 1},
  {&__pyx_n_s_PDFImageOutput, __pyx_k_PDFImageOutput, sizeof(__pyx_k_PDFImageOutput), 0, 0, 1, 1},
  {&__pyx_n_u_PDFImageOutput, __pyx_k_PDFImageOutput, sizeof(__pyx_k_PDFImageOutput), 0, 1, 0, 1},
  {&__pyx_n_s_PDFImageOutput___reduce_cython, __pyx_k_PDFImageOutput___reduce_cython, sizeof(__pyx_k_PDFImageOutput___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFImageOutput___setstate_cython, __pyx_k_PDFImageOutput___setstate_cython, sizeof(__pyx_k_PDFImageOutput___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFImageOutput_get, __pyx_k_PDFImageOutput_get, sizeof(__pyx_k_PDFImageOutput_get), 0, 0, 1, 1},
  {&__pyx_n_s_PDFImage___reduce_cython, __pyx_k_PDFImage___reduce_cython, sizeof(__pyx_k_PDFImage___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFImage___setstate_cython, __pyx_k_PDFImage___setstate_cython, sizeof(__pyx_k_PDFImage___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFOutputDevice, __pyx_k_PDFOutputDevice, sizeof(__pyx_k_PDFOutputDevice), 0, 0, 1, 1},
  {&__pyx_n_u_PDFOutputDevice, __pyx_k_PDFOutputDevice, sizeof(__pyx_k_PDFOutputDevice), 0, 1, 0, 1},
  {&__pyx_n_s_PDFOutputDevice___reduce_cython, __pyx_k_PDFOutputDevice___reduce_cython, sizeof(__pyx_k_PDFOutputDevice___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFOutputDevice___setstate_cytho, __pyx_k_PDFOutputDevice___setstate_cytho, sizeof(__pyx_k_PDFOutputDevice___setstate_cytho), 0, 0, 1, 1},
  {&__pyx_n_s_PDFOutputDevice_get, __pyx_k_PDFOutputDevice_get, sizeof(__pyx_k_PDFOutputDevice_get), 0, 0, 1, 1},
  {&__pyx_n_s_PDFPermissionError, __pyx_k_PDFPermissionError, sizeof(__pyx_k_PDFPermissionError), 0, 0, 1, 1},
  {&__pyx_n_u_PDFPermissionError, __pyx_k_PDFPermissionError, sizeof(__pyx_k_PDFPermissionError), 0, 1, 0, 1},
  {&__pyx_n_s_PDFPermissionError___reduce_cyth, __pyx_k_PDFPermissionError___reduce_cyth, sizeof(__pyx_k_PDFPermissionError___reduce_cyth), 0, 0, 1, 1},
  {&__pyx_n_s_PDFPermissionError___setstate_cy, __pyx_k_PDFPermissionError___setstate_cy, sizeof(__pyx_k_PDFPermissionError___setstate_cy), 0, 0, 1, 1},
  {&__pyx_n_s_PDFSyntaxError, __pyx_k_PDFSyntaxError, sizeof(__pyx_k_PDFSyntaxError), 0, 0, 1, 1},
  {&__pyx_n_u_PDFSyntaxError, __pyx_k_PDFSyntaxError, sizeof(__pyx_k_PDFSyntaxError), 0, 1, 0, 1},
  {&__pyx_n_s_PDFSyntaxError___reduce_cython, __pyx_k_PDFSyntaxError___reduce_cython, sizeof(__pyx_k_PDFSyntaxError___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFSyntaxError___setstate_cython, __pyx_k_PDFSyntaxError___setstate_cython, sizeof(__pyx_k_PDFSyntaxError___setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_u_PDF_cannot_be_decrypted_please_p, __pyx_k_PDF_cannot_be_decrypted_please_p, sizeof(__pyx_k_PDF_cannot_be_decrypted_please_p), 0, 1, 0, 0},
  {&__pyx_kp_u_PIL_Image, __pyx_k_PIL_Image, sizeof(__pyx_k_PIL_Image), 0, 1, 0, 0},
  {&__pyx_n_s_Page, __pyx_k_Page, sizeof(__pyx_k_Page), 0, 0, 1, 1},
  {&__pyx_n_u_Page, __pyx_k_Page, sizeof(__pyx_k_Page), 0, 1, 0, 1},
  {&__pyx_n_s_Page___reduce_cython, __pyx_k_Page___reduce_cython, sizeof(__pyx_k_Page___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_Page___setstate_cython, __pyx_k_Page___setstate_cython, sizeof(__pyx_k_Page___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_Page_find_all_text, __pyx_k_Page_find_all_text, sizeof(__pyx_k_Page_find_all_text), 0, 0, 1, 1},
  {&__pyx_n_s_Page_find_text, __pyx_k_Page_find_text, sizeof(__pyx_k_Page_find_text), 0, 0, 1, 1},
  {&__pyx_kp_u_Page_index, __pyx_k_Page_index, sizeof(__pyx_k_Page_index), 0, 1, 0, 0},
  {&__pyx_kp_u_Page_index_label_label, __pyx_k_Page_index_label_label, sizeof(__pyx_k_Page_index_label_label), 0, 1, 0, 0},
  {&__pyx_kp_u_Page_index_must_be_positive_inte, __pyx_k_Page_index_must_be_positive_inte, sizeof(__pyx_k_Page_index_must_be_positive_inte), 0, 1, 0, 0},
  {&__pyx_n_s_Page_text, __pyx_k_Page_text, sizeof(__pyx_k_Page_text), 0, 0, 1, 1},
  {&__pyx_n_s_Page_text_bytes, __pyx_k_Page_text_bytes, sizeof(__pyx_k_Page_text_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_u_Pillow_is_not_installed_Please, __pyx_k_Pillow_is_not_installed_Please, sizeof(__pyx_k_Pillow_is_not_installed_Please), 0, 1, 0, 0},
  {&__pyx_n_u_RGB, __pyx_k_RGB, sizeof(__pyx_k_RGB), 0, 1, 0, 1},
  {&__pyx_n_u_RGBA, __pyx_k_RGBA, sizeof(__pyx_k_RGBA), 0, 1, 0, 1},
  {&__pyx_n_s_RawImageControl, __pyx_k_RawImageControl, sizeof(__pyx_k_RawImageControl), 0, 0, 1, 1},
  {&__pyx_n_s_RawImageControl___reduce_cython, __pyx_k_RawImageControl___reduce_cython, sizeof(__pyx_k_RawImageControl___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_RawImageControl___setstate_cytho, __pyx_k_RawImageControl___setstate_cytho, sizeof(__pyx_k_RawImageControl___setstate_cytho), 0, 0, 1, 1},
  {&__pyx_n_s_RawImageOutput, __pyx_k_RawImageOutput, sizeof(__pyx_k_RawImageOutput), 0, 0, 1, 1},
  {&__pyx_n_u_RawImageOutput, __pyx_k_RawImageOutput, sizeof(__pyx_k_RawImageOutput), 0, 1, 0, 1},
  {&__pyx_n_s_RawImageOutput___reduce_cython, __pyx_k_RawImageOutput___reduce_cython, sizeof(__pyx_k_RawImageOutput___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_RawImageOutput___setstate_cython, __pyx_k_RawImageOutput___setstate_cython, sizeof(__pyx_k_RawImageOutput___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_RawImageOutput_get, __pyx_k_RawImageOutput_get, sizeof(__pyx_k_RawImageOutput_get), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_u_Stream, __pyx_k_Stream, sizeof(__pyx_k_Stream), 0, 1, 0, 1},
  {&__pyx_n_s_TextControl, __pyx_k_TextControl, sizeof(__pyx_k_TextControl), 0, 0, 1, 1},
  {&__pyx_n_u_TextControl, __pyx_k_TextControl, sizeof(__pyx_k_TextControl), 0, 1, 0, 1},
  {&__pyx_n_s_TextControl___reduce_cython, __pyx_k_TextControl___reduce_cython, sizeof(__pyx_k_TextControl___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_TextControl___setstate_cython, __pyx_k_TextControl___setstate_cython, sizeof(__pyx_k_TextControl___setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_u_TextOutput, __pyx_k_TextOutput, sizeof(__pyx_k_TextOutput), 0, 1, 0, 0},
  {&__pyx_n_s_TextOutput_2, __pyx_k_TextOutput_2, sizeof(__pyx_k_TextOutput_2), 0, 0, 1, 1},
  {&__pyx_n_u_TextOutput_2, __pyx_k_TextOutput_2, sizeof(__pyx_k_TextOutput_2), 0, 1, 0, 1},
  {&__pyx_n_s_TextOutput___reduce_cython, __pyx_k_TextOutput___reduce_cython, sizeof(__pyx_k_TextOutput___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_TextOutput___setstate_cython, __pyx_k_TextOutput___setstate_cython, sizeof(__pyx_k_TextOutput___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_TextOutput_get, __pyx_k_TextOutput_get, sizeof(__pyx_k_TextOutput_get), 0, 0, 1, 1},
  {&__pyx_n_s_TextOutput_get_all, __pyx_k_TextOutput_get_all, sizeof(__pyx_k_TextOutput_get_all), 0, 0, 1, 1},
  {&__pyx_n_s_TextOutput_get_bytes, __pyx_k_TextOutput_get_bytes, sizeof(__pyx_k_TextOutput_get_bytes), 0, 0, 1, 1},
  {&__pyx_kp_u_The_index_idx_is_out_of_page_ran, __pyx_k_The_index_idx_is_out_of_page_ran, sizeof(__pyx_k_The_index_idx_is_out_of_page_ran), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 1, 0, 0},
  {&__pyx_kp_u_Uncaught_error_in_xpdf_library, __pyx_k_Uncaught_error_in_xpdf_library, sizeof(__pyx_k_Uncaught_error_in_xpdf_library), 0, 1, 0, 0},
  {&__pyx_kp_u_Unknown_layout, __pyx_k_Unknown_layout, sizeof(__pyx_k_Unknown_layout), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFConfigError, __pyx_k_XPDFConfigError, sizeof(__pyx_k_XPDFConfigError), 0, 0, 1, 1},
  {&__pyx_n_u_XPDFConfigError, __pyx_k_XPDFConfigError, sizeof(__pyx_k_XPDFConfigError), 0, 1, 0, 1},
  {&__pyx_n_s_XPDFConfigError___reduce_cython, __pyx_k_XPDFConfigError___reduce_cython, sizeof(__pyx_k_XPDFConfigError___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFConfigError___setstate_cytho, __pyx_k_XPDFConfigError___setstate_cytho, sizeof(__pyx_k_XPDFConfigError___setstate_cytho), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFError, __pyx_k_XPDFError, sizeof(__pyx_k_XPDFError), 0, 0, 1, 1},
  {&__pyx_n_u_XPDFError, __pyx_k_XPDFError, sizeof(__pyx_k_XPDFError), 0, 1, 0, 1},
  {&__pyx_n_s_XPDFError___reduce_cython, __pyx_k_XPDFError___reduce_cython, sizeof(__pyx_k_XPDFError___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFError___setstate_cython, __pyx_k_XPDFError___setstate_cython, sizeof(__pyx_k_XPDFError___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFInternalError, __pyx_k_XPDFInternalError, sizeof(__pyx_k_XPDFInternalError), 0, 0, 1, 1},
  {&__pyx_n_u_XPDFInternalError, __pyx_k_XPDFInternalError, sizeof(__pyx_k_XPDFInternalError), 0, 1, 0, 1},
  {&__pyx_n_s_XPDFInternalError___reduce_cytho, __pyx_k_XPDFInternalError___reduce_cytho, sizeof(__pyx_k_XPDFInternalError___reduce_cytho), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFInternalError___setstate_cyt, __pyx_k_XPDFInternalError___setstate_cyt, sizeof(__pyx_k_XPDFInternalError___setstate_cyt), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFNotInplementedError, __pyx_k_XPDFNotInplementedError, sizeof(__pyx_k_XPDFNotInplementedError), 0, 0, 1, 1},
  {&__pyx_n_u_XPDFNotInplementedError, __pyx_k_XPDFNotInplementedError, sizeof(__pyx_k_XPDFNotInplementedError), 0, 1, 0, 1},
  {&__pyx_n_s_XPDFNotInplementedError___reduce, __pyx_k_XPDFNotInplementedError___reduce, sizeof(__pyx_k_XPDFNotInplementedError___reduce), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFNotInplementedError___setsta, __pyx_k_XPDFNotInplementedError___setsta, sizeof(__pyx_k_XPDFNotInplementedError___setsta), 0, 0, 1, 1},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_kp_u__44, __pyx_k__44, sizeof(__pyx_k__44), 0, 1, 0, 0},
  {&__pyx_kp_u__52, __pyx_k__52, sizeof(__pyx_k__52), 0, 1, 0, 0},
  {&__pyx_kp_u__65, __pyx_k__65, sizeof(__pyx_k__65), 0, 1, 0, 0},
  {&__pyx_n_s_add_font_file, __pyx_k_add_font_file, sizeof(__pyx_k_add_font_file), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_anti_alias, __pyx_k_anti_alias, sizeof(__pyx_k_anti_alias), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_u_bbox, __pyx_k_bbox, sizeof(__pyx_k_bbox), 0, 1, 0, 0},
  {&__pyx_n_s_case_sensitive, __pyx_k_case_sensitive, sizeof(__pyx_k_case_sensitive), 0, 0, 1, 1},
  {&__pyx_n_u_ccitt, __pyx_k_ccitt, sizeof(__pyx_k_ccitt), 0, 1, 0, 1},
  {&__pyx_n_s_cfg_path, __pyx_k_cfg_path, sizeof(__pyx_k_cfg_path), 0, 0, 1, 1},
  {&__pyx_n_s_char_name, __pyx_k_char_name, sizeof(__pyx_k_char_name), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_clip_text, __pyx_k_clip_text, sizeof(__pyx_k_clip_text), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_u_cmyk, __pyx_k_cmyk, sizeof(__pyx_k_cmyk), 0, 1, 0, 1},
  {&__pyx_kp_u_color_mode_is_not_supported, __pyx_k_color_mode_is_not_supported, sizeof(__pyx_k_color_mode_is_not_supported), 0, 1, 0, 0},
  {&__pyx_kp_u_colorspace, __pyx_k_colorspace, sizeof(__pyx_k_colorspace), 0, 1, 0, 0},
  {&__pyx_kp_u_compression, __pyx_k_compression, sizeof(__pyx_k_compression), 0, 1, 0, 0},
  {&__pyx_n_s_control, __pyx_k_control, sizeof(__pyx_k_control), 0, 0, 1, 1},
  {&__pyx_n_s_crop_box, __pyx_k_crop_box, sizeof(__pyx_k_crop_box), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_u_devn, __pyx_k_devn, sizeof(__pyx_k_devn), 0, 1, 0, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
  {&__pyx_n_s_dir, __pyx_k_dir, sizeof(__pyx_k_dir), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_s_discard_clipped, __pyx_k_discard_clipped, sizeof(__pyx_k_discard_clipped), 0, 0, 1, 1},
  {&__pyx_n_s_discard_diagonal, __pyx_k_discard_diagonal, sizeof(__pyx_k_discard_diagonal), 0, 0, 1, 1},
  {&__pyx_n_s_discard_invisible, __pyx_k_discard_invisible, sizeof(__pyx_k_discard_invisible), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_doc_2, __pyx_k_doc_2, sizeof(__pyx_k_doc_2), 0, 0, 1, 1},
  {&__pyx_n_u_dos, __pyx_k_dos, sizeof(__pyx_k_dos), 0, 1, 0, 1},
  {&__pyx_n_s_enable_html, __pyx_k_enable_html, sizeof(__pyx_k_enable_html), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_n_s_exec_module, __pyx_k_exec_module, sizeof(__pyx_k_exec_module), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_find_all_text, __pyx_k_find_all_text, sizeof(__pyx_k_find_all_text), 0, 0, 1, 1},
  {&__pyx_n_s_find_spec, __pyx_k_find_spec, sizeof(__pyx_k_find_spec), 0, 0, 1, 1},
  {&__pyx_n_s_find_text, __pyx_k_find_text, sizeof(__pyx_k_find_text), 0, 0, 1, 1},
  {&__pyx_n_s_fixed_line_spacing, __pyx_k_fixed_line_spacing, sizeof(__pyx_k_fixed_line_spacing), 0, 0, 1, 1},
  {&__pyx_n_s_fixed_pitch, __pyx_k_fixed_pitch, sizeof(__pyx_k_fixed_pitch), 0, 0, 1, 1},
  {&__pyx_n_u_flate, __pyx_k_flate, sizeof(__pyx_k_flate), 0, 1, 0, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_font_name, __pyx_k_font_name, sizeof(__pyx_k_font_name), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_kp_u_found, __pyx_k_found, sizeof(__pyx_k_found), 0, 1, 0, 0},
  {&__pyx_n_s_frombuffer, __pyx_k_frombuffer, sizeof(__pyx_k_frombuffer), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_all, __pyx_k_get_all, sizeof(__pyx_k_get_all), 0, 0, 1, 1},
  {&__pyx_n_s_get_bytes, __pyx_k_get_bytes, sizeof(__pyx_k_get_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_get_xpdfrc, __pyx_k_get_xpdfrc, sizeof(__pyx_k_get_xpdfrc), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_u_gray, __pyx_k_gray, sizeof(__pyx_k_gray), 0, 1, 0, 1},
  {&__pyx_n_u_icc, __pyx_k_icc, sizeof(__pyx_k_icc), 0, 1, 0, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_u_ignore, __pyx_k_ignore, sizeof(__pyx_k_ignore), 0, 1, 0, 1},
  {&__pyx_n_u_image, __pyx_k_image, sizeof(__pyx_k_image), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_importlib_util, __pyx_k_importlib_util, sizeof(__pyx_k_importlib_util), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_u_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 1, 0, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_insert_bom, __pyx_k_insert_bom, sizeof(__pyx_k_insert_bom), 0, 0, 1, 1},
  {&__pyx_kp_u_is_not_supported, __pyx_k_is_not_supported, sizeof(__pyx_k_is_not_supported), 0, 1, 0, 0},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_u_jbig2, __pyx_k_jbig2, sizeof(__pyx_k_jbig2), 0, 1, 0, 1},
  {&__pyx_n_u_jpeg, __pyx_k_jpeg, sizeof(__pyx_k_jpeg), 0, 1, 0, 1},
  {&__pyx_n_u_jpx, __pyx_k_jpx, sizeof(__pyx_k_jpx), 0, 1, 0, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_u_lab, __pyx_k_lab, sizeof(__pyx_k_lab), 0, 1, 0, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_layout, __pyx_k_layout, sizeof(__pyx_k_layout), 0, 0, 1, 1},
  {&__pyx_n_u_lineprinter, __pyx_k_lineprinter, sizeof(__pyx_k_lineprinter), 0, 1, 0, 1},
  {&__pyx_n_s_load_file, __pyx_k_load_file, sizeof(__pyx_k_load_file), 0, 0, 1, 1},
  {&__pyx_n_s_loader, __pyx_k_loader, sizeof(__pyx_k_loader), 0, 0, 1, 1},
  {&__pyx_n_u_lzw, __pyx_k_lzw, sizeof(__pyx_k_lzw), 0, 1, 0, 1},
  {&__pyx_n_u_mac, __pyx_k_mac, sizeof(__pyx_k_mac), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map_name_to_unicode, __pyx_k_map_name_to_unicode, sizeof(__pyx_k_map_name_to_unicode), 0, 0, 1, 1},
  {&__pyx_n_s_margin_bottom, __pyx_k_margin_bottom, sizeof(__pyx_k_margin_bottom), 0, 0, 1, 1},
  {&__pyx_n_s_margin_left, __pyx_k_margin_left, sizeof(__pyx_k_margin_left), 0, 0, 1, 1},
  {&__pyx_n_s_margin_right, __pyx_k_margin_right, sizeof(__pyx_k_margin_right), 0, 0, 1, 1},
  {&__pyx_n_s_margin_top, __pyx_k_margin_top, sizeof(__pyx_k_margin_top), 0, 0, 1, 1},
  {&__pyx_n_u_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 1, 0, 1},
  {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_module_from_spec, __pyx_k_module_from_spec, sizeof(__pyx_k_module_from_spec), 0, 0, 1, 1},
  {&__pyx_n_s_modules, __pyx_k_modules, sizeof(__pyx_k_modules), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_u_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 1, 0, 1},
  {&__pyx_n_s_no_composite, __pyx_k_no_composite, sizeof(__pyx_k_no_composite), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_num_pages, __pyx_k_num_pages, sizeof(__pyx_k_num_pages), 0, 0, 1, 1},
  {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_ownerpass, __pyx_k_ownerpass, sizeof(__pyx_k_ownerpass), 0, 0, 1, 1},
  {&__pyx_n_s_page_area, __pyx_k_page_area, sizeof(__pyx_k_page_area), 0, 0, 1, 1},
  {&__pyx_n_s_page_iterator, __pyx_k_page_iterator, sizeof(__pyx_k_page_iterator), 0, 0, 1, 1},
  {&__pyx_n_u_page_iterator, __pyx_k_page_iterator, sizeof(__pyx_k_page_iterator), 0, 1, 0, 1},
  {&__pyx_n_s_page_iterator___reduce_cython, __pyx_k_page_iterator___reduce_cython, sizeof(__pyx_k_page_iterator___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_page_iterator___setstate_cython, __pyx_k_page_iterator___setstate_cython, sizeof(__pyx_k_page_iterator___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_page_no, __pyx_k_page_no, sizeof(__pyx_k_page_no), 0, 0, 1, 1},
  {&__pyx_n_s_pages, __pyx_k_pages, sizeof(__pyx_k_pages), 0, 0, 1, 1},
  {&__pyx_n_s_paper_color, __pyx_k_paper_color, sizeof(__pyx_k_paper_color), 0, 0, 1, 1},
  {&__pyx_kp_u_paper_color_must_be_3_RGB_or_4, __pyx_k_paper_color_must_be_3_RGB_or_4, sizeof(__pyx_k_paper_color_must_be_3_RGB_or_4), 0, 1, 0, 0},
  {&__pyx_n_s_pdf, __pyx_k_pdf, sizeof(__pyx_k_pdf), 0, 0, 1, 1},
  {&__pyx_kp_u_pdf_argument_must_be_a_string_or, __pyx_k_pdf_argument_must_be_a_string_or, sizeof(__pyx_k_pdf_argument_must_be_a_string_or), 0, 1, 0, 0},
  {&__pyx_n_s_pdf_file, __pyx_k_pdf_file, sizeof(__pyx_k_pdf_file), 0, 0, 1, 1},
  {&__pyx_n_s_pdftotext_raw, __pyx_k_pdftotext_raw, sizeof(__pyx_k_pdftotext_raw), 0, 0, 1, 1},
  {&__pyx_n_u_pdftotext_raw, __pyx_k_pdftotext_raw, sizeof(__pyx_k_pdftotext_raw), 0, 1, 0, 1},
  {&__pyx_n_u_physical, __pyx_k_physical, sizeof(__pyx_k_physical), 0, 1, 0, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_u_previous, __pyx_k_previous, sizeof(__pyx_k_previous), 0, 1, 0, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_DocumentPageItera, __pyx_k_pyx_unpickle_DocumentPageItera, sizeof(__pyx_k_pyx_unpickle_DocumentPageItera), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PDFError, __pyx_k_pyx_unpickle_PDFError, sizeof(__pyx_k_pyx_unpickle_PDFError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PDFIOError, __pyx_k_pyx_unpickle_PDFIOError, sizeof(__pyx_k_pyx_unpickle_PDFIOError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PDFImage, __pyx_k_pyx_unpickle_PDFImage, sizeof(__pyx_k_pyx_unpickle_PDFImage), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PDFOutputDevice, __pyx_k_pyx_unpickle_PDFOutputDevice, sizeof(__pyx_k_pyx_unpickle_PDFOutputDevice), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PDFPermissionErro, __pyx_k_pyx_unpickle_PDFPermissionErro, sizeof(__pyx_k_pyx_unpickle_PDFPermissionErro), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PDFSyntaxError, __pyx_k_pyx_unpickle_PDFSyntaxError, sizeof(__pyx_k_pyx_unpickle_PDFSyntaxError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_RawImageControl, __pyx_k_pyx_unpickle_RawImageControl, sizeof(__pyx_k_pyx_unpickle_RawImageControl), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_XPDFConfigError, __pyx_k_pyx_unpickle_XPDFConfigError, sizeof(__pyx_k_pyx_unpickle_XPDFConfigError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_XPDFError, __pyx_k_pyx_unpickle_XPDFError, sizeof(__pyx_k_pyx_unpickle_XPDFError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_XPDFInternalError, __pyx_k_pyx_unpickle_XPDFInternalError, sizeof(__pyx_k_pyx_unpickle_XPDFInternalError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_XPDFNotInplemente, __pyx_k_pyx_unpickle_XPDFNotInplemente, sizeof(__pyx_k_pyx_unpickle_XPDFNotInplemente), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_page_iterator, __pyx_k_pyx_unpickle_page_iterator, sizeof(__pyx_k_pyx_unpickle_page_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_pyxpdf_data, __pyx_k_pyxpdf_data, sizeof(__pyx_k_pyxpdf_data), 0, 0, 1, 1},
  {&__pyx_n_u_pyxpdf_data, __pyx_k_pyxpdf_data, sizeof(__pyx_k_pyxpdf_data), 0, 1, 0, 1},
  {&__pyx_n_s_pyxpdf_xpdf, __pyx_k_pyxpdf_xpdf, sizeof(__pyx_k_pyxpdf_xpdf), 0, 0, 1, 1},
  {&__pyx_kp_u_pyxpdf_xpdf_PDFImage_type, __pyx_k_pyxpdf_xpdf_PDFImage_type, sizeof(__pyx_k_pyxpdf_xpdf_PDFImage_type), 0, 1, 0, 0},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_u_raw, __pyx_k_raw, sizeof(__pyx_k_raw), 0, 1, 0, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_u_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 1, 0, 1},
  {&__pyx_n_u_reading, __pyx_k_reading, sizeof(__pyx_k_reading), 0, 1, 0, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_reset, __pyx_k_reset, sizeof(__pyx_k_reset), 0, 0, 1, 1},
  {&__pyx_n_s_resolution, __pyx_k_resolution, sizeof(__pyx_k_resolution), 0, 0, 1, 1},
  {&__pyx_n_s_resolution_x, __pyx_k_resolution_x, sizeof(__pyx_k_resolution_x), 0, 0, 1, 1},
  {&__pyx_n_s_resolution_y, __pyx_k_resolution_y, sizeof(__pyx_k_resolution_y), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_u_rgb, __pyx_k_rgb, sizeof(__pyx_k_rgb), 0, 1, 0, 1},
  {&__pyx_n_u_rle, __pyx_k_rle, sizeof(__pyx_k_rle), 0, 1, 0, 1},
  {&__pyx_n_s_rotation, __pyx_k_rotation, sizeof(__pyx_k_rotation), 0, 0, 1, 1},
  {&__pyx_n_s_scale_before_rotation, __pyx_k_scale_before_rotation, sizeof(__pyx_k_scale_before_rotation), 0, 0, 1, 1},
  {&__pyx_n_s_scale_pixel_box, __pyx_k_scale_pixel_box, sizeof(__pyx_k_scale_pixel_box), 0, 0, 1, 1},
  {&__pyx_n_s_search_box, __pyx_k_search_box, sizeof(__pyx_k_search_box), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_u_sep, __pyx_k_sep, sizeof(__pyx_k_sep), 0, 1, 0, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_setup_base_fonts, __pyx_k_setup_base_fonts, sizeof(__pyx_k_setup_base_fonts), 0, 0, 1, 1},
  {&__pyx_n_u_simple, __pyx_k_simple, sizeof(__pyx_k_simple), 0, 1, 0, 1},
  {&__pyx_n_u_smask, __pyx_k_smask, sizeof(__pyx_k_smask), 0, 1, 0, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_kp_s_src_pyxpdf_document_pxi, __pyx_k_src_pyxpdf_document_pxi, sizeof(__pyx_k_src_pyxpdf_document_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_k_src_pyxpdf_globalconfig_pxi, sizeof(__pyx_k_src_pyxpdf_globalconfig_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_src_pyxpdf_imageoutput_pxi, __pyx_k_src_pyxpdf_imageoutput_pxi, sizeof(__pyx_k_src_pyxpdf_imageoutput_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_src_pyxpdf_pdfoutput_pxi, __pyx_k_src_pyxpdf_pdfoutput_pxi, sizeof(__pyx_k_src_pyxpdf_pdfoutput_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_src_pyxpdf_pdftotext_pxi, __pyx_k_src_pyxpdf_pdftotext_pxi, sizeof(__pyx_k_src_pyxpdf_pdftotext_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_src_pyxpdf_textoutput_pxi, __pyx_k_src_pyxpdf_textoutput_pxi, sizeof(__pyx_k_src_pyxpdf_textoutput_pxi), 0, 0, 1, 0},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_u_stencil, __pyx_k_stencil, sizeof(__pyx_k_stencil), 0, 1, 0, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_u_table, __pyx_k_table, sizeof(__pyx_k_table), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_text_bytes, __pyx_k_text_bytes, sizeof(__pyx_k_text_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_text_control, __pyx_k_text_control, sizeof(__pyx_k_text_control), 0, 0, 1, 1},
  {&__pyx_n_s_text_dev, __pyx_k_text_dev, sizeof(__pyx_k_text_dev), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_u_top, __pyx_k_top, sizeof(__pyx_k_top), 0, 1, 0, 1},
  {&__pyx_kp_u_unexpected_value_of_imgType, __pyx_k_unexpected_value_of_imgType, sizeof(__pyx_k_unexpected_value_of_imgType), 0, 1, 0, 0},
  {&__pyx_n_u_unix, __pyx_k_unix, sizeof(__pyx_k_unix), 0, 1, 0, 1},
  {&__pyx_n_u_unknown, __pyx_k_unknown, sizeof(__pyx_k_unknown), 0, 1, 0, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_use_cropbox, __pyx_k_use_cropbox, sizeof(__pyx_k_use_cropbox), 0, 0, 1, 1},
  {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_userpass, __pyx_k_userpass, sizeof(__pyx_k_userpass), 0, 0, 1, 1},
  {&__pyx_n_s_util, __pyx_k_util, sizeof(__pyx_k_util), 0, 0, 1, 1},
  {&__pyx_n_s_wholeword, __pyx_k_wholeword, sizeof(__pyx_k_wholeword), 0, 0, 1, 1},
  {&__pyx_n_s_xmp_metadata, __pyx_k_xmp_metadata, sizeof(__pyx_k_xmp_metadata), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(2, 43, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 29, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(3, 46, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(4, 65, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(5, 11, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(6, 134, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(6, 225, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(6, 440, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "src/pyxpdf/helper.pxi":26
 *         s = unicode(s).encode('UTF-32')
 *     else:
 *         raise TypeError("Could not convert to utf-32 bytes.")             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Could_not_convert_to_utf_32_byte); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "src/pyxpdf/helper.pxi":34
 * cdef inline object GString_to_unicode(GString *gstr):
 *     if gstr is not NULL:
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8", errors='ignore')             # <<<<<<<<<<<<<<
 *     else:
 *         return ""
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_UTF_8); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "src/pyxpdf/globalconfig.pxi":46
 * 
 *         if self._global == NULL:
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")             # <<<<<<<<<<<<<<
 *         self._set_defaults()
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_Cannot_create_GlobalParamsConfig); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(3, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "src/pyxpdf/pdftotext.pxi":31
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:
 *         raise PDFPermissionError("Copying of text from this document is not allowed.")             # <<<<<<<<<<<<<<
 * 
 *     if start < 1:
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_Copying_of_text_from_this_docume); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(4, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "src/pyxpdf/pdftotext.pxi":69
 *     text_dev = make_unique[TextOutputDev](&append_to_cpp_string, &ext_text, control.get())
 *     if deref(text_dev).isOk() == gFalse:
 *         raise XPDFConfigError("Failed to create TextOutputDev with given options")             # <<<<<<<<<<<<<<
 * 
 *     deref(doc).displayPages(text_dev.get(), start, end, 72, 72, 0, gFalse, gTrue, gFalse)
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_Failed_to_create_TextOutputDev_w); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(4, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "src/pyxpdf/textoutput.pxi":137
 *             self._c_control.mode = TextOutputMode.textOutReadingOrder
 *         else:
 *             raise ValueError("Invalid TexOutput Mode")             # <<<<<<<<<<<<<<
 * 
 *     cdef TextOutputControl* get_c_control(self):
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_Invalid_TexOutput_Mode); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(8, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "src/pyxpdf/textoutput.pxi":195
 *                                                      self.control.get_c_control())
 *         if self._c_textdev.get() == NULL:
 *             raise MemoryError("Cannot allocate memory for 'TextOutput' object.")             # <<<<<<<<<<<<<<
 *         # sanity check
 *         if self._c_textdev.get().isOk() == gFalse:
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_Cannot_allocate_memory_for_TextO); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(8, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "src/pyxpdf/imageoutput.pxi":208
 * cdef object pillow_image_from_buffer(object mode, int height, int width, object buffer):
 *     if not ("PIL.Image" in available_deps):
 *         raise PDFError("'Pillow' is not installed. Please install it.")             # <<<<<<<<<<<<<<
 * 
 *     cdef object Image = available_deps['PIL.Image']
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_u_Pillow_is_not_installed_Please); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(9, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "src/pyxpdf/imageoutput.pxi":299
 *                   use_cropbox = False, scale_before_rotation = False):
 *         if paper_color != None and len(paper_color) not in (3, 4):
 *             raise ValueError(f"'paper_color' must be 3 (RGB) or 4 (CMYK) value (0-255) list/tuple.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_u_paper_color_must_be_3_RGB_or_4); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(9, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "src/pyxpdf/imageoutput.pxi":307
 *             # default paper color is white
 *             if mode == 'CMYK':
 *                 paper_color = (0,0,0,0)             # <<<<<<<<<<<<<<
 *             else:
 *                 paper_color = (255,255,255)
 */
  __pyx_tuple__57 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(9, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "src/pyxpdf/imageoutput.pxi":309
 *                 paper_color = (0,0,0,0)
 *             else:
 *                 paper_color = (255,255,255)             # <<<<<<<<<<<<<<
 *         _c_paper_color[0] = paper_color[0]
 *         _c_paper_color[1] = paper_color[1]
 */
  __pyx_tuple__58 = PyTuple_Pack(3, __pyx_int_255, __pyx_int_255, __pyx_int_255); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(9, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "src/pyxpdf/imageoutput.pxi":546
 *             img.image_type = "smask"
 *         else:
 *             raise ValueError(f"unexpected value of imgType")             # <<<<<<<<<<<<<<
 * 
 *         bmap = c_img.bitmap.get()
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_u_unexpected_value_of_imgType); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(9, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "src/pyxpdf/document.pxi":105
 *             self._load_from_char_array(self.doc_data, len(self.doc_data))
 *         else:
 *             raise ValueError(f"pdf argument must be a string or a file-like object.")             # <<<<<<<<<<<<<<
 * 
 *         # check PDFDoc
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_u_pdf_argument_must_be_a_string_or); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(6, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "src/pyxpdf/document.pxi":146
 *             return [self[i] for i in range(*key.indices(self.num_pages))]
 *         else:
 *             raise TypeError("Invalid Key type")             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_u_Invalid_Key_type); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(6, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "src/pyxpdf/document.pxi":185
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")             # <<<<<<<<<<<<<<
 * 
 *     cdef _load_from_char_array(self, char *pdf, int data_length):
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_u_Cannot_allocate_memory_for_inter); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(6, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "src/pyxpdf/document.pxi":204
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFPermissionError("PDF cannot be decrypted please provide correct passwords.")             # <<<<<<<<<<<<<<
 *         elif self.doc.getErrorCode() == errOpenFile:
 *             raise PDFIOError(f"Failed to load {self.filename}")
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_u_PDF_cannot_be_decrypted_please_p); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(6, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "src/pyxpdf/document.pxi":508
 *     def __cinit__(self, Document doc not None, int index):
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")             # <<<<<<<<<<<<<<
 *         self.page = doc.get_catalog().getPage(index + 1)
 *         # self.textpage.reset()
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_kp_u_Page_index_must_be_positive_inte); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(6, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(7, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "pyxpdf/xpdf.pyx":46
 * # load optional dependencies
 * #######################################################
 * cdef tuple optional_deps = ('pyxpdf_data', 'PIL.Image')             # <<<<<<<<<<<<<<
 * cdef dict available_deps = dict()
 * 
 */
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_n_u_pyxpdf_data, __pyx_kp_u_PIL_Image); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__121 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__123 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__123, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFError__set_state(self, __pyx_state)
 */
  __pyx_tuple__124 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__125 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFSyntaxError__set_state(self, __pyx_state)
 */
  __pyx_tuple__126 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__127 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFConfigError__set_state(self, __pyx_state)
 */
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__129 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__129, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFIOError__set_state(self, __pyx_state)
 */
  __pyx_tuple__130 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__131 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFPermissionError__set_state(self, __pyx_state)
 */
  __pyx_tuple__132 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__133 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__133, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFInternalError__set_state(self, __pyx_state)
 */
  __pyx_tuple__134 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__135 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__135, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFNotInplementedError__set_state(self, __pyx_state)
 */
  __pyx_tuple__136 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "src/pyxpdf/globalconfig.pxi":35
 *         return cfg
 * 
 *     def load_file(self, cfg_path=None):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         if globalParams != NULL:
 */
  __pyx_tuple__137 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_cfg_path); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(3, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__137, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_n_s_load_file, 35, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(3, 35, __pyx_L1_error)

  /* "src/pyxpdf/globalconfig.pxi":51
 *         globalParams = self._global
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         self.load_file(self.cfg_path)
 * 
 */
  __pyx_tuple__138 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(3, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_n_s_reset, 51, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(3, 51, __pyx_L1_error)

  /* "src/pyxpdf/globalconfig.pxi":65
 * 
 * 
 *     def setup_base_fonts(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 */
  __pyx_tuple__139 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_dir); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(3, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__139, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_n_s_setup_base_fonts, 65, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(3, 65, __pyx_L1_error)

  /* "src/pyxpdf/globalconfig.pxi":68
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 *     def add_font_file(self, font_name, file):             # <<<<<<<<<<<<<<
 *         #cdef:
 *         #    unique_ptr[GString] _fname, _fpath
 */
  __pyx_tuple__140 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_font_name, __pyx_n_s_file); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(3, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_n_s_add_font_file, 68, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(3, 68, __pyx_L1_error)

  /* "src/pyxpdf/globalconfig.pxi":87
 * 
 * 
 *     def map_name_to_unicode(self, char_name):             # <<<<<<<<<<<<<<
 *         return self._global.mapNameToUnicode(_chars(char_name))
 * 
 */
  __pyx_tuple__141 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_char_name); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__141, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_n_s_map_name_to_unicode, 87, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(3, 87, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__143 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__143, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(7, 3, __pyx_L1_error)

  /* "src/pyxpdf/pdftotext.pxi":7
 * 
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,             # <<<<<<<<<<<<<<
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 */
  __pyx_tuple__144 = PyTuple_Pack(15, __pyx_n_s_pdf_file, __pyx_n_s_start, __pyx_n_s_end, __pyx_n_s_ownerpass, __pyx_n_s_userpass, __pyx_n_s_layout, __pyx_n_s_fixed_pitch, __pyx_n_s_fixed_line_spacing, __pyx_n_s_discard_clipped, __pyx_n_s_discard_diagonal, __pyx_n_s_insert_bom, __pyx_n_s_margin_left, __pyx_n_s_margin_right, __pyx_n_s_margin_top, __pyx_n_s_margin_bottom); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(15, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_pdftotext_pxi, __pyx_n_s_pdftotext_raw, 7, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(4, 7, __pyx_L1_error)

  /* "src/pyxpdf/pdfoutput.pxi":8
 *     All PDF Output Device inherit from this.
 *     """
 *     def get(self, int page_no, **kwargs):             # <<<<<<<<<<<<<<
 *         """Get the output of `page_no` indexed page
 *         """
 */
  __pyx_tuple__145 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_page_no, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__145, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_pdfoutput_pxi, __pyx_n_s_get, 8, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(5, 8, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__146 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFOutputDevice__set_state(self, __pyx_state)
 */
  __pyx_tuple__147 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__147, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__149 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__149, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(7, 3, __pyx_L1_error)

  /* "src/pyxpdf/textoutput.pxi":249
 *     # PUBLIC METHODS
 * 
 *     cpdef bytes get_bytes(self, int page_no):             # <<<<<<<<<<<<<<
 *         """Get the extracted text bytes from `page_no` indexed page
 * 
 */
  __pyx_tuple__150 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_page_no, __pyx_n_s_page_no); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(8, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_textoutput_pxi, __pyx_n_s_get_bytes, 249, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(8, 249, __pyx_L1_error)

  /* "src/pyxpdf/textoutput.pxi":268
 *         return self._get_bytes(page_no)
 * 
 *     cpdef object get(self, int page_no):             # <<<<<<<<<<<<<<
 *         """Get the extracted `UTF-8` decoded :any:`str` from `page_no` indexed
 *         page
 */
  __pyx_tuple__151 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_page_no, __pyx_n_s_page_no); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(8, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__151, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_textoutput_pxi, __pyx_n_s_get, 268, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(8, 268, __pyx_L1_error)

  /* "src/pyxpdf/textoutput.pxi":288
 *         return self._get_bytes(page_no).decode('UTF-8', errors='ignore')
 * 
 *     cpdef list get_all(self):             # <<<<<<<<<<<<<<
 *         """Get the extracted `UTF-8` decoded text from all pages
 * 
 */
  __pyx_tuple__152 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(8, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_textoutput_pxi, __pyx_n_s_get_all, 288, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(8, 288, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__153, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__154 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(7, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__155 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RawImageControl__set_state(self, __pyx_state)
 */
  __pyx_tuple__156 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__156, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "src/pyxpdf/imageoutput.pxi":429
 * 
 * 
 *     cpdef object get(self, int page_no, crop_box=(0,0,0,0), scale_pixel_box = None):             # <<<<<<<<<<<<<<
 *         """Get the rendered :class:`~PIL.Image.Image` for `page_no` indexed page
 * 
 */
  __pyx_tuple__157 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_page_no, __pyx_n_s_crop_box, __pyx_n_s_scale_pixel_box); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(9, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_imageoutput_pxi, __pyx_n_s_get, 429, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(9, 429, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__158 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__158, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__159 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__159, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(7, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__160 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFImage__set_state(self, __pyx_state)
 */
  __pyx_tuple__161 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "src/pyxpdf/imageoutput.pxi":609
 * 
 * 
 *     cpdef list get(self, page_no):             # <<<<<<<<<<<<<<
 *         """Get all the images from `page_no` indexed page.
 * 
 */
  __pyx_tuple__162 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_page_no); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(9, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__162, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_imageoutput_pxi, __pyx_n_s_get, 609, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(9, 609, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__163 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__164 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__164, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(7, 3, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":319
 * 
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         """Get the PDF's info dictionary.
 * 
 */
  __pyx_tuple__165 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(6, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_info, 319, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(6, 319, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":332
 *         return self.get_info_dict()
 * 
 *     def xmp_metadata(self):             # <<<<<<<<<<<<<<
 *         """Get the PDF's xmp metadata.
 * 
 */
  __pyx_tuple__166 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(6, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_xmp_metadata, 332, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(6, 332, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":342
 * 
 * 
 *     cpdef text_bytes(self, int start=0, int end=-1, TextControl control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract text from given page range.
 * 
 */
  __pyx_tuple__167 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_start, __pyx_n_s_end, __pyx_n_s_control); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(6, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__167, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_text_bytes, 342, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(6, 342, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":384
 *         return deref(out)
 * 
 *     cpdef text(self, start=0, end=-1, control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract UTF-8 decoded text from given page range.
 * 
 */
  __pyx_tuple__168 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_start, __pyx_n_s_end, __pyx_n_s_control); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(6, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_text, 384, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(6, 384, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__169 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__170 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__170, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(7, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__171 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DocumentPageIterator__set_state(self, __pyx_state)
 */
  __pyx_tuple__172 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__172, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":657
 * 
 * 
 *     def find_text(self, text, search_box=None, direction="top", case_sensitive=False,             # <<<<<<<<<<<<<<
 *                   wholeword=False, rotation=0):
 *         """Find the text in Page.
 */
  __pyx_tuple__173 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_text, __pyx_n_s_search_box, __pyx_n_s_direction, __pyx_n_s_case_sensitive, __pyx_n_s_wholeword, __pyx_n_s_rotation, __pyx_n_s_result); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(6, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(7, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_find_text, 657, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(6, 657, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":713
 * 
 * 
 *     def find_all_text(self, text, search_box=None, case_sensitive=False, wholeword=False,             # <<<<<<<<<<<<<<
 *                       rotation=0):
 *         """Find the `text` and get all the matches
 */
  __pyx_tuple__174 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_text, __pyx_n_s_search_box, __pyx_n_s_case_sensitive, __pyx_n_s_wholeword, __pyx_n_s_rotation, __pyx_n_s_res); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(6, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__174, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_find_all_text, 713, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(6, 713, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":745
 * 
 * 
 *     def text_bytes(self, page_area=None, TextControl control = None):             # <<<<<<<<<<<<<<
 *         """Parse and extract text bytes from current page.
 * 
 */
  __pyx_tuple__175 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_page_area, __pyx_n_s_control, __pyx_n_s_text_control, __pyx_n_s_out, __pyx_n_s_text_dev); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(6, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__175, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_text_bytes, 745, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(6, 745, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":792
 * 
 * 
 *     def text(self, page_area=None, control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract UTF-8 decoded text from current page.
 * 
 */
  __pyx_tuple__176 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_page_area, __pyx_n_s_control); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(6, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__176, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_text, 792, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(6, 792, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__177 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__178 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__178, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(7, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__179 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__179, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(7, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_page_iterator__set_state(self, __pyx_state)
 */
  __pyx_tuple__180 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__180, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(7, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__181 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__181, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PDFError, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__182 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__182, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_XPDFError, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__183 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__183)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__183, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PDFSyntaxError, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__184 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__184, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_XPDFConfigError, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__185 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__185)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__185, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PDFIOError, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__186 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PDFPermissionErro, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__187 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__187)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__187, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_XPDFInternalError, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__188 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__188, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_XPDFNotInplemente, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__189 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__189, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PDFOutputDevice, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__190 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__190)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__190, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_RawImageControl, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__191 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__191, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PDFImage, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__192 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__192)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__192, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_DocumentPageItera, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(7, 1, __pyx_L1_error)
  __pyx_tuple__193 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__193)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__193, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_page_iterator, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_107937227 = PyInt_FromLong(107937227L); if (unlikely(!__pyx_int_107937227)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_113232382 = PyInt_FromLong(113232382L); if (unlikely(!__pyx_int_113232382)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_185634786 = PyInt_FromLong(185634786L); if (unlikely(!__pyx_int_185634786)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_6pyxpdf_4xpdf_optional_deps = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6pyxpdf_4xpdf_available_deps = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6pyxpdf_4xpdf_IMAGE_MODES = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6pyxpdf_4xpdf_GFX_COLOR_SPACE_NAMES = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_6pyxpdf_4xpdf_IMAGE_STREAM_TYPES = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_type_6pyxpdf_4xpdf_PDFError.tp_base = (&((PyTypeObject*)PyExc_Exception)[0]);
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_PDFError) < 0) __PYX_ERR(2, 38, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_PDFError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_PDFError.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_PDFError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_PDFError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFError, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_PDFError) < 0) __PYX_ERR(2, 38, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_PDFError) < 0) __PYX_ERR(2, 38, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_PDFError = &__pyx_type_6pyxpdf_4xpdf_PDFError;
  __pyx_type_6pyxpdf_4xpdf_XPDFError.tp_base = __pyx_ptype_6pyxpdf_4xpdf_PDFError;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_XPDFError) < 0) __PYX_ERR(2, 46, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_XPDFError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_XPDFError.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_XPDFError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_XPDFError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_XPDFError, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_XPDFError) < 0) __PYX_ERR(2, 46, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_XPDFError) < 0) __PYX_ERR(2, 46, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_XPDFError = &__pyx_type_6pyxpdf_4xpdf_XPDFError;
  __pyx_type_6pyxpdf_4xpdf_PDFSyntaxError.tp_base = __pyx_ptype_6pyxpdf_4xpdf_XPDFError;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_PDFSyntaxError) < 0) __PYX_ERR(2, 59, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_PDFSyntaxError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_PDFSyntaxError.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_PDFSyntaxError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_PDFSyntaxError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFSyntaxError, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_PDFSyntaxError) < 0) __PYX_ERR(2, 59, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_PDFSyntaxError) < 0) __PYX_ERR(2, 59, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_PDFSyntaxError = &__pyx_type_6pyxpdf_4xpdf_PDFSyntaxError;
  __pyx_type_6pyxpdf_4xpdf_XPDFConfigError.tp_base = __pyx_ptype_6pyxpdf_4xpdf_XPDFError;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_XPDFConfigError) < 0) __PYX_ERR(2, 64, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_XPDFConfigError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_XPDFConfigError.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_XPDFConfigError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_XPDFConfigError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_XPDFConfigError, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_XPDFConfigError) < 0) __PYX_ERR(2, 64, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_XPDFConfigError) < 0) __PYX_ERR(2, 64, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError = &__pyx_type_6pyxpdf_4xpdf_XPDFConfigError;
  __pyx_type_6pyxpdf_4xpdf_PDFIOError.tp_base = __pyx_ptype_6pyxpdf_4xpdf_XPDFError;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_PDFIOError) < 0) __PYX_ERR(2, 69, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_PDFIOError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_PDFIOError.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_PDFIOError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_PDFIOError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFIOError, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_PDFIOError) < 0) __PYX_ERR(2, 69, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_PDFIOError) < 0) __PYX_ERR(2, 69, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_PDFIOError = &__pyx_type_6pyxpdf_4xpdf_PDFIOError;
  __pyx_type_6pyxpdf_4xpdf_PDFPermissionError.tp_base = __pyx_ptype_6pyxpdf_4xpdf_XPDFError;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_PDFPermissionError) < 0) __PYX_ERR(2, 74, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_PDFPermissionError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_PDFPermissionError.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_PDFPermissionError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_PDFPermissionError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFPermissionError, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_PDFPermissionError) < 0) __PYX_ERR(2, 74, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_PDFPermissionError) < 0) __PYX_ERR(2, 74, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError = &__pyx_type_6pyxpdf_4xpdf_PDFPermissionError;
  __pyx_type_6pyxpdf_4xpdf_XPDFInternalError.tp_base = __pyx_ptype_6pyxpdf_4xpdf_XPDFError;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_XPDFInternalError) < 0) __PYX_ERR(2, 79, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_XPDFInternalError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_XPDFInternalError.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_XPDFInternalError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_XPDFInternalError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_XPDFInternalError, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_XPDFInternalError) < 0) __PYX_ERR(2, 79, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_XPDFInternalError) < 0) __PYX_ERR(2, 79, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_XPDFInternalError = &__pyx_type_6pyxpdf_4xpdf_XPDFInternalError;
  __pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError.tp_base = __pyx_ptype_6pyxpdf_4xpdf_XPDFError;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError) < 0) __PYX_ERR(2, 84, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_XPDFNotInplementedError, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError) < 0) __PYX_ERR(2, 84, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError) < 0) __PYX_ERR(2, 84, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_XPDFNotInplementedError = &__pyx_type_6pyxpdf_4xpdf_XPDFNotInplementedError;
  __pyx_vtabptr_6pyxpdf_4xpdf__GlobalParamsConfig = &__pyx_vtable_6pyxpdf_4xpdf__GlobalParamsConfig;
  __pyx_vtable_6pyxpdf_4xpdf__GlobalParamsConfig._set_defaults = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *))__pyx_f_6pyxpdf_4xpdf_19_GlobalParamsConfig__set_defaults;
  __pyx_vtable_6pyxpdf_4xpdf__GlobalParamsConfig._get_default_xpdfrc = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf__GlobalParamsConfig *))__pyx_f_6pyxpdf_4xpdf_19_GlobalParamsConfig__get_default_xpdfrc;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig) < 0) __PYX_ERR(3, 11, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf__GlobalParamsConfig) < 0) __PYX_ERR(3, 11, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GlobalParamsConfig, (PyObject *)&__pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig) < 0) __PYX_ERR(3, 11, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig) < 0) __PYX_ERR(3, 11, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig = &__pyx_type_6pyxpdf_4xpdf__GlobalParamsConfig;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_PDFOutputDevice) < 0) __PYX_ERR(5, 3, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_PDFOutputDevice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_PDFOutputDevice.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_PDFOutputDevice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_PDFOutputDevice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFOutputDevice, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_PDFOutputDevice) < 0) __PYX_ERR(5, 3, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_PDFOutputDevice) < 0) __PYX_ERR(5, 3, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice = &__pyx_type_6pyxpdf_4xpdf_PDFOutputDevice;
  __pyx_vtabptr_6pyxpdf_4xpdf_TextControl = &__pyx_vtable_6pyxpdf_4xpdf_TextControl;
  __pyx_vtable_6pyxpdf_4xpdf_TextControl.get_c_control = (TextOutputControl *(*)(struct __pyx_obj_6pyxpdf_4xpdf_TextControl *))__pyx_f_6pyxpdf_4xpdf_11TextControl_get_c_control;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_TextControl) < 0) __PYX_ERR(8, 6, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_TextControl.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_TextControl.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_TextControl.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_TextControl.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf_TextControl.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf_TextControl) < 0) __PYX_ERR(8, 6, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TextControl, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_TextControl) < 0) __PYX_ERR(8, 6, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_TextControl) < 0) __PYX_ERR(8, 6, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_TextControl = &__pyx_type_6pyxpdf_4xpdf_TextControl;
  __pyx_vtabptr_6pyxpdf_4xpdf_TextOutput = &__pyx_vtable_6pyxpdf_4xpdf_TextOutput;
  __pyx_vtable_6pyxpdf_4xpdf_TextOutput._get_bytes = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, int))__pyx_f_6pyxpdf_4xpdf_10TextOutput__get_bytes;
  __pyx_vtable_6pyxpdf_4xpdf_TextOutput._get_TextPage = (TextPage *(*)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, struct __pyx_opt_args_6pyxpdf_4xpdf_10TextOutput__get_TextPage *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_10TextOutput__get_TextPage;
  __pyx_vtable_6pyxpdf_4xpdf_TextOutput._init_cache = (void (*)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *))__pyx_f_6pyxpdf_4xpdf_10TextOutput__init_cache;
  __pyx_vtable_6pyxpdf_4xpdf_TextOutput.get_bytes = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, int, int __pyx_skip_dispatch))__pyx_f_6pyxpdf_4xpdf_10TextOutput_get_bytes;
  __pyx_vtable_6pyxpdf_4xpdf_TextOutput.get = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, int, int __pyx_skip_dispatch))__pyx_f_6pyxpdf_4xpdf_10TextOutput_get;
  __pyx_vtable_6pyxpdf_4xpdf_TextOutput.get_all = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_TextOutput *, int __pyx_skip_dispatch))__pyx_f_6pyxpdf_4xpdf_10TextOutput_get_all;
  __pyx_type_6pyxpdf_4xpdf_TextOutput.tp_base = __pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_TextOutput) < 0) __PYX_ERR(8, 144, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_TextOutput.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_TextOutput.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_TextOutput.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_TextOutput.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf_TextOutput.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf_TextOutput) < 0) __PYX_ERR(8, 144, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TextOutput_2, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_TextOutput) < 0) __PYX_ERR(8, 144, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_TextOutput) < 0) __PYX_ERR(8, 144, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_TextOutput = &__pyx_type_6pyxpdf_4xpdf_TextOutput;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_RawImageControl) < 0) __PYX_ERR(9, 217, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_RawImageControl.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_RawImageControl.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_RawImageControl.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_RawImageControl.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RawImageControl, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_RawImageControl) < 0) __PYX_ERR(9, 217, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_RawImageControl) < 0) __PYX_ERR(9, 217, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_RawImageControl = &__pyx_type_6pyxpdf_4xpdf_RawImageControl;
  __pyx_vtabptr_6pyxpdf_4xpdf_RawImageOutput = &__pyx_vtable_6pyxpdf_4xpdf_RawImageOutput;
  __pyx_vtable_6pyxpdf_4xpdf_RawImageOutput._init_SplashOutputDev = (int (*)(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *, PyObject *, int, SplashColorPtr, GBool, GBool))__pyx_f_6pyxpdf_4xpdf_14RawImageOutput__init_SplashOutputDev;
  __pyx_vtable_6pyxpdf_4xpdf_RawImageOutput._get_SplashBitmap = (SplashBitmap *(*)(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *, int, int, int, int, int, double, double, double, double))__pyx_f_6pyxpdf_4xpdf_14RawImageOutput__get_SplashBitmap;
  __pyx_vtable_6pyxpdf_4xpdf_RawImageOutput._get_normalize_SplashBitmap = (SplashBitmap *(*)(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *, int, int, int, int, int, double, double))__pyx_f_6pyxpdf_4xpdf_14RawImageOutput__get_normalize_SplashBitmap;
  __pyx_vtable_6pyxpdf_4xpdf_RawImageOutput.get = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_RawImageOutput *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_14RawImageOutput_get *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_14RawImageOutput_get;
  __pyx_type_6pyxpdf_4xpdf_RawImageOutput.tp_base = __pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_RawImageOutput) < 0) __PYX_ERR(9, 221, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_RawImageOutput.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_RawImageOutput.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_RawImageOutput.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_RawImageOutput.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf_RawImageOutput.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf_RawImageOutput) < 0) __PYX_ERR(9, 221, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RawImageOutput, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_RawImageOutput) < 0) __PYX_ERR(9, 221, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_RawImageOutput) < 0) __PYX_ERR(9, 221, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_RawImageOutput = &__pyx_type_6pyxpdf_4xpdf_RawImageOutput;
  __pyx_vtabptr_6pyxpdf_4xpdf_PDFImage = &__pyx_vtable_6pyxpdf_4xpdf_PDFImage;
  __pyx_vtable_6pyxpdf_4xpdf_PDFImage.from_ptr = (struct __pyx_obj_6pyxpdf_4xpdf_PDFImage *(*)(PDFBitmapImage *))__pyx_f_6pyxpdf_4xpdf_8PDFImage_from_ptr;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_PDFImage) < 0) __PYX_ERR(9, 503, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_PDFImage.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_PDFImage.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_PDFImage.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_PDFImage.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf_PDFImage.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf_PDFImage) < 0) __PYX_ERR(9, 503, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFImage, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_PDFImage) < 0) __PYX_ERR(9, 503, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_PDFImage) < 0) __PYX_ERR(9, 503, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_PDFImage = &__pyx_type_6pyxpdf_4xpdf_PDFImage;
  __pyx_vtabptr_6pyxpdf_4xpdf_PDFImageOutput = &__pyx_vtable_6pyxpdf_4xpdf_PDFImageOutput;
  __pyx_vtable_6pyxpdf_4xpdf_PDFImageOutput._get_PDFBitmapImages = (int (*)(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *, PyObject *, std::vector<PDFBitmapImage>  *))__pyx_f_6pyxpdf_4xpdf_14PDFImageOutput__get_PDFBitmapImages;
  __pyx_vtable_6pyxpdf_4xpdf_PDFImageOutput._get_images = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *, PyObject *))__pyx_f_6pyxpdf_4xpdf_14PDFImageOutput__get_images;
  __pyx_vtable_6pyxpdf_4xpdf_PDFImageOutput.get = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_PDFImageOutput *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pyxpdf_4xpdf_14PDFImageOutput_get;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_PDFImageOutput) < 0) __PYX_ERR(9, 564, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_PDFImageOutput.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_PDFImageOutput.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_PDFImageOutput.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_PDFImageOutput.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf_PDFImageOutput.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf_PDFImageOutput) < 0) __PYX_ERR(9, 564, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFImageOutput, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_PDFImageOutput) < 0) __PYX_ERR(9, 564, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_PDFImageOutput) < 0) __PYX_ERR(9, 564, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_PDFImageOutput = &__pyx_type_6pyxpdf_4xpdf_PDFImageOutput;
  __pyx_vtabptr_6pyxpdf_4xpdf_Document = &__pyx_vtable_6pyxpdf_4xpdf_Document;
  __pyx_vtable_6pyxpdf_4xpdf_Document.get_catalog = (Catalog *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *))__pyx_f_6pyxpdf_4xpdf_8Document_get_catalog;
  __pyx_vtable_6pyxpdf_4xpdf_Document.display_pages = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, OutputDev *, int, int, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_display_pages *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_8Document_display_pages;
  __pyx_vtable_6pyxpdf_4xpdf_Document.get_info_dict = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *))__pyx_f_6pyxpdf_4xpdf_8Document_get_info_dict;
  __pyx_vtable_6pyxpdf_4xpdf_Document.get_metadata = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *))__pyx_f_6pyxpdf_4xpdf_8Document_get_metadata;
  __pyx_vtable_6pyxpdf_4xpdf_Document._load_from_file = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, GString *))__pyx_f_6pyxpdf_4xpdf_8Document__load_from_file;
  __pyx_vtable_6pyxpdf_4xpdf_Document._load_from_char_array = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, char *, int))__pyx_f_6pyxpdf_4xpdf_8Document__load_from_char_array;
  __pyx_vtable_6pyxpdf_4xpdf_Document.check = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *))__pyx_f_6pyxpdf_4xpdf_8Document_check;
  __pyx_vtable_6pyxpdf_4xpdf_Document.label_to_index = (int (*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, PyObject *))__pyx_f_6pyxpdf_4xpdf_8Document_label_to_index;
  __pyx_vtable_6pyxpdf_4xpdf_Document.get_page = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, int))__pyx_f_6pyxpdf_4xpdf_8Document_get_page;
  __pyx_vtable_6pyxpdf_4xpdf_Document.text_bytes = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text_bytes *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_8Document_text_bytes;
  __pyx_vtable_6pyxpdf_4xpdf_Document.text = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Document *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_8Document_text *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_8Document_text;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_Document) < 0) __PYX_ERR(6, 17, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_Document.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_Document.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_Document.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_Document.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6pyxpdf_4xpdf_Document, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(6, 17, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6pyxpdf_4xpdf_8Document___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pyxpdf_4xpdf_8Document___init__.doc = __pyx_doc_6pyxpdf_4xpdf_8Document___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pyxpdf_4xpdf_8Document___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf_Document.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf_Document) < 0) __PYX_ERR(6, 17, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Document, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_Document) < 0) __PYX_ERR(6, 17, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_Document) < 0) __PYX_ERR(6, 17, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_Document = &__pyx_type_6pyxpdf_4xpdf_Document;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_DocumentPageIterator) < 0) __PYX_ERR(6, 425, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_DocumentPageIterator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_DocumentPageIterator.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_DocumentPageIterator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_DocumentPageIterator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DocumentPageIterator, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_DocumentPageIterator) < 0) __PYX_ERR(6, 425, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_DocumentPageIterator) < 0) __PYX_ERR(6, 425, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_DocumentPageIterator = &__pyx_type_6pyxpdf_4xpdf_DocumentPageIterator;
  __pyx_vtabptr_6pyxpdf_4xpdf_Page = &__pyx_vtable_6pyxpdf_4xpdf_Page;
  __pyx_vtable_6pyxpdf_4xpdf_Page.display_slice = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Page *, OutputDev *, int, int, int, int, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display_slice *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_4Page_display_slice;
  __pyx_vtable_6pyxpdf_4xpdf_Page.display = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Page *, OutputDev *, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page_display *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_4Page_display;
  __pyx_vtable_6pyxpdf_4xpdf_Page._init_TextPage = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Page *, int))__pyx_f_6pyxpdf_4xpdf_4Page__init_TextPage;
  __pyx_vtable_6pyxpdf_4xpdf_Page.get_label = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Page *))__pyx_f_6pyxpdf_4xpdf_4Page_get_label;
  __pyx_vtable_6pyxpdf_4xpdf_Page._find_text = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_Page *, PyObject *, struct __pyx_opt_args_6pyxpdf_4xpdf_4Page__find_text *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_4Page__find_text;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_Page) < 0) __PYX_ERR(6, 445, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_Page.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_Page.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_Page.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_Page.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6pyxpdf_4xpdf_Page, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(6, 445, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6pyxpdf_4xpdf_4Page___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6pyxpdf_4xpdf_4Page___init__.doc = __pyx_doc_6pyxpdf_4xpdf_4Page___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6pyxpdf_4xpdf_4Page___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf_Page.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf_Page) < 0) __PYX_ERR(6, 445, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Page, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_Page) < 0) __PYX_ERR(6, 445, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_Page) < 0) __PYX_ERR(6, 445, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_Page = &__pyx_type_6pyxpdf_4xpdf_Page;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_page_iterator) < 0) __PYX_ERR(6, 831, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_page_iterator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_page_iterator.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_page_iterator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_page_iterator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_page_iterator, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_page_iterator) < 0) __PYX_ERR(6, 831, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_page_iterator) < 0) __PYX_ERR(6, 831, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_page_iterator = &__pyx_type_6pyxpdf_4xpdf_page_iterator;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text) < 0) __PYX_ERR(6, 713, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text = &__pyx_type_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initxpdf(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initxpdf(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_xpdf(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_xpdf(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_xpdf(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'xpdf' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_xpdf(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("xpdf", __pyx_methods, __pyx_k_XPDF_objects_warpper_module_This, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyxpdf__xpdf) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyxpdf.xpdf")) {
      if (unlikely(PyDict_SetItemString(modules, "pyxpdf.xpdf", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_xpdf(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "pyxpdf/xpdf.pyx":12
 * import cython
 * 
 * __all__ = [             # <<<<<<<<<<<<<<
 *     # PDF utils
 *     "pdftotext_raw",
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(0, 12, __pyx_L1_error))
  __pyx_t_1 = PyList_New(18); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_pdftotext_raw);
  __Pyx_GIVEREF(__pyx_n_u_pdftotext_raw);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_pdftotext_raw);
  __Pyx_INCREF(__pyx_n_u_Document);
  __Pyx_GIVEREF(__pyx_n_u_Document);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_Document);
  __Pyx_INCREF(__pyx_n_u_Page);
  __Pyx_GIVEREF(__pyx_n_u_Page);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_u_Page);
  __Pyx_INCREF(__pyx_n_u_Config);
  __Pyx_GIVEREF(__pyx_n_u_Config);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_u_Config);
  __Pyx_INCREF(__pyx_n_u_PDFOutputDevice);
  __Pyx_GIVEREF(__pyx_n_u_PDFOutputDevice);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_u_PDFOutputDevice);
  __Pyx_INCREF(__pyx_n_u_TextControl);
  __Pyx_GIVEREF(__pyx_n_u_TextControl);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_u_TextControl);
  __Pyx_INCREF(__pyx_n_u_TextOutput_2);
  __Pyx_GIVEREF(__pyx_n_u_TextOutput_2);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_u_TextOutput_2);
  __Pyx_INCREF(__pyx_n_u_RawImageOutput);
  __Pyx_GIVEREF(__pyx_n_u_RawImageOutput);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_u_RawImageOutput);
  __Pyx_INCREF(__pyx_n_u_PDFImageOutput);
  __Pyx_GIVEREF(__pyx_n_u_PDFImageOutput);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_u_PDFImageOutput);
  __Pyx_INCREF(__pyx_n_u_page_iterator);
  __Pyx_GIVEREF(__pyx_n_u_page_iterator);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_u_page_iterator);
  __Pyx_INCREF(__pyx_n_u_PDFError);
  __Pyx_GIVEREF(__pyx_n_u_PDFError);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_u_PDFError);
  __Pyx_INCREF(__pyx_n_u_XPDFError);
  __Pyx_GIVEREF(__pyx_n_u_XPDFError);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_u_XPDFError);
  __Pyx_INCREF(__pyx_n_u_PDFSyntaxError);
  __Pyx_GIVEREF(__pyx_n_u_PDFSyntaxError);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_u_PDFSyntaxError);
  __Pyx_INCREF(__pyx_n_u_XPDFConfigError);
  __Pyx_GIVEREF(__pyx_n_u_XPDFConfigError);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_u_XPDFConfigError);
  __Pyx_INCREF(__pyx_n_u_PDFIOError);
  __Pyx_GIVEREF(__pyx_n_u_PDFIOError);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_u_PDFIOError);
  __Pyx_INCREF(__pyx_n_u_PDFPermissionError);
  __Pyx_GIVEREF(__pyx_n_u_PDFPermissionError);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_u_PDFPermissionError);
  __Pyx_INCREF(__pyx_n_u_XPDFInternalError);
  __Pyx_GIVEREF(__pyx_n_u_XPDFInternalError);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_u_XPDFInternalError);
  __Pyx_INCREF(__pyx_n_u_XPDFNotInplementedError);
  __Pyx_GIVEREF(__pyx_n_u_XPDFNotInplementedError);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_u_XPDFNotInplementedError);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyxpdf/xpdf.pyx":46
 * # load optional dependencies
 * #######################################################
 * cdef tuple optional_deps = ('pyxpdf_data', 'PIL.Image')             # <<<<<<<<<<<<<<
 * cdef dict available_deps = dict()
 * 
 */
  __Pyx_TraceLine(46,0,__PYX_ERR(0, 46, __pyx_L1_error))
  __Pyx_INCREF(__pyx_tuple__120);
  __Pyx_XGOTREF(__pyx_v_6pyxpdf_4xpdf_optional_deps);
  __Pyx_DECREF_SET(__pyx_v_6pyxpdf_4xpdf_optional_deps, __pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "pyxpdf/xpdf.pyx":47
 * #######################################################
 * cdef tuple optional_deps = ('pyxpdf_data', 'PIL.Image')
 * cdef dict available_deps = dict()             # <<<<<<<<<<<<<<
 * 
 * cdef int load_deps() except -1:
 */
  __Pyx_TraceLine(47,0,__PYX_ERR(0, 47, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6pyxpdf_4xpdf_available_deps);
  __Pyx_DECREF_SET(__pyx_v_6pyxpdf_4xpdf_available_deps, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyxpdf/xpdf.pyx":49
 * cdef dict available_deps = dict()
 * 
 * cdef int load_deps() except -1:             # <<<<<<<<<<<<<<
 *     global available_deps
 *     global optional_deps
 */
  __Pyx_TraceLine(49,0,__PYX_ERR(0, 49, __pyx_L1_error))


  /* "pyxpdf/xpdf.pyx":81
 *     return 0
 * 
 * load_deps()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(81,0,__PYX_ERR(0, 81, __pyx_L1_error))
  __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_load_deps(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 81, __pyx_L1_error)

  /* "src/pyxpdf/helper.pxi":6
 * from pyxpdf.includes.TextString cimport TextString
 * 
 * cdef inline bytes _chars(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(1, 6, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":12
 *     return s
 * 
 * cdef inline bytes _utf8_bytes(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(1, 12, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":18
 *     return s
 * 
 * cdef inline bytes _utf32_bytes(object s):             # <<<<<<<<<<<<<<
 *     if type(s) is unicode:
 *         # encode to the specific encoding used inside of the module
 */
  __Pyx_TraceLine(18,0,__PYX_ERR(1, 18, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":29
 *     return s
 * 
 * cdef inline GString* to_GString(object s):             # <<<<<<<<<<<<<<
 *     return new GString(_chars(s))
 * 
 */
  __Pyx_TraceLine(29,0,__PYX_ERR(1, 29, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":32
 *     return new GString(_chars(s))
 * 
 * cdef inline object GString_to_unicode(GString *gstr):             # <<<<<<<<<<<<<<
 *     if gstr is not NULL:
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8", errors='ignore')
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(1, 32, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":38
 *         return ""
 * 
 * cdef inline GBool_to_bool(GBool b):             # <<<<<<<<<<<<<<
 *     return True if b == gTrue else False
 * 
 */
  __Pyx_TraceLine(38,0,__PYX_ERR(1, 38, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":41
 *     return True if b == gTrue else False
 * 
 * cdef inline GBool to_GBool(pyb):             # <<<<<<<<<<<<<<
 *     return gTrue if pyb else gFalse
 * 
 */
  __Pyx_TraceLine(41,0,__PYX_ERR(1, 41, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":45
 * 
 * 
 * cdef inline PDFRectangle_to_tuple(PDFRectangle *rect):             # <<<<<<<<<<<<<<
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)
 */
  __Pyx_TraceLine(45,0,__PYX_ERR(1, 45, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":50
 *     return rect_tp
 * 
 * cdef int utf32_to_Unicode_vector(text, vector[Unicode]& vec) except -1:             # <<<<<<<<<<<<<<
 *     cdef bytes by = _utf32_bytes(text)
 *     cdef char* ch = by
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(1, 50, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":68
 * 
 * 
 * cdef dict Dict_to_pydict(Dict* xdict, dict pydict = {}):             # <<<<<<<<<<<<<<
 *     cdef Object obj
 *     cdef const char* key
 */
  __Pyx_TraceLine(68,0,__PYX_ERR(1, 68, __pyx_L1_error))

  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__5 = ((PyObject*)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/helper.pxi":84
 * #    return GString_to_unicode(text_str.toPDFTextString())
 * 
 * cdef TextString* to_TextString(tstr):             # <<<<<<<<<<<<<<
 *     cdef:
 *         unique_ptr[GString] gstr
 */
  __Pyx_TraceLine(84,0,__PYX_ERR(1, 84, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":92
 *     return text_string
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):             # <<<<<<<<<<<<<<
 *     (<string*>stream)[0] += string(text, length)
 */
  __Pyx_TraceLine(92,0,__PYX_ERR(1, 92, __pyx_L1_error))


  /* "src/pyxpdf/pdferror.pxi":9
 * 
 * ErrorCodesDict = {
 *     errNone : "Error None",             # <<<<<<<<<<<<<<
 *     errOpenFile : "Error Opening file.",
 *     errBadCatalog : "Error Parsing PDF Catalog",
 */
  __Pyx_TraceLine(9,0,__PYX_ERR(2, 9, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(errNone); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_None) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":10
 * ErrorCodesDict = {
 *     errNone : "Error None",
 *     errOpenFile : "Error Opening file.",             # <<<<<<<<<<<<<<
 *     errBadCatalog : "Error Parsing PDF Catalog",
 *     errDamaged : "Error Parsing PDF File. File might be damaged",
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(2, 10, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errOpenFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_Opening_file) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":11
 *     errNone : "Error None",
 *     errOpenFile : "Error Opening file.",
 *     errBadCatalog : "Error Parsing PDF Catalog",             # <<<<<<<<<<<<<<
 *     errDamaged : "Error Parsing PDF File. File might be damaged",
 *     errEncrypted : "Error decrypting PDF File",
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(2, 11, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errBadCatalog); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_Parsing_PDF_Catalog) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":12
 *     errOpenFile : "Error Opening file.",
 *     errBadCatalog : "Error Parsing PDF Catalog",
 *     errDamaged : "Error Parsing PDF File. File might be damaged",             # <<<<<<<<<<<<<<
 *     errEncrypted : "Error decrypting PDF File",
 *     # No idea what errhighlightfile is?
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(2, 12, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errDamaged); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_Parsing_PDF_File_File_migh) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":13
 *     errBadCatalog : "Error Parsing PDF Catalog",
 *     errDamaged : "Error Parsing PDF File. File might be damaged",
 *     errEncrypted : "Error decrypting PDF File",             # <<<<<<<<<<<<<<
 *     # No idea what errhighlightfile is?
 *     errHighlightFile : "Error File Highlight",
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(2, 13, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errEncrypted); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_decrypting_PDF_File) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":15
 *     errEncrypted : "Error decrypting PDF File",
 *     # No idea what errhighlightfile is?
 *     errHighlightFile : "Error File Highlight",             # <<<<<<<<<<<<<<
 *     errBadPrinter : "Error Bad Printer",
 *     errPrinting : "Error Printing",
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(2, 15, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errHighlightFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_File_Highlight) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":16
 *     # No idea what errhighlightfile is?
 *     errHighlightFile : "Error File Highlight",
 *     errBadPrinter : "Error Bad Printer",             # <<<<<<<<<<<<<<
 *     errPrinting : "Error Printing",
 *     errPermission : "Error PDF Permissions",
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(2, 16, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errBadPrinter); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_Bad_Printer) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":17
 *     errHighlightFile : "Error File Highlight",
 *     errBadPrinter : "Error Bad Printer",
 *     errPrinting : "Error Printing",             # <<<<<<<<<<<<<<
 *     errPermission : "Error PDF Permissions",
 *     errBadPageNum : "Error Bad PDF Page Number",
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(2, 17, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errPrinting); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_Printing) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":18
 *     errBadPrinter : "Error Bad Printer",
 *     errPrinting : "Error Printing",
 *     errPermission : "Error PDF Permissions",             # <<<<<<<<<<<<<<
 *     errBadPageNum : "Error Bad PDF Page Number",
 *     errFileIO : "Error while r/w File"
 */
  __Pyx_TraceLine(18,0,__PYX_ERR(2, 18, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errPermission); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_PDF_Permissions) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":19
 *     errPrinting : "Error Printing",
 *     errPermission : "Error PDF Permissions",
 *     errBadPageNum : "Error Bad PDF Page Number",             # <<<<<<<<<<<<<<
 *     errFileIO : "Error while r/w File"
 * }
 */
  __Pyx_TraceLine(19,0,__PYX_ERR(2, 19, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errBadPageNum); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_Bad_PDF_Page_Number) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":20
 *     errPermission : "Error PDF Permissions",
 *     errBadPageNum : "Error Bad PDF Page Number",
 *     errFileIO : "Error while r/w File"             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __Pyx_TraceLine(20,0,__PYX_ERR(2, 20, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errFileIO); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_kp_u_Error_while_r_w_File) < 0) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ErrorCodesDict, __pyx_t_1) < 0) __PYX_ERR(2, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/pdferror.pxi":24
 * 
 * ErrorCodeMapping = {
 *     errNone : XPDFError,             # <<<<<<<<<<<<<<
 *     errHighlightFile : XPDFError,
 *     errBadPrinter : XPDFError,
 */
  __Pyx_TraceLine(24,0,__PYX_ERR(2, 24, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(11); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_int(errNone); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":25
 * ErrorCodeMapping = {
 *     errNone : XPDFError,
 *     errHighlightFile : XPDFError,             # <<<<<<<<<<<<<<
 *     errBadPrinter : XPDFError,
 *     errPrinting : XPDFError,
 */
  __Pyx_TraceLine(25,0,__PYX_ERR(2, 25, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errHighlightFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":26
 *     errNone : XPDFError,
 *     errHighlightFile : XPDFError,
 *     errBadPrinter : XPDFError,             # <<<<<<<<<<<<<<
 *     errPrinting : XPDFError,
 *     errOpenFile : PDFIOError,
 */
  __Pyx_TraceLine(26,0,__PYX_ERR(2, 26, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errBadPrinter); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":27
 *     errHighlightFile : XPDFError,
 *     errBadPrinter : XPDFError,
 *     errPrinting : XPDFError,             # <<<<<<<<<<<<<<
 *     errOpenFile : PDFIOError,
 *     errBadPageNum : XPDFError,
 */
  __Pyx_TraceLine(27,0,__PYX_ERR(2, 27, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errPrinting); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":28
 *     errBadPrinter : XPDFError,
 *     errPrinting : XPDFError,
 *     errOpenFile : PDFIOError,             # <<<<<<<<<<<<<<
 *     errBadPageNum : XPDFError,
 *     errBadCatalog : PDFSyntaxError,
 */
  __Pyx_TraceLine(28,0,__PYX_ERR(2, 28, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errOpenFile); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFIOError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":29
 *     errPrinting : XPDFError,
 *     errOpenFile : PDFIOError,
 *     errBadPageNum : XPDFError,             # <<<<<<<<<<<<<<
 *     errBadCatalog : PDFSyntaxError,
 *     errDamaged : PDFSyntaxError,
 */
  __Pyx_TraceLine(29,0,__PYX_ERR(2, 29, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errBadPageNum); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":30
 *     errOpenFile : PDFIOError,
 *     errBadPageNum : XPDFError,
 *     errBadCatalog : PDFSyntaxError,             # <<<<<<<<<<<<<<
 *     errDamaged : PDFSyntaxError,
 *     errEncrypted : PDFPermissionError,
 */
  __Pyx_TraceLine(30,0,__PYX_ERR(2, 30, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errBadCatalog); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFSyntaxError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":31
 *     errBadPageNum : XPDFError,
 *     errBadCatalog : PDFSyntaxError,
 *     errDamaged : PDFSyntaxError,             # <<<<<<<<<<<<<<
 *     errEncrypted : PDFPermissionError,
 *     errPermission : PDFPermissionError,
 */
  __Pyx_TraceLine(31,0,__PYX_ERR(2, 31, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errDamaged); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFSyntaxError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":32
 *     errBadCatalog : PDFSyntaxError,
 *     errDamaged : PDFSyntaxError,
 *     errEncrypted : PDFPermissionError,             # <<<<<<<<<<<<<<
 *     errPermission : PDFPermissionError,
 *     errFileIO : PDFIOError
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(2, 32, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errEncrypted); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":33
 *     errDamaged : PDFSyntaxError,
 *     errEncrypted : PDFPermissionError,
 *     errPermission : PDFPermissionError,             # <<<<<<<<<<<<<<
 *     errFileIO : PDFIOError
 * }
 */
  __Pyx_TraceLine(33,0,__PYX_ERR(2, 33, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errPermission); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/pdferror.pxi":34
 *     errEncrypted : PDFPermissionError,
 *     errPermission : PDFPermissionError,
 *     errFileIO : PDFIOError             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __Pyx_TraceLine(34,0,__PYX_ERR(2, 34, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_int(errFileIO); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFIOError)) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ErrorCodeMapping, __pyx_t_1) < 0) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFError___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFError);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFError___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFError);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_9XPDFError_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFError___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFError);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_9XPDFError_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFError___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFError->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFError);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_14PDFSyntaxError_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSyntaxError___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFSyntaxError->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFSyntaxError);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFSyntaxError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFSyntaxError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_14PDFSyntaxError_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFSyntaxError___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFSyntaxError->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFSyntaxError);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_15XPDFConfigError_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFConfigError___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFConfigError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFConfigError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_15XPDFConfigError_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFConfigError___setstate_cytho, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFConfigError);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_10PDFIOError_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFIOError___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFIOError->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFIOError);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFIOError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFIOError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_10PDFIOError_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFIOError___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFIOError->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFIOError);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_18PDFPermissionError_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFPermissionError___reduce_cyth, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFPermissionError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFPermissionError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_18PDFPermissionError_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFPermissionError___setstate_cy, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFPermissionError);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_17XPDFInternalError_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFInternalError___reduce_cytho, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFInternalError->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFInternalError);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFInternalError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFInternalError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_17XPDFInternalError_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFInternalError___setstate_cyt, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFInternalError->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFInternalError);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_23XPDFNotInplementedError_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFNotInplementedError___reduce, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFNotInplementedError->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFNotInplementedError);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_XPDFNotInplementedError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_XPDFNotInplementedError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_23XPDFNotInplementedError_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFNotInplementedError___setsta, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFNotInplementedError->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFNotInplementedError);

  /* "src/pyxpdf/globalconfig.pxi":17
 *         public object __doc__
 * 
 *     cdef _set_defaults(self):             # <<<<<<<<<<<<<<
 *         # only call after initialising self._global
 *         # default text encoding
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(3, 17, __pyx_L1_error))


  /* "src/pyxpdf/globalconfig.pxi":22
 *         self._global.setTextEncoding("UTF-8")
 * 
 *     cdef _get_default_xpdfrc(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             object pyxpdf_data
 */
  __Pyx_TraceLine(22,0,__PYX_ERR(3, 22, __pyx_L1_error))


  /* "src/pyxpdf/globalconfig.pxi":35
 *         return cfg
 * 
 *     def load_file(self, cfg_path=None):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         if globalParams != NULL:
 */
  __Pyx_TraceLine(35,0,__PYX_ERR(3, 35, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_1load_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig_load_file, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig->tp_dict, __pyx_n_s_load_file, __pyx_t_1) < 0) __PYX_ERR(3, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig);

  /* "src/pyxpdf/globalconfig.pxi":51
 *         globalParams = self._global
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         self.load_file(self.cfg_path)
 * 
 */
  __Pyx_TraceLine(51,0,__PYX_ERR(3, 51, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_3reset, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig_reset, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig->tp_dict, __pyx_n_s_reset, __pyx_t_1) < 0) __PYX_ERR(3, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig);

  /* "src/pyxpdf/globalconfig.pxi":65
 * 
 * 
 *     def setup_base_fonts(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 */
  __Pyx_TraceLine(65,0,__PYX_ERR(3, 65, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_9setup_base_fonts, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig_setup_base_f, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig->tp_dict, __pyx_n_s_setup_base_fonts, __pyx_t_1) < 0) __PYX_ERR(3, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig);

  /* "src/pyxpdf/globalconfig.pxi":68
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 *     def add_font_file(self, font_name, file):             # <<<<<<<<<<<<<<
 *         #cdef:
 *         #    unique_ptr[GString] _fname, _fpath
 */
  __Pyx_TraceLine(68,0,__PYX_ERR(3, 68, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_11add_font_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig_add_font_fil, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig->tp_dict, __pyx_n_s_add_font_file, __pyx_t_1) < 0) __PYX_ERR(3, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig);

  /* "src/pyxpdf/globalconfig.pxi":87
 * 
 * 
 *     def map_name_to_unicode(self, char_name):             # <<<<<<<<<<<<<<
 *         return self._global.mapNameToUnicode(_chars(char_name))
 * 
 */
  __Pyx_TraceLine(87,0,__PYX_ERR(3, 87, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_13map_name_to_unicode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig_map_name_to, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig->tp_dict, __pyx_n_s_map_name_to_unicode, __pyx_t_1) < 0) __PYX_ERR(3, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_15__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig___reduce_cyt, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(7, 3, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_19_GlobalParamsConfig_17__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig___setstate_c, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/globalconfig.pxi":220
 * 
 * 
 * Config = _GlobalParamsConfig.__new__(_GlobalParamsConfig)             # <<<<<<<<<<<<<<
 * Config.__doc__ = \
 * """
 */
  __Pyx_TraceLine(220,0,__PYX_ERR(3, 220, __pyx_L1_error))
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6pyxpdf_4xpdf__GlobalParamsConfig(((PyTypeObject *)__pyx_ptype_6pyxpdf_4xpdf__GlobalParamsConfig), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 220, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Config, ((PyObject *)__pyx_t_1)) < 0) __PYX_ERR(3, 220, __pyx_L1_error)
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "src/pyxpdf/globalconfig.pxi":221
 * 
 * Config = _GlobalParamsConfig.__new__(_GlobalParamsConfig)
 * Config.__doc__ = \             # <<<<<<<<<<<<<<
 * """
 * Global XPDF config object
 */
  __Pyx_TraceLine(221,0,__PYX_ERR(3, 221, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Config); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_1, __pyx_n_s_doc_2, __pyx_kp_u_Global_XPDF_config_object_Metho) < 0) __PYX_ERR(3, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/pdftotext.pxi":7
 * 
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, ownerpass=None,             # <<<<<<<<<<<<<<
 *                     userpass=None, layout = "reading", double fixed_pitch=0,
 *                     double fixed_line_spacing=0, discard_clipped=False, discard_diagonal=False,
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(4, 7, __pyx_L1_error))

  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_1pdftotext_raw, 0, __pyx_n_s_pdftotext_raw, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdftotext_raw, __pyx_t_1) < 0) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/pdfoutput.pxi":8
 *     All PDF Output Device inherit from this.
 *     """
 *     def get(self, int page_no, **kwargs):             # <<<<<<<<<<<<<<
 *         """Get the output of `page_no` indexed page
 *         """
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(5, 8, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_15PDFOutputDevice_1get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFOutputDevice_get, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_dict, __pyx_n_s_get, __pyx_t_1) < 0) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_15PDFOutputDevice_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFOutputDevice___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFOutputDevice, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFOutputDevice__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_15PDFOutputDevice_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFOutputDevice___setstate_cytho, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFOutputDevice);

  /* "src/pyxpdf/textoutput.pxi":139
 *             raise ValueError("Invalid TexOutput Mode")
 * 
 *     cdef TextOutputControl* get_c_control(self):             # <<<<<<<<<<<<<<
 *         return &self._c_control
 * 
 */
  __Pyx_TraceLine(139,0,__PYX_ERR(8, 139, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TextControl___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(7, 3, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TextControl___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/textoutput.pxi":208
 *     # PRIVATE METHODS
 * 
 *     cdef bytes _get_bytes(self, int page_no):             # <<<<<<<<<<<<<<
 *         if self._cache_texts[page_no] == None:
 *             # load text
 */
  __Pyx_TraceLine(208,0,__PYX_ERR(8, 208, __pyx_L1_error))


  /* "src/pyxpdf/textoutput.pxi":214
 *         return self._cache_texts[page_no]
 * 
 *     cdef TextPage* _get_TextPage(self, page_no=0) except NULL:             # <<<<<<<<<<<<<<
 *         cdef:
 *             Page page = self.doc.get_page(page_no)
 */
  __Pyx_TraceLine(214,0,__PYX_ERR(8, 214, __pyx_L1_error))


  /* "src/pyxpdf/textoutput.pxi":236
 * 
 * 
 *     cdef void _init_cache(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[TextPage] _tp
 */
  __Pyx_TraceLine(236,0,__PYX_ERR(8, 236, __pyx_L1_error))


  /* "src/pyxpdf/textoutput.pxi":249
 *     # PUBLIC METHODS
 * 
 *     cpdef bytes get_bytes(self, int page_no):             # <<<<<<<<<<<<<<
 *         """Get the extracted text bytes from `page_no` indexed page
 * 
 */
  __Pyx_TraceLine(249,0,__PYX_ERR(8, 249, __pyx_L1_error))

  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_10TextOutput_5get_bytes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TextOutput_get_bytes, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_TextOutput->tp_dict, __pyx_n_s_get_bytes, __pyx_t_1) < 0) __PYX_ERR(8, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_TextOutput);

  /* "src/pyxpdf/textoutput.pxi":268
 *         return self._get_bytes(page_no)
 * 
 *     cpdef object get(self, int page_no):             # <<<<<<<<<<<<<<
 *         """Get the extracted `UTF-8` decoded :any:`str` from `page_no` indexed
 *         page
 */
  __Pyx_TraceLine(268,0,__PYX_ERR(8, 268, __pyx_L1_error))

  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_10TextOutput_7get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TextOutput_get, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_TextOutput->tp_dict, __pyx_n_s_get, __pyx_t_1) < 0) __PYX_ERR(8, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_TextOutput);

  /* "src/pyxpdf/textoutput.pxi":288
 *         return self._get_bytes(page_no).decode('UTF-8', errors='ignore')
 * 
 *     cpdef list get_all(self):             # <<<<<<<<<<<<<<
 *         """Get the extracted `UTF-8` decoded text from all pages
 * 
 */
  __Pyx_TraceLine(288,0,__PYX_ERR(8, 288, __pyx_L1_error))

  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_10TextOutput_9get_all, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TextOutput_get_all, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_TextOutput->tp_dict, __pyx_n_s_get_all, __pyx_t_1) < 0) __PYX_ERR(8, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_TextOutput);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_10TextOutput_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TextOutput___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(7, 3, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_10TextOutput_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TextOutput___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":40
 * 
 * #FIXME: buggy as hell, text does not render properly.
 * cdef bytearray splash_bitmap_to_1bpc_1comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y, i
 */
  __Pyx_TraceLine(40,0,__PYX_ERR(9, 40, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":60
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_1comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */
  __Pyx_TraceLine(60,0,__PYX_ERR(9, 60, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":79
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_1comp_with_alpha(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */
  __Pyx_TraceLine(79,0,__PYX_ERR(9, 79, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":102
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_4comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */
  __Pyx_TraceLine(102,0,__PYX_ERR(9, 102, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":124
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_3comp(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */
  __Pyx_TraceLine(124,0,__PYX_ERR(9, 124, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":146
 * 
 * 
 * cdef bytearray splash_bitmap_to_8bpc_3comp_with_alpha(SplashBitmap *bitmap):             # <<<<<<<<<<<<<<
 *     cdef:
 *         int idx, x, y
 */
  __Pyx_TraceLine(146,0,__PYX_ERR(9, 146, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":175
 * cdef dict IMAGE_MODES = {
 *     #raw mode     mode       SplashColorMode
 *     'RGB'   :   ('RGB',      SplashColorMode.splashModeRGB8),             # <<<<<<<<<<<<<<
 *     'RGBA'  :   ('RGBA',     SplashColorMode.splashModeRGB8),
 *     'BGR'   :   ('RGB',      SplashColorMode.splashModeBGR8),
 */
  __Pyx_TraceLine(175,0,__PYX_ERR(9, 175, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_SplashColorMode(splashModeRGB8); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_u_RGB);
  __Pyx_GIVEREF(__pyx_n_u_RGB);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_RGB);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_RGB, __pyx_t_4) < 0) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pyxpdf/imageoutput.pxi":176
 *     #raw mode     mode       SplashColorMode
 *     'RGB'   :   ('RGB',      SplashColorMode.splashModeRGB8),
 *     'RGBA'  :   ('RGBA',     SplashColorMode.splashModeRGB8),             # <<<<<<<<<<<<<<
 *     'BGR'   :   ('RGB',      SplashColorMode.splashModeBGR8),
 *     'BGRA'  :   ('RGBA',     SplashColorMode.splashModeBGR8),
 */
  __Pyx_TraceLine(176,0,__PYX_ERR(9, 176, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyInt_From_SplashColorMode(splashModeRGB8); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_RGBA);
  __Pyx_GIVEREF(__pyx_n_u_RGBA);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_RGBA);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_RGBA, __pyx_t_3) < 0) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":177
 *     'RGB'   :   ('RGB',      SplashColorMode.splashModeRGB8),
 *     'RGBA'  :   ('RGBA',     SplashColorMode.splashModeRGB8),
 *     'BGR'   :   ('RGB',      SplashColorMode.splashModeBGR8),             # <<<<<<<<<<<<<<
 *     'BGRA'  :   ('RGBA',     SplashColorMode.splashModeBGR8),
 *     'L'     :   ('L',        SplashColorMode.splashModeMono8),
 */
  __Pyx_TraceLine(177,0,__PYX_ERR(9, 177, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_SplashColorMode(splashModeBGR8); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_u_RGB);
  __Pyx_GIVEREF(__pyx_n_u_RGB);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_RGB);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_BGR, __pyx_t_4) < 0) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pyxpdf/imageoutput.pxi":178
 *     'RGBA'  :   ('RGBA',     SplashColorMode.splashModeRGB8),
 *     'BGR'   :   ('RGB',      SplashColorMode.splashModeBGR8),
 *     'BGRA'  :   ('RGBA',     SplashColorMode.splashModeBGR8),             # <<<<<<<<<<<<<<
 *     'L'     :   ('L',        SplashColorMode.splashModeMono8),
 *     'LA'    :   ('LA',       SplashColorMode.splashModeMono8),
 */
  __Pyx_TraceLine(178,0,__PYX_ERR(9, 178, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyInt_From_SplashColorMode(splashModeBGR8); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_RGBA);
  __Pyx_GIVEREF(__pyx_n_u_RGBA);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_RGBA);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_BGRA, __pyx_t_3) < 0) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":179
 *     'BGR'   :   ('RGB',      SplashColorMode.splashModeBGR8),
 *     'BGRA'  :   ('RGBA',     SplashColorMode.splashModeBGR8),
 *     'L'     :   ('L',        SplashColorMode.splashModeMono8),             # <<<<<<<<<<<<<<
 *     'LA'    :   ('LA',       SplashColorMode.splashModeMono8),
 *     '1'     :   ('1',        SplashColorMode.splashModeMono1),
 */
  __Pyx_TraceLine(179,0,__PYX_ERR(9, 179, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_SplashColorMode(splashModeMono8); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_u_L);
  __Pyx_GIVEREF(__pyx_n_u_L);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_L);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_L, __pyx_t_4) < 0) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pyxpdf/imageoutput.pxi":180
 *     'BGRA'  :   ('RGBA',     SplashColorMode.splashModeBGR8),
 *     'L'     :   ('L',        SplashColorMode.splashModeMono8),
 *     'LA'    :   ('LA',       SplashColorMode.splashModeMono8),             # <<<<<<<<<<<<<<
 *     '1'     :   ('1',        SplashColorMode.splashModeMono1),
 *     'CMYK'  :   ('CMYK',     SplashColorMode.splashModeCMYK8),
 */
  __Pyx_TraceLine(180,0,__PYX_ERR(9, 180, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyInt_From_SplashColorMode(splashModeMono8); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_LA);
  __Pyx_GIVEREF(__pyx_n_u_LA);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_LA);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_LA, __pyx_t_3) < 0) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":181
 *     'L'     :   ('L',        SplashColorMode.splashModeMono8),
 *     'LA'    :   ('LA',       SplashColorMode.splashModeMono8),
 *     '1'     :   ('1',        SplashColorMode.splashModeMono1),             # <<<<<<<<<<<<<<
 *     'CMYK'  :   ('CMYK',     SplashColorMode.splashModeCMYK8),
 * }
 */
  __Pyx_TraceLine(181,0,__PYX_ERR(9, 181, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_SplashColorMode(splashModeMono1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_kp_u_1);
  __Pyx_GIVEREF(__pyx_kp_u_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_u_1, __pyx_t_4) < 0) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "src/pyxpdf/imageoutput.pxi":182
 *     'LA'    :   ('LA',       SplashColorMode.splashModeMono8),
 *     '1'     :   ('1',        SplashColorMode.splashModeMono1),
 *     'CMYK'  :   ('CMYK',     SplashColorMode.splashModeCMYK8),             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __Pyx_TraceLine(182,0,__PYX_ERR(9, 182, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyInt_From_SplashColorMode(splashModeCMYK8); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_CMYK);
  __Pyx_GIVEREF(__pyx_n_u_CMYK);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_CMYK);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_CMYK, __pyx_t_3) < 0) __PYX_ERR(9, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_6pyxpdf_4xpdf_IMAGE_MODES);
  __Pyx_DECREF_SET(__pyx_v_6pyxpdf_4xpdf_IMAGE_MODES, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":185
 * }
 * 
 * cdef bytearray splash_bitmap_to_buffer(SplashBitmap *bitmap, mode):             # <<<<<<<<<<<<<<
 *     if mode == "CMYK":
 *         return splash_bitmap_to_8bpc_4comp(bitmap)
 */
  __Pyx_TraceLine(185,0,__PYX_ERR(9, 185, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":206
 * 
 * 
 * cdef object pillow_image_from_buffer(object mode, int height, int width, object buffer):             # <<<<<<<<<<<<<<
 *     if not ("PIL.Image" in available_deps):
 *         raise PDFError("'Pillow' is not installed. Please install it.")
 */
  __Pyx_TraceLine(206,0,__PYX_ERR(9, 206, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_15RawImageControl_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawImageControl___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_RawImageControl->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_RawImageControl);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RawImageControl, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RawImageControl__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_15RawImageControl_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawImageControl___setstate_cytho, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_RawImageControl->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_RawImageControl);

  /* "src/pyxpdf/imageoutput.pxi":337
 * 
 * 
 *     cdef int _init_SplashOutputDev(self, object mode, int row_pad,             # <<<<<<<<<<<<<<
 *                                    SplashColorPtr paper_color,
 *                                    GBool bitmap_topdown, GBool anti_alias) except -1:
 */
  __Pyx_TraceLine(337,0,__PYX_ERR(9, 337, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":351
 * 
 * 
 *     cdef SplashBitmap* _get_SplashBitmap(self, int page_no, int x, int y,             # <<<<<<<<<<<<<<
 *                                          int w, int h, double page_h,
 *                                          double page_w, double res_x,
 */
  __Pyx_TraceLine(351,0,__PYX_ERR(9, 351, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":374
 * 
 * 
 *     cdef SplashBitmap* _get_normalize_SplashBitmap(self, int page_no, int crop_x, int crop_y,             # <<<<<<<<<<<<<<
 *                                                    int crop_h, int crop_w, double scale_x,
 *                                                    double scale_y) except NULL:
 */
  __Pyx_TraceLine(374,0,__PYX_ERR(9, 374, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":429
 * 
 * 
 *     cpdef object get(self, int page_no, crop_box=(0,0,0,0), scale_pixel_box = None):             # <<<<<<<<<<<<<<
 *         """Get the rendered :class:`~PIL.Image.Image` for `page_no` indexed page
 * 
 */
  __Pyx_TraceLine(429,0,__PYX_ERR(9, 429, __pyx_L1_error))

  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_14RawImageOutput_3get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawImageOutput_get, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_RawImageOutput->tp_dict, __pyx_n_s_get, __pyx_t_1) < 0) __PYX_ERR(9, 429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_RawImageOutput);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_14RawImageOutput_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawImageOutput___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(7, 3, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_14RawImageOutput_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RawImageOutput___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":479
 * 
 * cdef dict GFX_COLOR_SPACE_NAMES = {
 *     GfxColorSpaceMode.csDeviceGray  :   u"gray",             # <<<<<<<<<<<<<<
 *     GfxColorSpaceMode.csCalGray     :   u"gray",
 *     GfxColorSpaceMode.csDeviceRGB   :   u"rgb",
 */
  __Pyx_TraceLine(479,0,__PYX_ERR(9, 479, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(10); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csDeviceGray); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_gray) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":480
 * cdef dict GFX_COLOR_SPACE_NAMES = {
 *     GfxColorSpaceMode.csDeviceGray  :   u"gray",
 *     GfxColorSpaceMode.csCalGray     :   u"gray",             # <<<<<<<<<<<<<<
 *     GfxColorSpaceMode.csDeviceRGB   :   u"rgb",
 *     GfxColorSpaceMode.csCalRGB      :   u"rgb",
 */
  __Pyx_TraceLine(480,0,__PYX_ERR(9, 480, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csCalGray); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_gray) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":481
 *     GfxColorSpaceMode.csDeviceGray  :   u"gray",
 *     GfxColorSpaceMode.csCalGray     :   u"gray",
 *     GfxColorSpaceMode.csDeviceRGB   :   u"rgb",             # <<<<<<<<<<<<<<
 *     GfxColorSpaceMode.csCalRGB      :   u"rgb",
 *     GfxColorSpaceMode.csDeviceCMYK  :   u"cmyk",
 */
  __Pyx_TraceLine(481,0,__PYX_ERR(9, 481, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csDeviceRGB); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_rgb) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":482
 *     GfxColorSpaceMode.csCalGray     :   u"gray",
 *     GfxColorSpaceMode.csDeviceRGB   :   u"rgb",
 *     GfxColorSpaceMode.csCalRGB      :   u"rgb",             # <<<<<<<<<<<<<<
 *     GfxColorSpaceMode.csDeviceCMYK  :   u"cmyk",
 *     GfxColorSpaceMode.csLab         :   u"lab",
 */
  __Pyx_TraceLine(482,0,__PYX_ERR(9, 482, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csCalRGB); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_rgb) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":483
 *     GfxColorSpaceMode.csDeviceRGB   :   u"rgb",
 *     GfxColorSpaceMode.csCalRGB      :   u"rgb",
 *     GfxColorSpaceMode.csDeviceCMYK  :   u"cmyk",             # <<<<<<<<<<<<<<
 *     GfxColorSpaceMode.csLab         :   u"lab",
 *     GfxColorSpaceMode.csICCBased    :   u"icc",
 */
  __Pyx_TraceLine(483,0,__PYX_ERR(9, 483, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csDeviceCMYK); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_cmyk) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":484
 *     GfxColorSpaceMode.csCalRGB      :   u"rgb",
 *     GfxColorSpaceMode.csDeviceCMYK  :   u"cmyk",
 *     GfxColorSpaceMode.csLab         :   u"lab",             # <<<<<<<<<<<<<<
 *     GfxColorSpaceMode.csICCBased    :   u"icc",
 *     GfxColorSpaceMode.csIndexed     :   u"index",
 */
  __Pyx_TraceLine(484,0,__PYX_ERR(9, 484, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csLab); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_lab) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":485
 *     GfxColorSpaceMode.csDeviceCMYK  :   u"cmyk",
 *     GfxColorSpaceMode.csLab         :   u"lab",
 *     GfxColorSpaceMode.csICCBased    :   u"icc",             # <<<<<<<<<<<<<<
 *     GfxColorSpaceMode.csIndexed     :   u"index",
 *     GfxColorSpaceMode.csSeparation  :   u"sep",
 */
  __Pyx_TraceLine(485,0,__PYX_ERR(9, 485, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csICCBased); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_icc) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":486
 *     GfxColorSpaceMode.csLab         :   u"lab",
 *     GfxColorSpaceMode.csICCBased    :   u"icc",
 *     GfxColorSpaceMode.csIndexed     :   u"index",             # <<<<<<<<<<<<<<
 *     GfxColorSpaceMode.csSeparation  :   u"sep",
 *     GfxColorSpaceMode.csDeviceN     :   u"devn",
 */
  __Pyx_TraceLine(486,0,__PYX_ERR(9, 486, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csIndexed); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_index) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":487
 *     GfxColorSpaceMode.csICCBased    :   u"icc",
 *     GfxColorSpaceMode.csIndexed     :   u"index",
 *     GfxColorSpaceMode.csSeparation  :   u"sep",             # <<<<<<<<<<<<<<
 *     GfxColorSpaceMode.csDeviceN     :   u"devn",
 *     # not including csPattern
 */
  __Pyx_TraceLine(487,0,__PYX_ERR(9, 487, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csSeparation); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_sep) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":488
 *     GfxColorSpaceMode.csIndexed     :   u"index",
 *     GfxColorSpaceMode.csSeparation  :   u"sep",
 *     GfxColorSpaceMode.csDeviceN     :   u"devn",             # <<<<<<<<<<<<<<
 *     # not including csPattern
 *     #GfxColorSpaceMode.csPattern     :   u""
 */
  __Pyx_TraceLine(488,0,__PYX_ERR(9, 488, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_GfxColorSpaceMode(csDeviceN); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_devn) < 0) __PYX_ERR(9, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_6pyxpdf_4xpdf_GFX_COLOR_SPACE_NAMES);
  __Pyx_DECREF_SET(__pyx_v_6pyxpdf_4xpdf_GFX_COLOR_SPACE_NAMES, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":494
 * 
 * cdef dict IMAGE_STREAM_TYPES = {
 *     StreamKind.strCCITTFax  :   u"ccitt",             # <<<<<<<<<<<<<<
 *     StreamKind.strDCT       :   u"jpeg",
 *     StreamKind.strJPX       :   u"jpx",
 */
  __Pyx_TraceLine(494,0,__PYX_ERR(9, 494, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_StreamKind(strCCITTFax); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_ccitt) < 0) __PYX_ERR(9, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":495
 * cdef dict IMAGE_STREAM_TYPES = {
 *     StreamKind.strCCITTFax  :   u"ccitt",
 *     StreamKind.strDCT       :   u"jpeg",             # <<<<<<<<<<<<<<
 *     StreamKind.strJPX       :   u"jpx",
 *     StreamKind.strJBIG2     :   u"jbig2",
 */
  __Pyx_TraceLine(495,0,__PYX_ERR(9, 495, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_StreamKind(strDCT); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_jpeg) < 0) __PYX_ERR(9, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":496
 *     StreamKind.strCCITTFax  :   u"ccitt",
 *     StreamKind.strDCT       :   u"jpeg",
 *     StreamKind.strJPX       :   u"jpx",             # <<<<<<<<<<<<<<
 *     StreamKind.strJBIG2     :   u"jbig2",
 *     StreamKind.strFlate     :   u"flate",
 */
  __Pyx_TraceLine(496,0,__PYX_ERR(9, 496, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_StreamKind(strJPX); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_jpx) < 0) __PYX_ERR(9, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":497
 *     StreamKind.strDCT       :   u"jpeg",
 *     StreamKind.strJPX       :   u"jpx",
 *     StreamKind.strJBIG2     :   u"jbig2",             # <<<<<<<<<<<<<<
 *     StreamKind.strFlate     :   u"flate",
 *     StreamKind.strLZW       :   u"lzw",
 */
  __Pyx_TraceLine(497,0,__PYX_ERR(9, 497, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_StreamKind(strJBIG2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_jbig2) < 0) __PYX_ERR(9, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":498
 *     StreamKind.strJPX       :   u"jpx",
 *     StreamKind.strJBIG2     :   u"jbig2",
 *     StreamKind.strFlate     :   u"flate",             # <<<<<<<<<<<<<<
 *     StreamKind.strLZW       :   u"lzw",
 *     StreamKind.strRunLength :   u"rle",
 */
  __Pyx_TraceLine(498,0,__PYX_ERR(9, 498, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_StreamKind(strFlate); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_flate) < 0) __PYX_ERR(9, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":499
 *     StreamKind.strJBIG2     :   u"jbig2",
 *     StreamKind.strFlate     :   u"flate",
 *     StreamKind.strLZW       :   u"lzw",             # <<<<<<<<<<<<<<
 *     StreamKind.strRunLength :   u"rle",
 * }
 */
  __Pyx_TraceLine(499,0,__PYX_ERR(9, 499, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_StreamKind(strLZW); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_lzw) < 0) __PYX_ERR(9, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/imageoutput.pxi":500
 *     StreamKind.strFlate     :   u"flate",
 *     StreamKind.strLZW       :   u"lzw",
 *     StreamKind.strRunLength :   u"rle",             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __Pyx_TraceLine(500,0,__PYX_ERR(9, 500, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyInt_From_StreamKind(strRunLength); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_3, __pyx_n_u_rle) < 0) __PYX_ERR(9, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_6pyxpdf_4xpdf_IMAGE_STREAM_TYPES);
  __Pyx_DECREF_SET(__pyx_v_6pyxpdf_4xpdf_IMAGE_STREAM_TYPES, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/imageoutput.pxi":517
 * 
 *     @staticmethod
 *     cdef PDFImage from_ptr(PDFBitmapImage *c_img):             # <<<<<<<<<<<<<<
 *         cdef:
 *             PDFImage img = PDFImage.__new__(PDFImage)
 */
  __Pyx_TraceLine(517,0,__PYX_ERR(9, 517, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8PDFImage_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFImage___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFImage->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFImage);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFImage, (type(self), 0xb108fe2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFImage__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8PDFImage_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFImage___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFImage->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFImage);

  /* "src/pyxpdf/imageoutput.pxi":587
 * 
 * 
 *     cdef int _get_PDFBitmapImages(self, page_no, vector[PDFBitmapImage] *img_vec) except -1:             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[BitmapOutputDev] out = make_unique[BitmapOutputDev](img_vec)
 */
  __Pyx_TraceLine(587,0,__PYX_ERR(9, 587, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":595
 * 
 * 
 *     cdef list _get_images(self, page_no):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector[PDFBitmapImage] img_vec
 */
  __Pyx_TraceLine(595,0,__PYX_ERR(9, 595, __pyx_L1_error))


  /* "src/pyxpdf/imageoutput.pxi":609
 * 
 * 
 *     cpdef list get(self, page_no):             # <<<<<<<<<<<<<<
 *         """Get all the images from `page_no` indexed page.
 * 
 */
  __Pyx_TraceLine(609,0,__PYX_ERR(9, 609, __pyx_L1_error))

  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_14PDFImageOutput_3get, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFImageOutput_get, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFImageOutput->tp_dict, __pyx_n_s_get, __pyx_t_1) < 0) __PYX_ERR(9, 609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFImageOutput);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_14PDFImageOutput_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFImageOutput___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(7, 3, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_14PDFImageOutput_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFImageOutput___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":152
 * 
 * 
 *     cdef Catalog *get_catalog(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getCatalog()
 * 
 */
  __Pyx_TraceLine(152,0,__PYX_ERR(6, 152, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":155
 *         return self.doc.getCatalog()
 * 
 *     cdef display_pages(self, OutputDev* out, int first, int end,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */
  __Pyx_TraceLine(155,0,__PYX_ERR(6, 155, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":157
 *     cdef display_pages(self, OutputDev* out, int first, int end,
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,             # <<<<<<<<<<<<<<
 *                         GBool printing = gFalse):
 *         if first < 0 or first >= self.num_pages:
 */
  __Pyx_TraceLine(157,0,__PYX_ERR(6, 157, __pyx_L1_error))
  __pyx_k__75 = gFalse;
  __pyx_k__76 = gTrue;

  /* "src/pyxpdf/document.pxi":158
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 *                         GBool printing = gFalse):             # <<<<<<<<<<<<<<
 *         if first < 0 or first >= self.num_pages:
 *             first = 0
 */
  __Pyx_TraceLine(158,0,__PYX_ERR(6, 158, __pyx_L1_error))
  __pyx_k__77 = gFalse;

  /* "src/pyxpdf/document.pxi":166
 *                             use_media_box, crop, printing)
 * 
 *     cdef dict get_info_dict(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Object info
 */
  __Pyx_TraceLine(166,0,__PYX_ERR(6, 166, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":175
 *         return result
 * 
 *     cdef get_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 */
  __Pyx_TraceLine(175,0,__PYX_ERR(6, 175, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":182
 *         return None
 * 
 *     cdef _load_from_file(self, GString *pdf):             # <<<<<<<<<<<<<<
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 */
  __Pyx_TraceLine(182,0,__PYX_ERR(6, 182, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":187
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 *     cdef _load_from_char_array(self, char *pdf, int data_length):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Object *obj_null
 */
  __Pyx_TraceLine(187,0,__PYX_ERR(6, 187, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":201
 *         del obj_null
 * 
 *     cdef check(self):             # <<<<<<<<<<<<<<
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 */
  __Pyx_TraceLine(201,0,__PYX_ERR(6, 201, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":211
 *             raise ErrorCodeMapping[err_code]
 * 
 *     cdef int label_to_index(self, label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int pgno
 */
  __Pyx_TraceLine(211,0,__PYX_ERR(6, 211, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":223
 *         return pgno
 * 
 *     cdef get_page(self, int idx):             # <<<<<<<<<<<<<<
 *         if idx < 0 or idx >= self.num_pages:
 *             raise IndexError(
 */
  __Pyx_TraceLine(223,0,__PYX_ERR(6, 223, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":319
 * 
 * 
 *     def info(self):             # <<<<<<<<<<<<<<
 *         """Get the PDF's info dictionary.
 * 
 */
  __Pyx_TraceLine(319,0,__PYX_ERR(6, 319, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8Document_17info, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Document_info, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_Document->tp_dict, __pyx_n_s_info, __pyx_t_1) < 0) __PYX_ERR(6, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_Document);

  /* "src/pyxpdf/document.pxi":332
 *         return self.get_info_dict()
 * 
 *     def xmp_metadata(self):             # <<<<<<<<<<<<<<
 *         """Get the PDF's xmp metadata.
 * 
 */
  __Pyx_TraceLine(332,0,__PYX_ERR(6, 332, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8Document_19xmp_metadata, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Document_xmp_metadata, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_Document->tp_dict, __pyx_n_s_xmp_metadata, __pyx_t_1) < 0) __PYX_ERR(6, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_Document);

  /* "src/pyxpdf/document.pxi":342
 * 
 * 
 *     cpdef text_bytes(self, int start=0, int end=-1, TextControl control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract text from given page range.
 * 
 */
  __Pyx_TraceLine(342,0,__PYX_ERR(6, 342, __pyx_L1_error))

  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8Document_21text_bytes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Document_text_bytes, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_Document->tp_dict, __pyx_n_s_text_bytes, __pyx_t_1) < 0) __PYX_ERR(6, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_Document);

  /* "src/pyxpdf/document.pxi":384
 *         return deref(out)
 * 
 *     cpdef text(self, start=0, end=-1, control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract UTF-8 decoded text from given page range.
 * 
 */
  __Pyx_TraceLine(384,0,__PYX_ERR(6, 384, __pyx_L1_error))

  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8Document_23text, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Document_text, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_Document->tp_dict, __pyx_n_s_text, __pyx_t_1) < 0) __PYX_ERR(6, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_Document);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8Document_25__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Document___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(7, 3, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_8Document_27__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Document___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_20DocumentPageIterator_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DocumentPageIterator___reduce_cy, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_DocumentPageIterator->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_DocumentPageIterator);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_DocumentPageIterator, (type(self), 0x66efdcb, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_DocumentPageIterator__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_20DocumentPageIterator_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_DocumentPageIterator___setstate, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_DocumentPageIterator->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_DocumentPageIterator);

  /* "src/pyxpdf/document.pxi":522
 * 
 * 
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */
  __Pyx_TraceLine(522,0,__PYX_ERR(6, 522, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":524
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,             # <<<<<<<<<<<<<<
 *                         GBool printing = gFalse):
 *         self.page.displaySlice(out, hDPI, vDPI, rotate, use_media_box, crop,
 */
  __Pyx_TraceLine(524,0,__PYX_ERR(6, 524, __pyx_L1_error))
  __pyx_k__91 = gFalse;
  __pyx_k__92 = gTrue;

  /* "src/pyxpdf/document.pxi":525
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 *                         GBool printing = gFalse):             # <<<<<<<<<<<<<<
 *         self.page.displaySlice(out, hDPI, vDPI, rotate, use_media_box, crop,
 *                                 x1, y1, hgt, wdt, printing)
 */
  __Pyx_TraceLine(525,0,__PYX_ERR(6, 525, __pyx_L1_error))
  __pyx_k__93 = gFalse;

  /* "src/pyxpdf/document.pxi":529
 *                                 x1, y1, hgt, wdt, printing)
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,             # <<<<<<<<<<<<<<
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 */
  __Pyx_TraceLine(529,0,__PYX_ERR(6, 529, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":530
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,
 *                         int rotate = 0, GBool use_media_box = gFalse,             # <<<<<<<<<<<<<<
 *                         GBool crop = gTrue, GBool printing = gFalse):
 *         self.display_slice(out, -1, -1, -1, -1, hDPI, vDPI, rotate,
 */
  __Pyx_TraceLine(530,0,__PYX_ERR(6, 530, __pyx_L1_error))
  __pyx_k__94 = gFalse;

  /* "src/pyxpdf/document.pxi":531
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):             # <<<<<<<<<<<<<<
 *         self.display_slice(out, -1, -1, -1, -1, hDPI, vDPI, rotate,
 *                             use_media_box, crop, printing)
 */
  __Pyx_TraceLine(531,0,__PYX_ERR(6, 531, __pyx_L1_error))
  __pyx_k__95 = gTrue;
  __pyx_k__96 = gFalse;

  /* "src/pyxpdf/document.pxi":535
 *                             use_media_box, crop, printing)
 * 
 *     cdef _init_TextPage(self, int rotation):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[TextOutputControl] text_control
 */
  __Pyx_TraceLine(535,0,__PYX_ERR(6, 535, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":546
 *         self.textpage.reset(deref(td).takeText())
 * 
 *     cdef get_label(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unique_ptr[GString] glabel
 */
  __Pyx_TraceLine(546,0,__PYX_ERR(6, 546, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":560
 *         return None
 * 
 *     cdef _find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,             # <<<<<<<<<<<<<<
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 */
  __Pyx_TraceLine(560,0,__PYX_ERR(6, 560, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":657
 * 
 * 
 *     def find_text(self, text, search_box=None, direction="top", case_sensitive=False,             # <<<<<<<<<<<<<<
 *                   wholeword=False, rotation=0):
 *         """Find the text in Page.
 */
  __Pyx_TraceLine(657,0,__PYX_ERR(6, 657, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_4Page_7find_text, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Page_find_text, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_Page->tp_dict, __pyx_n_s_find_text, __pyx_t_1) < 0) __PYX_ERR(6, 657, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_Page);

  /* "src/pyxpdf/document.pxi":713
 * 
 * 
 *     def find_all_text(self, text, search_box=None, case_sensitive=False, wholeword=False,             # <<<<<<<<<<<<<<
 *                       rotation=0):
 *         """Find the `text` and get all the matches
 */
  __Pyx_TraceLine(713,0,__PYX_ERR(6, 713, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_4Page_9find_all_text, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Page_find_all_text, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_Page->tp_dict, __pyx_n_s_find_all_text, __pyx_t_1) < 0) __PYX_ERR(6, 713, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_Page);

  /* "src/pyxpdf/document.pxi":745
 * 
 * 
 *     def text_bytes(self, page_area=None, TextControl control = None):             # <<<<<<<<<<<<<<
 *         """Parse and extract text bytes from current page.
 * 
 */
  __Pyx_TraceLine(745,0,__PYX_ERR(6, 745, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_4Page_12text_bytes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Page_text_bytes, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_Page->tp_dict, __pyx_n_s_text_bytes, __pyx_t_1) < 0) __PYX_ERR(6, 745, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_Page);

  /* "src/pyxpdf/document.pxi":792
 * 
 * 
 *     def text(self, page_area=None, control=None):             # <<<<<<<<<<<<<<
 *         """Parse and extract UTF-8 decoded text from current page.
 * 
 */
  __Pyx_TraceLine(792,0,__PYX_ERR(6, 792, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_4Page_14text, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Page_text, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_Page->tp_dict, __pyx_n_s_text, __pyx_t_1) < 0) __PYX_ERR(6, 792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_Page);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_4Page_16__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Page___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(7, 3, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_4Page_18__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Page___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_13page_iterator_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_page_iterator___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_page_iterator->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_page_iterator);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_page_iterator, (type(self), 0x6bfc9fe, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_page_iterator__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(7, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_13page_iterator_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_page_iterator___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_page_iterator->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(7, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_page_iterator);

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError, 0, __pyx_n_s_pyx_unpickle_PDFError, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PDFError, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_XPDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_5__pyx_unpickle_XPDFError, 0, __pyx_n_s_pyx_unpickle_XPDFError, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_XPDFError, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_XPDFError__set_state(<XPDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFError__set_state(XPDFError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFSyntaxError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_7__pyx_unpickle_PDFSyntaxError, 0, __pyx_n_s_pyx_unpickle_PDFSyntaxError, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PDFSyntaxError, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFSyntaxError__set_state(<PDFSyntaxError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFSyntaxError__set_state(PDFSyntaxError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_XPDFConfigError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_9__pyx_unpickle_XPDFConfigError, 0, __pyx_n_s_pyx_unpickle_XPDFConfigError, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_XPDFConfigError, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_XPDFConfigError__set_state(<XPDFConfigError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFConfigError__set_state(XPDFConfigError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFIOError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_11__pyx_unpickle_PDFIOError, 0, __pyx_n_s_pyx_unpickle_PDFIOError, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PDFIOError, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFIOError__set_state(<PDFIOError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFIOError__set_state(PDFIOError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFPermissionError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_13__pyx_unpickle_PDFPermissionError, 0, __pyx_n_s_pyx_unpickle_PDFPermissionErro, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PDFPermissionErro, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFPermissionError__set_state(<PDFPermissionError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFPermissionError__set_state(PDFPermissionError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_XPDFInternalError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_15__pyx_unpickle_XPDFInternalError, 0, __pyx_n_s_pyx_unpickle_XPDFInternalError, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_XPDFInternalError, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_XPDFInternalError__set_state(<XPDFInternalError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFInternalError__set_state(XPDFInternalError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_XPDFNotInplementedError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_17__pyx_unpickle_XPDFNotInplementedError, 0, __pyx_n_s_pyx_unpickle_XPDFNotInplemente, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_XPDFNotInplemente, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_XPDFNotInplementedError__set_state(<XPDFNotInplementedError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_XPDFNotInplementedError__set_state(XPDFNotInplementedError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFOutputDevice(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_19__pyx_unpickle_PDFOutputDevice, 0, __pyx_n_s_pyx_unpickle_PDFOutputDevice, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PDFOutputDevice, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFOutputDevice__set_state(<PDFOutputDevice> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFOutputDevice__set_state(PDFOutputDevice __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_RawImageControl(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_21__pyx_unpickle_RawImageControl, 0, __pyx_n_s_pyx_unpickle_RawImageControl, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_RawImageControl, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_RawImageControl__set_state(<RawImageControl> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RawImageControl__set_state(RawImageControl __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFImage(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_23__pyx_unpickle_PDFImage, 0, __pyx_n_s_pyx_unpickle_PDFImage, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PDFImage, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFImage__set_state(<PDFImage> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFImage__set_state(PDFImage __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.bbox = __pyx_state[0]; __pyx_result.colorspace = __pyx_state[1]; __pyx_result.compression = __pyx_state[2]; __pyx_result.hDPI = __pyx_state[3]; __pyx_result.image = __pyx_state[4]; __pyx_result.image_type = __pyx_state[5]; __pyx_result.interpolate = __pyx_state[6]; __pyx_result.is_inline = __pyx_state[7]; __pyx_result.page_index = __pyx_state[8]; __pyx_result.vDPI = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_DocumentPageIterator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_25__pyx_unpickle_DocumentPageIterator, 0, __pyx_n_s_pyx_unpickle_DocumentPageItera, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_DocumentPageItera, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_DocumentPageIterator__set_state(<DocumentPageIterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_DocumentPageIterator__set_state(DocumentPageIterator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.doc = __pyx_state[0]; __pyx_result.index = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __pyx_unpickle_page_iterator(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(7, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_6pyxpdf_4xpdf_27__pyx_unpickle_page_iterator, 0, __pyx_n_s_pyx_unpickle_page_iterator, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_page_iterator, __pyx_t_1) < 0) __PYX_ERR(7, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_page_iterator__set_state(<page_iterator> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_page_iterator__set_state(page_iterator __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.index = __pyx_state[0]; __pyx_result.kwargs = __pyx_state[1]; __pyx_result.output = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(7, 11, __pyx_L1_error))


  /* "pyxpdf/xpdf.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # cython: language_level=3
 * # cython: profile=True
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(0, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */
  __Pyx_TraceLine(31,0,__PYX_ERR(7, 31, __pyx_L1_error))


  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */
  __Pyx_TraceLine(37,0,__PYX_ERR(7, 37, __pyx_L1_error))


  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */
  __Pyx_TraceLine(43,0,__PYX_ERR(7, 43, __pyx_L1_error))


  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */
  __Pyx_TraceLine(49,0,__PYX_ERR(7, 49, __pyx_L1_error))


  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */
  __Pyx_TraceLine(55,0,__PYX_ERR(7, 55, __pyx_L1_error))

  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  if (__Pyx_RegisterCleanup()) __PYX_ERR(0, 1, __pyx_L1_error);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyxpdf.xpdf", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyxpdf.xpdf");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

static CYTHON_SMALL_CODE void __Pyx_CleanupGlobals(void) {
  Py_CLEAR(__pyx_tuple__2);
  Py_CLEAR(__pyx_tuple__3);
  Py_CLEAR(__pyx_codeobj__6);
  Py_CLEAR(__pyx_codeobj__7);
  Py_CLEAR(__pyx_codeobj__8);
  Py_CLEAR(__pyx_codeobj__9);
  Py_CLEAR(__pyx_codeobj__10);
  Py_CLEAR(__pyx_codeobj__11);
  Py_CLEAR(__pyx_codeobj__12);
  Py_CLEAR(__pyx_codeobj__13);
  Py_CLEAR(__pyx_codeobj__14);
  Py_CLEAR(__pyx_codeobj__15);
  Py_CLEAR(__pyx_codeobj__16);
  Py_CLEAR(__pyx_codeobj__17);
  Py_CLEAR(__pyx_codeobj__18);
  Py_CLEAR(__pyx_codeobj__19);
  Py_CLEAR(__pyx_codeobj__20);
  Py_CLEAR(__pyx_codeobj__21);
  Py_CLEAR(__pyx_codeobj__22);
  Py_CLEAR(__pyx_tuple__23);
  Py_CLEAR(__pyx_codeobj__24);
  Py_CLEAR(__pyx_codeobj__25);
  Py_CLEAR(__pyx_codeobj__26);
  Py_CLEAR(__pyx_codeobj__27);
  Py_CLEAR(__pyx_codeobj__28);
  Py_CLEAR(__pyx_tuple__29);
  Py_CLEAR(__pyx_codeobj__30);
  Py_CLEAR(__pyx_tuple__31);
  Py_CLEAR(__pyx_codeobj__32);
  Py_CLEAR(__pyx_tuple__33);
  Py_CLEAR(__pyx_tuple__34);
  Py_CLEAR(__pyx_codeobj__35);
  Py_CLEAR(__pyx_codeobj__36);
  Py_CLEAR(__pyx_codeobj__37);
  Py_CLEAR(__pyx_tuple__38);
  Py_CLEAR(__pyx_codeobj__39);
  Py_CLEAR(__pyx_tuple__40);
  Py_CLEAR(__pyx_codeobj__41);
  Py_CLEAR(__pyx_tuple__42);
  Py_CLEAR(__pyx_tuple__43);
  Py_CLEAR(__pyx_codeobj__45);
  Py_CLEAR(__pyx_codeobj__46);
  Py_CLEAR(__pyx_codeobj__47);
  Py_CLEAR(__pyx_codeobj__48);
  Py_CLEAR(__pyx_tuple__49);
  Py_CLEAR(__pyx_codeobj__50);
  Py_CLEAR(__pyx_tuple__51);
  Py_CLEAR(__pyx_tuple__53);
  Py_CLEAR(__pyx_codeobj__54);
  Py_CLEAR(__pyx_codeobj__55);
  Py_CLEAR(__pyx_tuple__56);
  Py_CLEAR(__pyx_tuple__57);
  Py_CLEAR(__pyx_tuple__58);
  Py_CLEAR(__pyx_codeobj__59);
  Py_CLEAR(__pyx_codeobj__60);
  Py_CLEAR(__pyx_tuple__61);
  Py_CLEAR(__pyx_codeobj__62);
  Py_CLEAR(__pyx_tuple__63);
  Py_CLEAR(__pyx_tuple__64);
  Py_CLEAR(__pyx_codeobj__66);
  Py_CLEAR(__pyx_codeobj__67);
  Py_CLEAR(__pyx_codeobj__68);
  Py_CLEAR(__pyx_codeobj__69);
  Py_CLEAR(__pyx_tuple__70);
  Py_CLEAR(__pyx_codeobj__71);
  Py_CLEAR(__pyx_tuple__72);
  Py_CLEAR(__pyx_tuple__73);
  Py_CLEAR(__pyx_tuple__74);
  Py_CLEAR(__pyx_tuple__78);
  Py_CLEAR(__pyx_tuple__79);
  Py_CLEAR(__pyx_codeobj__80);
  Py_CLEAR(__pyx_codeobj__81);
  Py_CLEAR(__pyx_codeobj__82);
  Py_CLEAR(__pyx_codeobj__83);
  Py_CLEAR(__pyx_codeobj__84);
  Py_CLEAR(__pyx_tuple__85);
  Py_CLEAR(__pyx_codeobj__86);
  Py_CLEAR(__pyx_tuple__87);
  Py_CLEAR(__pyx_codeobj__88);
  Py_CLEAR(__pyx_codeobj__89);
  Py_CLEAR(__pyx_tuple__90);
  Py_CLEAR(__pyx_codeobj__97);
  Py_CLEAR(__pyx_codeobj__98);
  Py_CLEAR(__pyx_codeobj__99);
  Py_CLEAR(__pyx_codeobj__100);
  Py_CLEAR(__pyx_codeobj__101);
  Py_CLEAR(__pyx_tuple__102);
  Py_CLEAR(__pyx_codeobj__103);
  Py_CLEAR(__pyx_tuple__104);
  Py_CLEAR(__pyx_codeobj__105);
  Py_CLEAR(__pyx_codeobj__106);
  Py_CLEAR(__pyx_codeobj__107);
  Py_CLEAR(__pyx_codeobj__108);
  Py_CLEAR(__pyx_codeobj__109);
  Py_CLEAR(__pyx_codeobj__110);
  Py_CLEAR(__pyx_codeobj__111);
  Py_CLEAR(__pyx_codeobj__112);
  Py_CLEAR(__pyx_codeobj__113);
  Py_CLEAR(__pyx_codeobj__114);
  Py_CLEAR(__pyx_codeobj__115);
  Py_CLEAR(__pyx_codeobj__116);
  Py_CLEAR(__pyx_codeobj__117);
  Py_CLEAR(__pyx_codeobj__118);
  Py_CLEAR(__pyx_codeobj__119);
  Py_CLEAR(__pyx_tuple__120);
  Py_CLEAR(__pyx_tuple__121);
  Py_CLEAR(__pyx_tuple__122);
  Py_CLEAR(__pyx_tuple__123);
  Py_CLEAR(__pyx_tuple__124);
  Py_CLEAR(__pyx_tuple__125);
  Py_CLEAR(__pyx_tuple__126);
  Py_CLEAR(__pyx_tuple__127);
  Py_CLEAR(__pyx_tuple__128);
  Py_CLEAR(__pyx_tuple__129);
  Py_CLEAR(__pyx_tuple__130);
  Py_CLEAR(__pyx_tuple__131);
  Py_CLEAR(__pyx_tuple__132);
  Py_CLEAR(__pyx_tuple__133);
  Py_CLEAR(__pyx_tuple__134);
  Py_CLEAR(__pyx_tuple__135);
  Py_CLEAR(__pyx_tuple__136);
  Py_CLEAR(__pyx_tuple__137);
  Py_CLEAR(__pyx_tuple__138);
  Py_CLEAR(__pyx_tuple__139);
  Py_CLEAR(__pyx_tuple__140);
  Py_CLEAR(__pyx_tuple__141);
  Py_CLEAR(__pyx_tuple__142);
  Py_CLEAR(__pyx_tuple__143);
  Py_CLEAR(__pyx_tuple__144);
  Py_CLEAR(__pyx_tuple__145);
  Py_CLEAR(__pyx_tuple__146);
  Py_CLEAR(__pyx_tuple__147);
  Py_CLEAR(__pyx_tuple__148);
  Py_CLEAR(__pyx_tuple__149);
  Py_CLEAR(__pyx_tuple__150);
  Py_CLEAR(__pyx_tuple__151);
  Py_CLEAR(__pyx_tuple__152);
  Py_CLEAR(__pyx_tuple__153);
  Py_CLEAR(__pyx_tuple__154);
  Py_CLEAR(__pyx_tuple__155);
  Py_CLEAR(__pyx_tuple__156);
  Py_CLEAR(__pyx_tuple__157);
  Py_CLEAR(__pyx_tuple__158);
  Py_CLEAR(__pyx_tuple__159);
  Py_CLEAR(__pyx_tuple__160);
  Py_CLEAR(__pyx_tuple__161);
  Py_CLEAR(__pyx_tuple__162);
  Py_CLEAR(__pyx_tuple__163);
  Py_CLEAR(__pyx_tuple__164);
  Py_CLEAR(__pyx_tuple__165);
  Py_CLEAR(__pyx_tuple__166);
  Py_CLEAR(__pyx_tuple__167);
  Py_CLEAR(__pyx_tuple__168);
  Py_CLEAR(__pyx_tuple__169);
  Py_CLEAR(__pyx_tuple__170);
  Py_CLEAR(__pyx_tuple__171);
  Py_CLEAR(__pyx_tuple__172);
  Py_CLEAR(__pyx_tuple__173);
  Py_CLEAR(__pyx_tuple__174);
  Py_CLEAR(__pyx_tuple__175);
  Py_CLEAR(__pyx_tuple__176);
  Py_CLEAR(__pyx_tuple__177);
  Py_CLEAR(__pyx_tuple__178);
  Py_CLEAR(__pyx_tuple__179);
  Py_CLEAR(__pyx_tuple__180);
  Py_CLEAR(__pyx_tuple__181);
  Py_CLEAR(__pyx_tuple__182);
  Py_CLEAR(__pyx_tuple__183);
  Py_CLEAR(__pyx_tuple__184);
  Py_CLEAR(__pyx_tuple__185);
  Py_CLEAR(__pyx_tuple__186);
  Py_CLEAR(__pyx_tuple__187);
  Py_CLEAR(__pyx_tuple__188);
  Py_CLEAR(__pyx_tuple__189);
  Py_CLEAR(__pyx_tuple__190);
  Py_CLEAR(__pyx_tuple__191);
  Py_CLEAR(__pyx_tuple__192);
  Py_CLEAR(__pyx_tuple__193);
  /* CodeObjectCache.cleanup */
  if (__pyx_code_cache.entries) {
      __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
      int i, count = __pyx_code_cache.count;
      __pyx_code_cache.count = 0;
      __pyx_code_cache.max_count = 0;
      __pyx_code_cache.entries = NULL;
      for (i=0; i<count; i++) {
          Py_DECREF(entries[i].code_object);
      }
      PyMem_Free(entries);
  }

Py_CLEAR(__pyx_umethod_PyDict_Type_get.method);
}
static void __pyx_module_cleanup(CYTHON_UNUSED PyObject *self) {
  /*--- Global cleanup code ---*/
  Py_CLEAR(__pyx_v_6pyxpdf_4xpdf_IMAGE_STREAM_TYPES);
  Py_CLEAR(__pyx_v_6pyxpdf_4xpdf_GFX_COLOR_SPACE_NAMES);
  Py_CLEAR(__pyx_v_6pyxpdf_4xpdf_IMAGE_MODES);
  Py_CLEAR(__pyx_v_6pyxpdf_4xpdf_available_deps);
  Py_CLEAR(__pyx_v_6pyxpdf_4xpdf_optional_deps);
  __Pyx_CleanupGlobals();
  /*--- Type import cleanup code ---*/
  /*--- Builtin cleanup code ---*/
  Py_CLEAR(__pyx_builtin_range);
  Py_CLEAR(__pyx_builtin_TypeError);
  Py_CLEAR(__pyx_builtin_super);
  Py_CLEAR(__pyx_builtin_ImportError);
  Py_CLEAR(__pyx_builtin_MemoryError);
  Py_CLEAR(__pyx_builtin_ValueError);
  Py_CLEAR(__pyx_builtin_NotImplementedError);
  Py_CLEAR(__pyx_builtin_KeyError);
  Py_CLEAR(__pyx_builtin_IndexError);
  Py_CLEAR(__pyx_builtin_StopIteration);
  /*--- Intern cleanup code ---*/
  Py_CLEAR(__pyx_empty_tuple);
  while (__pyx_freecount_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text > 0) {
    PyObject* o = (PyObject*)__pyx_freelist_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text[--__pyx_freecount_6pyxpdf_4xpdf___pyx_scope_struct__find_all_text];
    (*Py_TYPE(o)->tp_free)(o);
  }
  Py_CLEAR(__pyx_d);
  Py_CLEAR(__pyx_cython_runtime);
  Py_CLEAR(__pyx_b);
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return PyUnicode_FromUnicode(NULL, 0);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* SetItemIntByteArray */
static CYTHON_INLINE int __Pyx_SetItemInt_ByteArray_Fast(PyObject* string, Py_ssize_t i, unsigned char v,
                                                         int wraparound, int boundscheck) {
    Py_ssize_t length;
    if (wraparound | boundscheck) {
        length = PyByteArray_GET_SIZE(string);
        if (wraparound & unlikely(i < 0)) i += length;
        if ((!boundscheck) || likely(__Pyx_is_valid_index(i, length))) {
            PyByteArray_AS_STRING(string)[i] = (char) v;
            return 0;
        } else {
            PyErr_SetString(PyExc_IndexError, "bytearray index out of range");
            return -1;
        }
    } else {
        PyByteArray_AS_STRING(string)[i] = (char) v;
        return 0;
    }
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* RegisterModuleCleanup */
#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
static PyObject* __pyx_module_cleanup_atexit(PyObject *module, CYTHON_UNUSED PyObject *unused) {
    __pyx_module_cleanup(module);
    Py_INCREF(Py_None); return Py_None;
}
static int __Pyx_RegisterCleanup(void) {
    static PyMethodDef cleanup_def = {
        "__cleanup", (PyCFunction)__pyx_module_cleanup_atexit, METH_NOARGS, 0};
    PyObject *cleanup_func = 0;
    PyObject *atexit = 0;
    PyObject *reg = 0;
    PyObject *args = 0;
    PyObject *res = 0;
    int ret = -1;
    cleanup_func = PyCFunction_New(&cleanup_def, 0);
    if (!cleanup_func)
        goto bad;
    atexit = PyImport_ImportModule("atexit");
    if (!atexit)
        goto bad;
    reg = PyObject_GetAttrString(atexit, "_exithandlers");
    if (reg && PyList_Check(reg)) {
        PyObject *a, *kw;
        a = PyTuple_New(0);
        kw = PyDict_New();
        if (!a || !kw) {
            Py_XDECREF(a);
            Py_XDECREF(kw);
            goto bad;
        }
        args = PyTuple_Pack(3, cleanup_func, a, kw);
        Py_DECREF(a);
        Py_DECREF(kw);
        if (!args)
            goto bad;
        ret = PyList_Insert(reg, 0, args);
    } else {
        if (!reg)
            PyErr_Clear();
        Py_XDECREF(reg);
        reg = PyObject_GetAttrString(atexit, "register");
        if (!reg)
            goto bad;
        args = PyTuple_Pack(1, cleanup_func);
        if (!args)
            goto bad;
        res = PyObject_CallObject(reg, args);
        if (!res)
            goto bad;
        ret = 0;
    }
bad:
    Py_XDECREF(cleanup_func);
    Py_XDECREF(atexit);
    Py_XDECREF(reg);
    Py_XDECREF(args);
    Py_XDECREF(res);
    return ret;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_SplashColorMode(SplashColorMode value) {
    const SplashColorMode neg_one = (SplashColorMode) ((SplashColorMode) 0 - (SplashColorMode) 1), const_zero = (SplashColorMode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(SplashColorMode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(SplashColorMode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SplashColorMode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(SplashColorMode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(SplashColorMode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(SplashColorMode),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_GfxColorSpaceMode(GfxColorSpaceMode value) {
    const GfxColorSpaceMode neg_one = (GfxColorSpaceMode) ((GfxColorSpaceMode) 0 - (GfxColorSpaceMode) 1), const_zero = (GfxColorSpaceMode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(GfxColorSpaceMode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(GfxColorSpaceMode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(GfxColorSpaceMode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(GfxColorSpaceMode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(GfxColorSpaceMode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(GfxColorSpaceMode),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_StreamKind(StreamKind value) {
    const StreamKind neg_one = (StreamKind) ((StreamKind) 0 - (StreamKind) 1), const_zero = (StreamKind) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(StreamKind) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(StreamKind) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(StreamKind) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(StreamKind) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(StreamKind) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(StreamKind),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Unicode(Unicode value) {
    const Unicode neg_one = (Unicode) ((Unicode) 0 - (Unicode) 1), const_zero = (Unicode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Unicode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Unicode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Unicode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Unicode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Unicode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Unicode),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE Guchar __Pyx_PyInt_As_Guchar(PyObject *x) {
    const Guchar neg_one = (Guchar) ((Guchar) 0 - (Guchar) 1), const_zero = (Guchar) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(Guchar) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(Guchar, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (Guchar) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Guchar) 0;
                case  1: __PYX_VERIFY_RETURN_INT(Guchar, digit, digits[0])
                case 2:
                    if (8 * sizeof(Guchar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Guchar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Guchar) >= 2 * PyLong_SHIFT) {
                            return (Guchar) (((((Guchar)digits[1]) << PyLong_SHIFT) | (Guchar)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Guchar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Guchar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Guchar) >= 3 * PyLong_SHIFT) {
                            return (Guchar) (((((((Guchar)digits[2]) << PyLong_SHIFT) | (Guchar)digits[1]) << PyLong_SHIFT) | (Guchar)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Guchar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Guchar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Guchar) >= 4 * PyLong_SHIFT) {
                            return (Guchar) (((((((((Guchar)digits[3]) << PyLong_SHIFT) | (Guchar)digits[2]) << PyLong_SHIFT) | (Guchar)digits[1]) << PyLong_SHIFT) | (Guchar)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (Guchar) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(Guchar) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Guchar, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Guchar) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Guchar, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Guchar) 0;
                case -1: __PYX_VERIFY_RETURN_INT(Guchar, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(Guchar,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(Guchar) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Guchar, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Guchar) - 1 > 2 * PyLong_SHIFT) {
                            return (Guchar) (((Guchar)-1)*(((((Guchar)digits[1]) << PyLong_SHIFT) | (Guchar)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(Guchar) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Guchar, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Guchar) - 1 > 2 * PyLong_SHIFT) {
                            return (Guchar) ((((((Guchar)digits[1]) << PyLong_SHIFT) | (Guchar)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(Guchar) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Guchar, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Guchar) - 1 > 3 * PyLong_SHIFT) {
                            return (Guchar) (((Guchar)-1)*(((((((Guchar)digits[2]) << PyLong_SHIFT) | (Guchar)digits[1]) << PyLong_SHIFT) | (Guchar)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Guchar) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Guchar, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Guchar) - 1 > 3 * PyLong_SHIFT) {
                            return (Guchar) ((((((((Guchar)digits[2]) << PyLong_SHIFT) | (Guchar)digits[1]) << PyLong_SHIFT) | (Guchar)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(Guchar) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Guchar, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Guchar) - 1 > 4 * PyLong_SHIFT) {
                            return (Guchar) (((Guchar)-1)*(((((((((Guchar)digits[3]) << PyLong_SHIFT) | (Guchar)digits[2]) << PyLong_SHIFT) | (Guchar)digits[1]) << PyLong_SHIFT) | (Guchar)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Guchar) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Guchar, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Guchar) - 1 > 4 * PyLong_SHIFT) {
                            return (Guchar) ((((((((((Guchar)digits[3]) << PyLong_SHIFT) | (Guchar)digits[2]) << PyLong_SHIFT) | (Guchar)digits[1]) << PyLong_SHIFT) | (Guchar)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(Guchar) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Guchar, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Guchar) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Guchar, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            Guchar val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (Guchar) -1;
        }
    } else {
        Guchar val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (Guchar) -1;
        val = __Pyx_PyInt_As_Guchar(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to Guchar");
    return (Guchar) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to Guchar");
    return (Guchar) -1;
}

/* CIntFromPy */
static CYTHON_INLINE SplashColorMode __Pyx_PyInt_As_SplashColorMode(PyObject *x) {
    const SplashColorMode neg_one = (SplashColorMode) ((SplashColorMode) 0 - (SplashColorMode) 1), const_zero = (SplashColorMode) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(SplashColorMode) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(SplashColorMode, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (SplashColorMode) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (SplashColorMode) 0;
                case  1: __PYX_VERIFY_RETURN_INT(SplashColorMode, digit, digits[0])
                case 2:
                    if (8 * sizeof(SplashColorMode) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SplashColorMode, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SplashColorMode) >= 2 * PyLong_SHIFT) {
                            return (SplashColorMode) (((((SplashColorMode)digits[1]) << PyLong_SHIFT) | (SplashColorMode)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(SplashColorMode) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SplashColorMode, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SplashColorMode) >= 3 * PyLong_SHIFT) {
                            return (SplashColorMode) (((((((SplashColorMode)digits[2]) << PyLong_SHIFT) | (SplashColorMode)digits[1]) << PyLong_SHIFT) | (SplashColorMode)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(SplashColorMode) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SplashColorMode, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SplashColorMode) >= 4 * PyLong_SHIFT) {
                            return (SplashColorMode) (((((((((SplashColorMode)digits[3]) << PyLong_SHIFT) | (SplashColorMode)digits[2]) << PyLong_SHIFT) | (SplashColorMode)digits[1]) << PyLong_SHIFT) | (SplashColorMode)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (SplashColorMode) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(SplashColorMode) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(SplashColorMode, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(SplashColorMode) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(SplashColorMode, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (SplashColorMode) 0;
                case -1: __PYX_VERIFY_RETURN_INT(SplashColorMode, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(SplashColorMode,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(SplashColorMode) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SplashColorMode, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SplashColorMode) - 1 > 2 * PyLong_SHIFT) {
                            return (SplashColorMode) (((SplashColorMode)-1)*(((((SplashColorMode)digits[1]) << PyLong_SHIFT) | (SplashColorMode)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(SplashColorMode) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SplashColorMode, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SplashColorMode) - 1 > 2 * PyLong_SHIFT) {
                            return (SplashColorMode) ((((((SplashColorMode)digits[1]) << PyLong_SHIFT) | (SplashColorMode)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(SplashColorMode) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SplashColorMode, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SplashColorMode) - 1 > 3 * PyLong_SHIFT) {
                            return (SplashColorMode) (((SplashColorMode)-1)*(((((((SplashColorMode)digits[2]) << PyLong_SHIFT) | (SplashColorMode)digits[1]) << PyLong_SHIFT) | (SplashColorMode)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(SplashColorMode) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SplashColorMode, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SplashColorMode) - 1 > 3 * PyLong_SHIFT) {
                            return (SplashColorMode) ((((((((SplashColorMode)digits[2]) << PyLong_SHIFT) | (SplashColorMode)digits[1]) << PyLong_SHIFT) | (SplashColorMode)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(SplashColorMode) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SplashColorMode, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SplashColorMode) - 1 > 4 * PyLong_SHIFT) {
                            return (SplashColorMode) (((SplashColorMode)-1)*(((((((((SplashColorMode)digits[3]) << PyLong_SHIFT) | (SplashColorMode)digits[2]) << PyLong_SHIFT) | (SplashColorMode)digits[1]) << PyLong_SHIFT) | (SplashColorMode)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(SplashColorMode) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(SplashColorMode, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(SplashColorMode) - 1 > 4 * PyLong_SHIFT) {
                            return (SplashColorMode) ((((((((((SplashColorMode)digits[3]) << PyLong_SHIFT) | (SplashColorMode)digits[2]) << PyLong_SHIFT) | (SplashColorMode)digits[1]) << PyLong_SHIFT) | (SplashColorMode)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(SplashColorMode) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(SplashColorMode, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(SplashColorMode) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(SplashColorMode, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            SplashColorMode val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (SplashColorMode) -1;
        }
    } else {
        SplashColorMode val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (SplashColorMode) -1;
        val = __Pyx_PyInt_As_SplashColorMode(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to SplashColorMode");
    return (SplashColorMode) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to SplashColorMode");
    return (SplashColorMode) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
